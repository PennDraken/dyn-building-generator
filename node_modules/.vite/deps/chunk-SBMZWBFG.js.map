{
  "version": 3,
  "sources": ["../../@flatten-js/core/dist/main.mjs"],
  "sourcesContent": ["/**\r\n * Global constant CCW defines counterclockwise direction of arc\r\n * @type {boolean}\r\n */\r\nconst CCW = true;\r\n\r\n/**\r\n * Global constant CW defines clockwise direction of arc\r\n * @type {boolean}\r\n */\r\nconst CW = false;\r\n\r\n/**\r\n * Defines orientation for face of the polygon: clockwise, counterclockwise\r\n * or not orientable in the case of self-intersection\r\n * @type {{CW: number, CCW: number, NOT_ORIENTABLE: number}}\r\n */\r\nconst ORIENTATION = {CCW:-1, CW:1, NOT_ORIENTABLE: 0};\r\n\r\nconst PIx2 = 2 * Math.PI;\r\n\r\nconst INSIDE$2 = 1;\r\nconst OUTSIDE$1 = 0;\r\nconst BOUNDARY$1 = 2;\r\nconst CONTAINS = 3;\r\nconst INTERLACE = 4;\r\n\r\nconst OVERLAP_SAME$1 = 1;\r\nconst OVERLAP_OPPOSITE$1 = 2;\r\n\r\nconst NOT_VERTEX$1 = 0;\r\nconst START_VERTEX$1 = 1;\r\nconst END_VERTEX$1 = 2;\r\n\r\nvar Constants = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    BOUNDARY: BOUNDARY$1,\r\n    CCW: CCW,\r\n    CONTAINS: CONTAINS,\r\n    CW: CW,\r\n    END_VERTEX: END_VERTEX$1,\r\n    INSIDE: INSIDE$2,\r\n    INTERLACE: INTERLACE,\r\n    NOT_VERTEX: NOT_VERTEX$1,\r\n    ORIENTATION: ORIENTATION,\r\n    OUTSIDE: OUTSIDE$1,\r\n    OVERLAP_OPPOSITE: OVERLAP_OPPOSITE$1,\r\n    OVERLAP_SAME: OVERLAP_SAME$1,\r\n    PIx2: PIx2,\r\n    START_VERTEX: START_VERTEX$1\r\n});\r\n\r\n/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\n/**\r\n * Floating point comparison tolerance.\r\n * Default value is 0.000001 (10e-6)\r\n * @type {number}\r\n */\r\nlet DP_TOL = 0.000001;\r\n\r\n/**\r\n * Set new floating point comparison tolerance\r\n * @param {number} tolerance\r\n */\r\nfunction setTolerance(tolerance) {DP_TOL = tolerance;}\r\n\r\n/**\r\n * Get floating point comparison tolerance\r\n * @returns {number}\r\n */\r\nfunction getTolerance() {return DP_TOL;}\r\n\r\nconst DECIMALS = 3;\r\n\r\n/**\r\n * Returns *true* if value comparable to zero\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nfunction EQ_0(x) {\r\n    return (x < DP_TOL && x > -DP_TOL);\r\n}\r\n\r\n/**\r\n * Returns *true* if two values are equal up to DP_TOL\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nfunction EQ(x, y) {\r\n    return (x - y < DP_TOL && x - y > -DP_TOL);\r\n}\r\n\r\n/**\r\n * Returns *true* if first argument greater than second argument up to DP_TOL\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nfunction GT(x, y) {\r\n    return (x - y > DP_TOL);\r\n}\r\n\r\n/**\r\n * Returns *true* if first argument greater than or equal to second argument up to DP_TOL\r\n * @param {number} x\r\n * @param {number} y\r\n * @returns {boolean}\r\n */\r\nfunction GE(x, y) {\r\n    return (x - y > -DP_TOL);\r\n}\r\n\r\n/**\r\n * Returns *true* if first argument less than second argument up to DP_TOL\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nfunction LT(x, y) {\r\n    return (x - y < -DP_TOL)\r\n}\r\n\r\n/**\r\n * Returns *true* if first argument less than or equal to second argument up to DP_TOL\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {boolean}\r\n */\r\nfunction LE(x, y) {\r\n    return (x - y < DP_TOL);\r\n}\r\n\r\nvar Utils$1 = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    DECIMALS: DECIMALS,\r\n    EQ: EQ,\r\n    EQ_0: EQ_0,\r\n    GE: GE,\r\n    GT: GT,\r\n    LE: LE,\r\n    LT: LT,\r\n    getTolerance: getTolerance,\r\n    setTolerance: setTolerance\r\n});\r\n\r\nlet Flatten = {\r\n    Utils: Utils$1,\r\n    Errors: undefined,\r\n    Matrix: undefined,\r\n    Planar_set: undefined,\r\n    Point: undefined,\r\n    Vector: undefined,\r\n    Line: undefined,\r\n    Circle: undefined,\r\n    Segment: undefined,\r\n    Arc: undefined,\r\n    Box: undefined,\r\n    Edge: undefined,\r\n    Face: undefined,\r\n    Ray: undefined,\r\n    Ray_shooting: undefined,\r\n    Multiline: undefined,\r\n    Polygon: undefined,\r\n    Distance: undefined,\r\n    Inversion: undefined\r\n};\r\n\r\nfor (let c in Constants) {Flatten[c] = Constants[c];}\r\n\r\nObject.defineProperty(Flatten, 'DP_TOL', {\r\n    get:function(){return getTolerance()}, \r\n    set:function(value){setTolerance(value);}\r\n});\r\n\r\n/**\r\n * Created by Alex Bol on 2/19/2017.\r\n */\r\n\r\n\r\n/**\r\n * Class of system errors\r\n */\r\nclass Errors {\r\n    /**\r\n     * Throw error ILLEGAL_PARAMETERS when cannot instantiate from given parameter\r\n     * @returns {ReferenceError}\r\n     */\r\n    static get ILLEGAL_PARAMETERS() {\r\n        return new ReferenceError('Illegal Parameters');\r\n    }\r\n\r\n    /**\r\n     * Throw error ZERO_DIVISION to catch situation of zero division\r\n     * @returns {Error}\r\n     */\r\n    static get ZERO_DIVISION() {\r\n        return new Error('Zero division');\r\n    }\r\n\r\n    /**\r\n     * Error to throw from BooleanOperations module in case when fixBoundaryConflicts not capable to fix it\r\n     * @returns {Error}\r\n     */\r\n    static get UNRESOLVED_BOUNDARY_CONFLICT() {\r\n        return new Error('Unresolved boundary conflict in boolean operation');\r\n    }\r\n\r\n    /**\r\n     * Error to throw from LinkedList:testInfiniteLoop static method\r\n     * in case when circular loop detected in linked list\r\n     * @returns {Error}\r\n     */\r\n    static get INFINITE_LOOP() {\r\n        return new Error('Infinite loop');\r\n    }\r\n\r\n    static get CANNOT_COMPLETE_BOOLEAN_OPERATION() {\r\n        return new Error('Cannot complete boolean operation')\r\n    }\r\n\r\n    static get CANNOT_INVOKE_ABSTRACT_METHOD() {\r\n        return new Error('Abstract method cannot be invoked');\r\n    }\r\n\r\n    static get OPERATION_IS_NOT_SUPPORTED() {\r\n        return new Error('Operation is not supported')\r\n    }\r\n\r\n    static get UNSUPPORTED_SHAPE_TYPE() {\r\n        return new Error('Unsupported shape type')\r\n    }\r\n}\r\n\r\nFlatten.Errors = Errors;\r\n\r\n/**\r\n * Class implements bidirectional non-circular linked list. <br/>\r\n * LinkedListElement - object of any type that has properties next and prev.\r\n */\r\nclass LinkedList {\r\n    constructor(first, last) {\r\n        this.first = first;\r\n        this.last = last || this.first;\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        let value = undefined;\r\n        return {\r\n            next: () => {\r\n                value = value ? value.next : this.first;\r\n                return {value: value, done: value === undefined};\r\n            }\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Return number of elements in the list\r\n     * @returns {number}\r\n     */\r\n    get size() {\r\n        let counter = 0;\r\n        for (let edge of this) {\r\n            counter++;\r\n        }\r\n        return counter;\r\n    }\r\n\r\n    /**\r\n     * Return array of elements from start to end,\r\n     * If start or end not defined, take first as start, last as end\r\n     * @returns {Array}\r\n     */\r\n    toArray(start=undefined, end=undefined) {\r\n        let elements = [];\r\n        let from = start || this.first;\r\n        let to = end || this.last;\r\n        let element = from;\r\n        if (element === undefined) return elements;\r\n        do {\r\n            elements.push(element);\r\n            element = element.next;\r\n        } while (element !== to.next);\r\n        return elements;\r\n    }\r\n\r\n\r\n    /**\r\n     * Append new element to the end of the list\r\n     * @param {LinkedListElement} element\r\n     * @returns {LinkedList}\r\n     */\r\n    append(element) {\r\n        if (this.isEmpty()) {\r\n            this.first = element;\r\n        } else {\r\n            element.prev = this.last;\r\n            this.last.next = element;\r\n        }\r\n\r\n        // update edge to be last\r\n        this.last = element;\r\n\r\n        // nullify non-circular links\r\n        this.last.next = undefined;\r\n        this.first.prev = undefined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert new element to the list after elementBefore\r\n     * @param {LinkedListElement} newElement\r\n     * @param {LinkedListElement} elementBefore\r\n     * @returns {LinkedList}\r\n     */\r\n    insert(newElement, elementBefore) {\r\n        if (this.isEmpty()) {\r\n            this.first = newElement;\r\n            this.last = newElement;\r\n        }\r\n        else if (elementBefore === null || elementBefore === undefined) {\r\n            newElement.next = this.first;\r\n            this.first.prev = newElement;\r\n            this.first = newElement;\r\n        }\r\n        else {\r\n            /* set links to new element */\r\n            let elementAfter = elementBefore.next;\r\n            elementBefore.next = newElement;\r\n            if (elementAfter) elementAfter.prev = newElement;\r\n\r\n            /* set links from new element */\r\n            newElement.prev = elementBefore;\r\n            newElement.next = elementAfter;\r\n\r\n            /* extend list if new element added after the last element */\r\n            if (this.last === elementBefore)\r\n                this.last = newElement;\r\n        }\r\n        // nullify non-circular links\r\n        this.last.next = undefined;\r\n        this.first.prev = undefined;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove element from the list\r\n     * @param {LinkedListElement} element\r\n     * @returns {LinkedList}\r\n     */\r\n    remove(element) {\r\n        // special case if last edge removed\r\n        if (element === this.first && element === this.last) {\r\n            this.first = undefined;\r\n            this.last = undefined;\r\n        } else {\r\n            // update linked list\r\n            if (element.prev) element.prev.next = element.next;\r\n            if (element.next) element.next.prev = element.prev;\r\n            // update first if need\r\n            if (element === this.first) {\r\n                this.first = element.next;\r\n            }\r\n            // update last if need\r\n            if (element === this.last) {\r\n                this.last = element.prev;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Return true if list is empty\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return this.first === undefined;\r\n    }\r\n\r\n    /**\r\n     * Throw an error if circular loop detected in the linked list\r\n     * @param {LinkedListElement} first element to start iteration\r\n     * @throws {Errors.INFINITE_LOOP}\r\n     */\r\n    static testInfiniteLoop(first) {\r\n        let edge = first;\r\n        let controlEdge = first;\r\n        do {\r\n            if (edge != first && edge === controlEdge) {\r\n                throw Errors.INFINITE_LOOP;  // new Error(\"Infinite loop\")\r\n            }\r\n            edge = edge.next;\r\n            controlEdge = controlEdge.next.next;\r\n        } while (edge != first)\r\n    }\r\n}\r\n\r\nconst defaultAttributes = {\r\n    stroke: \"black\"\r\n};\r\n\r\nclass SVGAttributes {\r\n    constructor(args = defaultAttributes) {\r\n        for(const property in args) {\r\n            this[property] = args[property];\r\n        }\r\n        this.stroke = args.stroke ?? defaultAttributes.stroke;\r\n    }\r\n\r\n    toAttributesString() {\r\n        return Object.keys(this)\r\n            .reduce( (acc, key) =>\r\n                    acc + (this[key] !== undefined ? this.toAttrString(key, this[key]) : \"\")\r\n            , ``)\r\n    }\r\n\r\n    toAttrString(key, value) {\r\n        const SVGKey = key === \"className\" ? \"class\" : this.convertCamelToKebabCase(key);\r\n        return value === null ? `${SVGKey} ` : `${SVGKey}=\"${value.toString()}\" `\r\n    }\r\n\r\n    convertCamelToKebabCase(str) {\r\n        return str\r\n            .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\r\n            .join('-')\r\n            .toLowerCase();\r\n    }\r\n}\r\n\r\nfunction convertToString(attrs) {\r\n    return new SVGAttributes(attrs).toAttributesString()\r\n}\r\n\r\n/**\r\n * Intersection\r\n *\r\n * */\r\n\r\n\r\nfunction intersectLine2Line(line1, line2) {\r\n    let ip = [];\r\n\r\n    let [A1, B1, C1] = line1.standard;\r\n    let [A2, B2, C2] = line2.standard;\r\n\r\n    /* Cramer's rule */\r\n    let det = A1 * B2 - B1 * A2;\r\n    let detX = C1 * B2 - B1 * C2;\r\n    let detY = A1 * C2 - C1 * A2;\r\n\r\n    if (!Flatten.Utils.EQ_0(det)) {\r\n        let x, y;\r\n\r\n        if (B1 === 0) {        // vertical line x  = C1/A1, where A1 == +1 or -1\r\n            x = C1/A1;\r\n            y = detY / det;\r\n        }\r\n        else if (B2 === 0) {   // vertical line x = C2/A2, where A2 = +1 or -1\r\n            x = C2/A2;\r\n            y = detY / det;\r\n        }\r\n        else if (A1 === 0) {   // horizontal line y = C1/B1, where B1 = +1 or -1\r\n            x = detX / det;\r\n            y = C1/B1;\r\n        }\r\n        else if (A2 === 0) {   // horizontal line y = C2/B2, where B2 = +1 or -1\r\n            x = detX / det;\r\n            y = C2/B2;\r\n        }\r\n        else {\r\n            x = detX / det;\r\n            y = detY / det;\r\n        }\r\n\r\n        ip.push(new Flatten.Point(x, y));\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectLine2Circle(line, circle) {\r\n    let ip = [];\r\n    let prj = circle.pc.projectionOn(line);            // projection of circle center on a line\r\n    let dist = circle.pc.distanceTo(prj)[0];           // distance from circle center to projection\r\n\r\n    if (Flatten.Utils.EQ(dist, circle.r)) {            // line tangent to circle - return single intersection point\r\n        ip.push(prj);\r\n    } else if (Flatten.Utils.LT(dist, circle.r)) {       // return two intersection points\r\n        let delta = Math.sqrt(circle.r * circle.r - dist * dist);\r\n        let v_trans, pt;\r\n\r\n        v_trans = line.norm.rotate90CCW().multiply(delta);\r\n        pt = prj.translate(v_trans);\r\n        ip.push(pt);\r\n\r\n        v_trans = line.norm.rotate90CW().multiply(delta);\r\n        pt = prj.translate(v_trans);\r\n        ip.push(pt);\r\n    }\r\n    return ip;\r\n}\r\n\r\nfunction intersectLine2Box(line, box) {\r\n    let ips = [];\r\n    for (let seg of box.toSegments()) {\r\n        let ips_tmp = intersectSegment2Line(seg, line);\r\n        for (let pt of ips_tmp) {\r\n            if (!ptInIntPoints(pt, ips)) {\r\n                ips.push(pt);\r\n            }\r\n        }\r\n    }\r\n    return ips;\r\n}\r\n\r\nfunction intersectLine2Arc(line, arc) {\r\n    let ip = [];\r\n\r\n    if (intersectLine2Box(line, arc.box).length === 0) {\r\n        return ip;\r\n    }\r\n\r\n    let circle = new Flatten.Circle(arc.pc, arc.r);\r\n    let ip_tmp = intersectLine2Circle(line, circle);\r\n    for (let pt of ip_tmp) {\r\n        if (pt.on(arc)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectSegment2Line(seg, line) {\r\n    let ip = [];\r\n\r\n    // Boundary cases\r\n    if (seg.ps.on(line)) {\r\n        ip.push(seg.ps);\r\n    }\r\n    // If both ends lay on line, return two intersection points\r\n    if (seg.pe.on(line) && !seg.isZeroLength()) {\r\n        ip.push(seg.pe);\r\n    }\r\n\r\n    if (ip.length > 0) {\r\n        return ip;          // done, intersection found\r\n    }\r\n\r\n    // If zero-length segment and nothing found, return no intersections\r\n    if (seg.isZeroLength()) {\r\n        return ip;\r\n    }\r\n\r\n    // Not a boundary case, check if both points are on the same side and\r\n    // hence there is no intersection\r\n    if (seg.ps.leftTo(line) && seg.pe.leftTo(line) ||\r\n        !seg.ps.leftTo(line) && !seg.pe.leftTo(line)) {\r\n        return ip;\r\n    }\r\n\r\n    // Calculate intersection between lines\r\n    let line1 = new Flatten.Line(seg.ps, seg.pe);\r\n    return intersectLine2Line(line1, line);\r\n}\r\n\r\nfunction intersectSegment2Segment(seg1, seg2) {\r\n    let ip = [];\r\n\r\n    // quick reject\r\n    if (seg1.box.not_intersect(seg2.box)) {\r\n        return ip;\r\n    }\r\n\r\n    // Special case of seg1 zero length\r\n    if (seg1.isZeroLength()) {\r\n        if (seg1.ps.on(seg2)) {\r\n            ip.push(seg1.ps);\r\n        }\r\n        return ip;\r\n    }\r\n\r\n    // Special case of seg2 zero length\r\n    if (seg2.isZeroLength()) {\r\n        if (seg2.ps.on(seg1)) {\r\n            ip.push(seg2.ps);\r\n        }\r\n        return ip;\r\n    }\r\n\r\n    // Neither seg1 nor seg2 is zero length\r\n    let line1 = new Flatten.Line(seg1.ps, seg1.pe);\r\n    let line2 = new Flatten.Line(seg2.ps, seg2.pe);\r\n\r\n    // Check overlapping between segments in case of incidence\r\n    // If segments touching, add one point. If overlapping, add two points\r\n    if (line1.incidentTo(line2)) {\r\n        if (seg1.ps.on(seg2)) {\r\n            ip.push(seg1.ps);\r\n        }\r\n        if (seg1.pe.on(seg2)) {\r\n            ip.push(seg1.pe);\r\n        }\r\n        if (seg2.ps.on(seg1) && !seg2.ps.equalTo(seg1.ps) && !seg2.ps.equalTo(seg1.pe)) {\r\n            ip.push(seg2.ps);\r\n        }\r\n        if (seg2.pe.on(seg1) && !seg2.pe.equalTo(seg1.ps) && !seg2.pe.equalTo(seg1.pe)) {\r\n            ip.push(seg2.pe);\r\n        }\r\n    } else {                /* not incident - parallel or intersect */\r\n        // Calculate intersection between lines\r\n        let new_ip = intersectLine2Line(line1, line2);\r\n        if (new_ip.length > 0) {\r\n            if (isPointInSegmentBox(new_ip[0], seg1) && isPointInSegmentBox(new_ip[0], seg2)) {\r\n                ip.push(new_ip[0]);\r\n            }\r\n        }\r\n    }\r\n    return ip;\r\n}\r\n\r\nfunction isPointInSegmentBox(point, segment) {\r\n    const box = segment.box;\r\n    return Flatten.Utils.LE(point.x, box.xmax) && Flatten.Utils.GE(point.x, box.xmin) &&\r\n        Flatten.Utils.LE(point.y, box.ymax) && Flatten.Utils.GE(point.y, box.ymin)\r\n}\r\n\r\nfunction intersectSegment2Circle(segment, circle) {\r\n    let ips = [];\r\n\r\n    if (segment.box.not_intersect(circle.box)) {\r\n        return ips;\r\n    }\r\n\r\n    // Special case of zero length segment\r\n    if (segment.isZeroLength()) {\r\n        let [dist, _] = segment.ps.distanceTo(circle.pc);\r\n        if (Flatten.Utils.EQ(dist, circle.r)) {\r\n            ips.push(segment.ps);\r\n        }\r\n        return ips;\r\n    }\r\n\r\n    // Non zero-length segment\r\n    let line = new Flatten.Line(segment.ps, segment.pe);\r\n\r\n    let ips_tmp = intersectLine2Circle(line, circle);\r\n\r\n    for (let ip of ips_tmp) {\r\n        if (ip.on(segment)) {\r\n            ips.push(ip);\r\n        }\r\n    }\r\n\r\n    return ips;\r\n}\r\n\r\nfunction intersectSegment2Arc(segment, arc) {\r\n    let ip = [];\r\n\r\n    if (segment.box.not_intersect(arc.box)) {\r\n        return ip;\r\n    }\r\n\r\n    // Special case of zero-length segment\r\n    if (segment.isZeroLength()) {\r\n        if (segment.ps.on(arc)) {\r\n            ip.push(segment.ps);\r\n        }\r\n        return ip;\r\n    }\r\n\r\n    // Non-zero length segment\r\n    let line = new Flatten.Line(segment.ps, segment.pe);\r\n    let circle = new Flatten.Circle(arc.pc, arc.r);\r\n\r\n    let ip_tmp = intersectLine2Circle(line, circle);\r\n\r\n    for (let pt of ip_tmp) {\r\n        if (pt.on(segment) && pt.on(arc)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n    return ip;\r\n\r\n}\r\n\r\nfunction intersectSegment2Box(segment, box) {\r\n    let ips = [];\r\n    for (let seg of box.toSegments()) {\r\n        let ips_tmp = intersectSegment2Segment(seg, segment);\r\n        for (let ip of ips_tmp) {\r\n            ips.push(ip);\r\n        }\r\n    }\r\n    return ips;\r\n}\r\n\r\nfunction intersectCircle2Circle(circle1, circle2) {\r\n    let ip = [];\r\n\r\n    if (circle1.box.not_intersect(circle2.box)) {\r\n        return ip;\r\n    }\r\n\r\n    let vec = new Flatten.Vector(circle1.pc, circle2.pc);\r\n\r\n    let r1 = circle1.r;\r\n    let r2 = circle2.r;\r\n\r\n    // Degenerated circle\r\n    if (Flatten.Utils.EQ_0(r1) || Flatten.Utils.EQ_0(r2))\r\n        return ip;\r\n\r\n    // In case of equal circles return one leftmost point\r\n    if (Flatten.Utils.EQ_0(vec.x) && Flatten.Utils.EQ_0(vec.y) && Flatten.Utils.EQ(r1, r2)) {\r\n        ip.push(circle1.pc.translate(-r1, 0));\r\n        return ip;\r\n    }\r\n\r\n    let dist = circle1.pc.distanceTo(circle2.pc)[0];\r\n\r\n    if (Flatten.Utils.GT(dist, r1 + r2))               // circles too far, no intersections\r\n        return ip;\r\n\r\n    if (Flatten.Utils.LT(dist, Math.abs(r1 - r2)))     // one circle is contained within another, no intersections\r\n        return ip;\r\n\r\n    // Normalize vector.\r\n    vec.x /= dist;\r\n    vec.y /= dist;\r\n\r\n    let pt;\r\n\r\n    // Case of touching from outside or from inside - single intersection point\r\n    // TODO: check this specifically not sure if correct\r\n    if (Flatten.Utils.EQ(dist, r1 + r2) || Flatten.Utils.EQ(dist, Math.abs(r1 - r2))) {\r\n        pt = circle1.pc.translate(r1 * vec.x, r1 * vec.y);\r\n        ip.push(pt);\r\n        return ip;\r\n    }\r\n\r\n    // Case of two intersection points\r\n\r\n    // Distance from first center to center of common chord:\r\n    //   a = (r1^2 - r2^2 + d^2) / 2d\r\n    // Separate for better accuracy\r\n    let a = (r1 * r1) / (2 * dist) - (r2 * r2) / (2 * dist) + dist / 2;\r\n\r\n    let mid_pt = circle1.pc.translate(a * vec.x, a * vec.y);\r\n    let h = Math.sqrt(r1 * r1 - a * a);\r\n    // let norm;\r\n\r\n    // norm = vec.rotate90CCW().multiply(h);\r\n    pt = mid_pt.translate(vec.rotate90CCW().multiply(h));\r\n    ip.push(pt);\r\n\r\n    // norm = vec.rotate90CW();\r\n    pt = mid_pt.translate(vec.rotate90CW().multiply(h));\r\n    ip.push(pt);\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectCircle2Box(circle, box) {\r\n    let ips = [];\r\n    for (let seg of box.toSegments()) {\r\n        let ips_tmp = intersectSegment2Circle(seg, circle);\r\n        for (let ip of ips_tmp) {\r\n            ips.push(ip);\r\n        }\r\n    }\r\n    return ips;\r\n}\r\n\r\nfunction intersectArc2Arc(arc1, arc2) {\r\n    let ip = [];\r\n\r\n    if (arc1.box.not_intersect(arc2.box)) {\r\n        return ip;\r\n    }\r\n\r\n    // Special case: overlapping arcs\r\n    // May return up to 4 intersection points\r\n    if (arc1.pc.equalTo(arc2.pc) && Flatten.Utils.EQ(arc1.r, arc2.r)) {\r\n        let pt;\r\n\r\n        pt = arc1.start;\r\n        if (pt.on(arc2))\r\n            ip.push(pt);\r\n\r\n        pt = arc1.end;\r\n        if (pt.on(arc2))\r\n            ip.push(pt);\r\n\r\n        pt = arc2.start;\r\n        if (pt.on(arc1)) ip.push(pt);\r\n\r\n        pt = arc2.end;\r\n        if (pt.on(arc1)) ip.push(pt);\r\n\r\n        return ip;\r\n    }\r\n\r\n    // Common case\r\n    let circle1 = new Flatten.Circle(arc1.pc, arc1.r);\r\n    let circle2 = new Flatten.Circle(arc2.pc, arc2.r);\r\n    let ip_tmp = circle1.intersect(circle2);\r\n    for (let pt of ip_tmp) {\r\n        if (pt.on(arc1) && pt.on(arc2)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n    return ip;\r\n}\r\n\r\nfunction intersectArc2Circle(arc, circle) {\r\n    let ip = [];\r\n\r\n    if (arc.box.not_intersect(circle.box)) {\r\n        return ip;\r\n    }\r\n\r\n    // Case when arc center incident to circle center\r\n    // Return arc's end points as 2 intersection points\r\n    if (circle.pc.equalTo(arc.pc) && Flatten.Utils.EQ(circle.r, arc.r)) {\r\n        ip.push(arc.start);\r\n        ip.push(arc.end);\r\n        return ip;\r\n    }\r\n\r\n    // Common case\r\n    let circle1 = circle;\r\n    let circle2 = new Flatten.Circle(arc.pc, arc.r);\r\n    let ip_tmp = intersectCircle2Circle(circle1, circle2);\r\n    for (let pt of ip_tmp) {\r\n        if (pt.on(arc)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n    return ip;\r\n}\r\n\r\nfunction intersectArc2Box(arc, box) {\r\n    let ips = [];\r\n    for (let seg of box.toSegments()) {\r\n        let ips_tmp = intersectSegment2Arc(seg, arc);\r\n        for (let ip of ips_tmp) {\r\n            ips.push(ip);\r\n        }\r\n    }\r\n    return ips;\r\n}\r\n\r\nfunction intersectEdge2Segment(edge, segment) {\r\n    return edge.isSegment ? intersectSegment2Segment(edge.shape, segment) : intersectSegment2Arc(segment, edge.shape);\r\n}\r\n\r\nfunction intersectEdge2Arc(edge, arc) {\r\n    return edge.isSegment ? intersectSegment2Arc(edge.shape, arc) : intersectArc2Arc(edge.shape, arc);\r\n}\r\n\r\nfunction intersectEdge2Line(edge, line) {\r\n    return edge.isSegment ? intersectSegment2Line(edge.shape, line) : intersectLine2Arc(line, edge.shape);\r\n}\r\n\r\nfunction intersectEdge2Ray(edge, ray) {\r\n    return edge.isSegment ? intersectRay2Segment(ray, edge.shape) : intersectRay2Arc(ray, edge.shape);\r\n}\r\n\r\nfunction intersectEdge2Circle(edge, circle) {\r\n    return edge.isSegment ? intersectSegment2Circle(edge.shape, circle) : intersectArc2Circle(edge.shape, circle);\r\n}\r\n\r\nfunction intersectSegment2Polygon(segment, polygon) {\r\n    let ip = [];\r\n\r\n    for (let edge of polygon.edges) {\r\n        for (let pt of intersectEdge2Segment(edge, segment)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectArc2Polygon(arc, polygon) {\r\n    let ip = [];\r\n\r\n    for (let edge of polygon.edges) {\r\n        for (let pt of intersectEdge2Arc(edge, arc)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectLine2Polygon(line, polygon) {\r\n    let ip = [];\r\n\r\n    if (polygon.isEmpty()) {\r\n        return ip;\r\n    }\r\n\r\n    for (let edge of polygon.edges) {\r\n        for (let pt of intersectEdge2Line(edge, line)) {\r\n            if (!ptInIntPoints(pt, ip)) {\r\n                ip.push(pt);\r\n            }\r\n        }\r\n    }\r\n\r\n    return line.sortPoints(ip);\r\n}\r\n\r\nfunction intersectCircle2Polygon(circle, polygon) {\r\n    let ip = [];\r\n\r\n    if (polygon.isEmpty()) {\r\n        return ip;\r\n    }\r\n\r\n    for (let edge of polygon.edges) {\r\n        for (let pt of intersectEdge2Circle(edge, circle)) {\r\n            ip.push(pt);\r\n        }\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectEdge2Edge(edge1, edge2) {\r\n    if (edge1.isSegment) {\r\n        return intersectEdge2Segment(edge2, edge1.shape)\r\n    }\r\n    else if (edge1.isArc) {\r\n        return intersectEdge2Arc(edge2, edge1.shape)\r\n    }\r\n    else if (edge1.isLine) {\r\n        return intersectEdge2Line(edge2, edge1.shape)\r\n    }\r\n    else if (edge1.isRay) {\r\n        return intersectEdge2Ray(edge2, edge1.shape)\r\n    }\r\n    return []\r\n}\r\n\r\nfunction intersectEdge2Polygon(edge, polygon) {\r\n    let ip = [];\r\n\r\n    if (polygon.isEmpty() || edge.shape.box.not_intersect(polygon.box)) {\r\n        return ip;\r\n    }\r\n\r\n    let resp_edges = polygon.edges.search(edge.shape.box);\r\n\r\n    for (let resp_edge of resp_edges) {\r\n        ip = [...ip, ...intersectEdge2Edge(edge, resp_edge)];\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectMultiline2Polygon(multiline, polygon) {\r\n    let ip = [];\r\n\r\n    if (polygon.isEmpty() || multiline.size === 0) {\r\n        return ip;\r\n    }\r\n\r\n    for (let edge of multiline) {\r\n        ip = [...ip, ...intersectEdge2Polygon(edge, polygon)];\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectPolygon2Polygon(polygon1, polygon2) {\r\n    let ip = [];\r\n\r\n    if (polygon1.isEmpty() || polygon2.isEmpty()) {\r\n        return ip;\r\n    }\r\n\r\n    if (polygon1.box.not_intersect(polygon2.box)) {\r\n        return ip;\r\n    }\r\n\r\n    for (let edge1 of polygon1.edges) {\r\n        ip = [...ip, ...intersectEdge2Polygon(edge1, polygon2)];\r\n    }\r\n\r\n    return ip;\r\n}\r\n\r\nfunction intersectShape2Polygon(shape, polygon) {\r\n    if (shape instanceof Flatten.Line) {\r\n        return intersectLine2Polygon(shape, polygon);\r\n    }\r\n    else if (shape instanceof Flatten.Segment) {\r\n        return intersectSegment2Polygon(shape, polygon);\r\n    }\r\n    else if (shape instanceof Flatten.Arc) {\r\n        return intersectArc2Polygon(shape, polygon);\r\n    }\r\n    else {\r\n        return [];\r\n    }\r\n}\r\n\r\nfunction ptInIntPoints(new_pt, ip) {\r\n    return ip.some( pt => pt.equalTo(new_pt) )\r\n}\r\n\r\nfunction createLineFromRay(ray) {\r\n    return new Flatten.Line(ray.start, ray.norm)\r\n}\r\nfunction intersectRay2Segment(ray, segment) {\r\n    return intersectSegment2Line(segment, createLineFromRay(ray))\r\n        .filter(pt => ray.contains(pt));\r\n}\r\n\r\nfunction intersectRay2Arc(ray, arc) {\r\n    return intersectLine2Arc(createLineFromRay(ray), arc)\r\n        .filter(pt => ray.contains(pt))\r\n}\r\n\r\nfunction intersectRay2Circle(ray, circle) {\r\n    return intersectLine2Circle(createLineFromRay(ray), circle)\r\n        .filter(pt => ray.contains(pt))\r\n}\r\n\r\nfunction intersectRay2Box(ray, box) {\r\n    return intersectLine2Box(createLineFromRay(ray), box)\r\n        .filter(pt => ray.contains(pt))\r\n}\r\n\r\nfunction intersectRay2Line(ray, line) {\r\n    return intersectLine2Line(createLineFromRay(ray), line)\r\n        .filter(pt => ray.contains(pt))\r\n}\r\n\r\nfunction intersectRay2Ray(ray1, ray2) {\r\n    return intersectLine2Line(createLineFromRay(ray1), createLineFromRay(ray2))\r\n        .filter(pt => ray1.contains(pt))\r\n        .filter(pt => ray2.contains(pt))\r\n}\r\n\r\nfunction intersectRay2Polygon(ray, polygon) {\r\n    return intersectLine2Polygon(createLineFromRay(ray), polygon)\r\n        .filter(pt => ray.contains(pt))\r\n}\r\n\r\nfunction intersectShape2Shape(shape1, shape2) {\r\n    if (shape1.intersect && shape1.intersect instanceof Function) {\r\n        return shape1.intersect(shape2)\r\n    }\r\n    throw Errors.UNSUPPORTED_SHAPE_TYPE\r\n}\r\n\r\nfunction intersectShape2Multiline(shape, multiline) {\r\n    let ip = [];\r\n    for (let edge of multiline) {\r\n        ip = [...ip, ...intersectShape2Shape(shape, edge.shape)];\r\n    }\r\n    return ip;\r\n}\r\n\r\nfunction intersectMultiline2Multiline(multiline1, multiline2) {\r\n    let ip = [];\r\n    for (let edge1 of multiline1) {\r\n        for (let edge2 of multiline2) {\r\n            ip = [...ip, ...intersectShape2Shape(edge1, edge2)];\r\n        }\r\n    }\r\n    return ip;\r\n}\r\n\r\n/**\r\n * Class Multiline represent connected path of [edges]{@link Flatten.Edge}, where each edge may be\r\n * [segment]{@link Flatten.Segment}, [arc]{@link Flatten.Arc}, [line]{@link Flatten.Line} or [ray]{@link Flatten.Ray}\r\n */\r\nlet Multiline$1 = class Multiline extends LinkedList {\r\n    constructor(...args) {\r\n        super();\r\n        this.isInfinite = false;\r\n\r\n        if (args.length === 1 && args[0] instanceof Array && args[0].length > 0) {\r\n            // there may be only one line and\r\n            // only first and last may be rays\r\n            let validShapes = false;\r\n            const shapes = args[0];\r\n            const L = shapes.length;\r\n            const anyShape = (s) =>\r\n                s instanceof Flatten.Segment || s instanceof Flatten.Arc ||\r\n                s instanceof Flatten.Ray || s instanceof Flatten.Line;\r\n            const anyShapeExceptLine = (s) =>\r\n                s instanceof Flatten.Segment || s instanceof Flatten.Arc || s instanceof Flatten.Ray;\r\n            const shapeSegmentOrArc = (s) => s instanceof Flatten.Segment || s instanceof Flatten.Arc;\r\n            validShapes =\r\n                L === 1 && anyShape(shapes[0]) ||\r\n                L > 1 && anyShapeExceptLine(shapes[0]) && anyShapeExceptLine(shapes[L - 1]) &&\r\n                shapes.slice(1, L - 1).every(shapeSegmentOrArc);\r\n\r\n            if (validShapes) {\r\n                this.isInfinite = shapes.some(shape =>\r\n                    shape instanceof Flatten.Ray ||\r\n                    shape instanceof Flatten.Line\r\n                );\r\n\r\n                for (let shape of shapes) {\r\n                    let edge = new Flatten.Edge(shape);\r\n                    this.append(edge);\r\n                }\r\n\r\n                this.setArcLength();\r\n            } else {\r\n                throw Flatten.Errors.ILLEGAL_PARAMETERS;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * (Getter) Return array of edges\r\n     * @returns {Edge[]}\r\n     */\r\n    get edges() {\r\n        return [...this];\r\n    }\r\n\r\n    /**\r\n     * (Getter) Return bounding box of the multiline\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return this.edges.reduce( (acc,edge) => acc.merge(edge.box), new Flatten.Box() );\r\n    }\r\n\r\n    /**\r\n     * (Getter) Returns array of vertices\r\n     * @returns {Point[]}\r\n     */\r\n    get vertices() {\r\n        let v = this.edges.map(edge => edge.start);\r\n        v.push(this.last.end);\r\n        return v;\r\n    }\r\n\r\n    /**\r\n     * (Getter) Returns length of the multiline, return POSITIVE_INFINITY if multiline is infinite\r\n     * @returns {number}\r\n     */\r\n    get length() {\r\n        if (this.isEmpty()) return 0;\r\n        if (this.isInfinite) return Number.POSITIVE_INFINITY;\r\n\r\n        let len = 0;\r\n        for (let edge of this) {\r\n            len += edge.length;\r\n        }\r\n        return len\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of Multiline\r\n     * @returns {Multiline}\r\n     */\r\n    clone() {\r\n        return new Multiline(this.toShapes());\r\n    }\r\n\r\n    /**\r\n     * Set arc_length property for each of the edges in the multiline.\r\n     * Arc_length of the edge is the arc length from the multiline start vertex to the edge start vertex\r\n     */\r\n    setArcLength() {\r\n        for (let edge of this) {\r\n            this.setOneEdgeArcLength(edge);\r\n        }\r\n    }\r\n\r\n    setOneEdgeArcLength(edge) {\r\n        if (edge === this.first) {\r\n            edge.arc_length = 0.0;\r\n        } else {\r\n            edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return point on multiline at given length from the start of the multiline\r\n     * @param length\r\n     * @returns {Point | null}\r\n     */\r\n    pointAtLength(length) {\r\n        if (length > this.length || length < 0) return null;\r\n        if (this.isInfinite) return null\r\n\r\n        let point = null;\r\n        for (let edge of this) {\r\n            if (length >= edge.arc_length &&\r\n                (edge === this.last || length < edge.next.arc_length)) {\r\n                point = edge.pointAtLength(length - edge.arc_length);\r\n                break;\r\n            }\r\n        }\r\n        return point;\r\n    }\r\n\r\n    /**\r\n     * Split edge and add new vertex, return new edge inserted\r\n     * @param {Point} pt - point on edge that will be added as new vertex\r\n     * @param {Edge} edge - edge to split\r\n     * @returns {Edge}\r\n     */\r\n    addVertex(pt, edge) {\r\n        let shapes = edge.shape.split(pt);\r\n        // if (shapes.length < 2) return;\r\n\r\n        if (shapes[0] === null)   // point incident to edge start vertex, return previous edge\r\n           return edge.prev;\r\n\r\n        if (shapes[1] === null)   // point incident to edge end vertex, return edge itself\r\n           return edge;\r\n\r\n        let newEdge = new Flatten.Edge(shapes[0]);\r\n        let edgeBefore = edge.prev;\r\n\r\n        /* Insert first split edge into linked list after edgeBefore */\r\n        this.insert(newEdge, edgeBefore);     // edge.face ?\r\n\r\n        // Update edge shape with second split edge keeping links\r\n        edge.shape = shapes[1];\r\n\r\n        return newEdge;\r\n    }\r\n\r\n    getChain(edgeFrom, edgeTo) {\r\n        let edges = [];\r\n        for (let edge = edgeFrom; edge !== edgeTo.next; edge = edge.next) {\r\n            edges.push(edge);\r\n        }\r\n        return edges\r\n    }\r\n\r\n    /**\r\n     * Split edges of multiline with intersection points and return mutated multiline\r\n     * @param {Point[]} ip - array of points to be added as new vertices\r\n     * @returns {Multiline}\r\n     */\r\n    split(ip) {\r\n        for (let pt of ip) {\r\n            let edge = this.findEdgeByPoint(pt);\r\n            this.addVertex(pt, edge);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns edge which contains given point\r\n     * @param {Point} pt\r\n     * @returns {Edge}\r\n     */\r\n    findEdgeByPoint(pt) {\r\n        let edgeFound;\r\n        for (let edge of this) {\r\n            if (edge.shape.contains(pt)) {\r\n                edgeFound = edge;\r\n                break;\r\n            }\r\n        }\r\n        return edgeFound;\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from any shape to multiline\r\n     * @param shape\r\n     * @returns {[number,Flatten.Segment]}\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Point) {\r\n            const [dist, shortest_segment] = Flatten.Distance.shape2multiline(shape, this);\r\n            return [dist, shortest_segment.reverse()];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            const [dist, shortest_segment] = Flatten.Distance.shape2multiline(shape, this);\r\n            return [dist, shortest_segment.reverse()];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            const [dist, shortest_segment] = Flatten.Distance.shape2multiline(shape, this);\r\n            return [dist, shortest_segment.reverse()];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            const [dist, shortest_segment] = Flatten.Distance.shape2multiline(shape, this);\r\n            return [dist, shortest_segment.reverse()];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            const [dist, shortest_segment] = Flatten.Distance.shape2multiline(shape, this);\r\n            return [dist, shortest_segment.reverse()];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Multiline) {\r\n            return Flatten.Distance.multiline2multiline(this, shape);\r\n        }\r\n\r\n        throw Flatten.Errors.UNSUPPORTED_SHAPE_TYPE;\r\n    }\r\n\r\n    /**\r\n     * Calculate intersection of multiline with other shape\r\n     * @param {Shape} shape\r\n     * @returns {Point[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Multiline) {\r\n            return intersectMultiline2Multiline(this, shape);\r\n        }\r\n        else {\r\n            return intersectShape2Multiline(shape, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return true if multiline contains the shape: no point of shape lies outside\r\n     * @param shape\r\n     * @returns {boolean}\r\n     */\r\n    contains(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.edges.some(edge => edge.shape.contains(shape));\r\n        }\r\n\r\n        throw Flatten.Errors.UNSUPPORTED_SHAPE_TYPE;\r\n    }\r\n\r\n    /**\r\n     * Returns new multiline translated by vector vec\r\n     * @param {Vector} vec\r\n     * @returns {Multiline}\r\n     */\r\n    translate(vec) {\r\n        return new Multiline(this.edges.map( edge => edge.shape.translate(vec)));\r\n    }\r\n\r\n    /**\r\n     * Return new multiline rotated by given angle around given point\r\n     * If point omitted, rotate around origin (0,0)\r\n     * Positive value of angle defines rotation counterclockwise, negative - clockwise\r\n     * @param {number} angle - rotation angle in radians\r\n     * @param {Point} center - rotation center, default is (0,0)\r\n     * @returns {Multiline} - new rotated polygon\r\n     */\r\n    rotate(angle = 0, center = new Flatten.Point()) {\r\n        return new Multiline(this.edges.map( edge => edge.shape.rotate(angle, center) ));\r\n    }\r\n\r\n    /**\r\n     * Return new multiline transformed using affine transformation matrix\r\n     * Method does not support unbounded shapes\r\n     * @param {Matrix} matrix - affine transformation matrix\r\n     * @returns {Multiline} - new multiline\r\n     */\r\n    transform(matrix = new Flatten.Matrix()) {\r\n        return new Multiline(this.edges.map( edge => edge.shape.transform(matrix)));\r\n    }\r\n\r\n    /**\r\n     * Transform multiline into array of shapes\r\n     * @returns {Shape[]}\r\n     */\r\n    toShapes() {\r\n        return this.edges.map(edge => edge.shape.clone())\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return this.edges.map(edge => edge.toJSON());\r\n    }\r\n\r\n    /**\r\n     * Return string to be inserted into 'points' attribute of <polyline> element\r\n     * @returns {string}\r\n     */\r\n    svgPoints() {\r\n        return this.vertices.map(p => `${p.x},${p.y}`).join(' ')\r\n    }\r\n\r\n    /**\r\n     * Return string to be assigned to 'd' attribute of <path> element\r\n     * @returns {*}\r\n     */\r\n    dpath() {\r\n        let dPathStr = `M${this.first.start.x},${this.first.start.y}`;\r\n        for (let edge of this) {\r\n            dPathStr += edge.svg();\r\n        }\r\n        return dPathStr\r\n    }\r\n\r\n    /**\r\n     * Return string to draw multiline in svg\r\n     * @param attrs  - an object with attributes for svg path element\r\n     * TODO: support semi-infinite Ray and infinite Line\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        let svgStr = `\\n<path ${convertToString({fill: \"none\", ...attrs})} d=\"`;\r\n        svgStr += `\\nM${this.first.start.x},${this.first.start.y}`;\r\n        for (let edge of this) {\r\n            svgStr += edge.svg();\r\n        }\r\n        svgStr += `\" >\\n</path>`;\r\n        return svgStr;\r\n    }\r\n};\r\n\r\nFlatten.Multiline = Multiline$1;\r\n\r\n/**\r\n * Shortcut function to create multiline\r\n * @param args\r\n */\r\nconst multiline = (...args) => new Flatten.Multiline(...args);\r\nFlatten.multiline = multiline;\r\n\r\n/*\r\n    Smart intersections describe intersection points that refers to the edges they intersect\r\n    This function are supposed for internal usage by morphing and relation methods between\r\n */\r\n\r\nfunction addToIntPoints(edge, pt, int_points)\r\n{\r\n    let id = int_points.length;\r\n    let shapes = edge.shape.split(pt);\r\n\r\n    // if (shapes.length < 2) return;\r\n    if (shapes.length === 0) return;     // Point does not belong to edge ?\r\n\r\n    let len = 0;\r\n    if (shapes[0] === null) {   // point incident to edge start vertex\r\n        len = 0;\r\n    }\r\n    else if (shapes[1] === null) {   // point incident to edge end vertex\r\n        len = edge.shape.length;\r\n    }\r\n    else {                             // Edge was split into to edges\r\n        len = shapes[0].length;\r\n    }\r\n\r\n    let is_vertex = NOT_VERTEX$1;\r\n    if (EQ(len, 0)) {\r\n        is_vertex |= START_VERTEX$1;\r\n    }\r\n    if (EQ(len, edge.shape.length)) {\r\n        is_vertex |= END_VERTEX$1;\r\n    }\r\n    // Fix intersection point which is end point of the last edge\r\n    let arc_length;\r\n    if (len === Infinity) {\r\n        arc_length = shapes[0].coord(pt);\r\n    }\r\n    else {\r\n        arc_length = (is_vertex & END_VERTEX$1) && edge.next && edge.next.arc_length === 0 ?\r\n            0 :\r\n            edge.arc_length + len;\r\n    }\r\n\r\n    int_points.push({\r\n        id: id,\r\n        pt: pt,\r\n        arc_length: arc_length,\r\n        edge_before: edge,\r\n        edge_after: undefined,\r\n        face: edge.face,\r\n        is_vertex: is_vertex\r\n    });\r\n}\r\n\r\nfunction sortIntersections(intersections)\r\n{\r\n    // augment intersections with new sorted arrays\r\n    intersections.int_points1_sorted = getSortedArray(intersections.int_points1);\r\n    intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\r\n}\r\n\r\nfunction getSortedArray(int_points)\r\n{\r\n    let faceMap = new Map;\r\n    let id = 0;\r\n    // Create integer id's for faces\r\n    for (let ip of int_points) {\r\n        if (!faceMap.has(ip.face)) {\r\n            faceMap.set(ip.face, id);\r\n            id++;\r\n        }\r\n    }\r\n    // Augment intersection points with face id's\r\n    for (let ip of int_points) {\r\n        ip.faceId = faceMap.get(ip.face);\r\n    }\r\n    // Clone and sort\r\n    let int_points_sorted = int_points.slice().sort(compareFn);\r\n    return int_points_sorted;\r\n}\r\n\r\nfunction compareFn(ip1, ip2)\r\n{\r\n    // compare face id's\r\n    if (ip1.faceId < ip2.faceId) {\r\n        return -1;\r\n    }\r\n    if (ip1.faceId > ip2.faceId) {\r\n        return 1;\r\n    }\r\n    // same face - compare arc_length\r\n    if (ip1.arc_length < ip2.arc_length) {\r\n        return -1;\r\n    }\r\n    if (ip1.arc_length > ip2.arc_length) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction filterDuplicatedIntersections(intersections)\r\n{\r\n    if (intersections.int_points1.length < 2) return;\r\n\r\n    let do_squeeze = false;\r\n\r\n    let int_point_ref1;\r\n    let int_point_ref2;\r\n    let int_point_cur1;\r\n    let int_point_cur2;\r\n    for (let i = 0; i < intersections.int_points1_sorted.length; i++) {\r\n\r\n        if (intersections.int_points1_sorted[i].id === -1)\r\n            continue;\r\n\r\n        int_point_ref1 = intersections.int_points1_sorted[i];\r\n        int_point_ref2 = intersections.int_points2[int_point_ref1.id];\r\n\r\n        for (let j=i+1; j < intersections.int_points1_sorted.length; j++) {\r\n            int_point_cur1 = intersections.int_points1_sorted[j];\r\n            if (!EQ(int_point_cur1.arc_length, int_point_ref1.arc_length)) {\r\n                break;\r\n            }\r\n            if (int_point_cur1.id === -1)\r\n                continue;\r\n            int_point_cur2 = intersections.int_points2[int_point_cur1.id];\r\n            if (int_point_cur2.id === -1)\r\n                continue;\r\n            if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n                int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n                int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n                int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n                int_point_cur1.id = -1;\r\n                /* to be deleted */\r\n                int_point_cur2.id = -1;\r\n                /* to be deleted */\r\n                do_squeeze = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    int_point_ref2 = intersections.int_points2_sorted[0];\r\n    int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n    for (let i = 1; i < intersections.int_points2_sorted.length; i++) {\r\n        let int_point_cur2 = intersections.int_points2_sorted[i];\r\n\r\n        if (int_point_cur2.id === -1) continue;\r\n        /* already deleted */\r\n\r\n        if (int_point_ref2.id === -1 || /* can't be reference if already deleted */\r\n            !(EQ(int_point_cur2.arc_length, int_point_ref2.arc_length))) {\r\n            int_point_ref2 = int_point_cur2;\r\n            int_point_ref1 = intersections.int_points1[int_point_ref2.id];\r\n            continue;\r\n        }\r\n\r\n        let int_point_cur1 = intersections.int_points1[int_point_cur2.id];\r\n        if (int_point_cur1.edge_before === int_point_ref1.edge_before &&\r\n            int_point_cur1.edge_after === int_point_ref1.edge_after &&\r\n            int_point_cur2.edge_before === int_point_ref2.edge_before &&\r\n            int_point_cur2.edge_after === int_point_ref2.edge_after) {\r\n            int_point_cur1.id = -1;\r\n            /* to be deleted */\r\n            int_point_cur2.id = -1;\r\n            /* to be deleted */\r\n            do_squeeze = true;\r\n        }\r\n    }\r\n\r\n    if (do_squeeze) {\r\n        intersections.int_points1 = intersections.int_points1.filter((int_point) => int_point.id >= 0);\r\n        intersections.int_points2 = intersections.int_points2.filter((int_point) => int_point.id >= 0);\r\n\r\n        // update id's\r\n        intersections.int_points1.forEach((int_point, index) => int_point.id = index);\r\n        intersections.int_points2.forEach((int_point, index) => int_point.id = index);\r\n    }\r\n}\r\n\r\nfunction initializeInclusionFlags(int_points)\r\n{\r\n    for (let int_point of int_points) {\r\n        if (int_point.edge_before) {\r\n            int_point.edge_before.bvStart = undefined;\r\n            int_point.edge_before.bvEnd = undefined;\r\n            int_point.edge_before.bv = undefined;\r\n            int_point.edge_before.overlap = undefined;\r\n        }\r\n\r\n        if (int_point.edge_after) {\r\n            int_point.edge_after.bvStart = undefined;\r\n            int_point.edge_after.bvEnd = undefined;\r\n            int_point.edge_after.bv = undefined;\r\n            int_point.edge_after.overlap = undefined;\r\n        }\r\n    }\r\n\r\n    for (let int_point of int_points) {\r\n        if (int_point.edge_before) int_point.edge_before.bvEnd = BOUNDARY$1;\r\n        if (int_point.edge_after) int_point.edge_after.bvStart = BOUNDARY$1;\r\n    }\r\n}\r\n\r\nfunction calculateInclusionFlags(int_points, polygon)\r\n{\r\n    for (let int_point of int_points) {\r\n        if (int_point.edge_before) int_point.edge_before.setInclusion(polygon);\r\n        if (int_point.edge_after) int_point.edge_after.setInclusion(polygon);\r\n    }\r\n}\r\n\r\nfunction setOverlappingFlags(intersections)\r\n{\r\n    let cur_face = undefined;\r\n    let first_int_point_in_face_id = undefined;\r\n    let next_int_point1 = undefined;\r\n    let num_int_points = intersections.int_points1.length;\r\n\r\n    for (let i = 0; i < num_int_points; i++) {\r\n        let cur_int_point1 = intersections.int_points1_sorted[i];\r\n\r\n        // Find boundary chain in the polygon1\r\n        if (cur_int_point1.face !== cur_face) {                               // next chain started\r\n            first_int_point_in_face_id = i; // cur_int_point1;\r\n            cur_face = cur_int_point1.face;\r\n        }\r\n\r\n        // Skip duplicated points with same <x,y> in \"cur_int_point1\" pool\r\n        let int_points_cur_pool_start = i;\r\n        let int_points_cur_pool_num = intPointsPoolCount(intersections.int_points1_sorted, i, cur_face);\r\n        let next_int_point_id;\r\n        if (int_points_cur_pool_start + int_points_cur_pool_num < num_int_points &&\r\n            intersections.int_points1_sorted[int_points_cur_pool_start + int_points_cur_pool_num].face === cur_face) {\r\n            next_int_point_id = int_points_cur_pool_start + int_points_cur_pool_num;\r\n        } else {                                         // get first point from the same face\r\n            next_int_point_id = first_int_point_in_face_id;\r\n        }\r\n\r\n        // From all points with same ,x,y. in 'next_int_point1' pool choose one that\r\n        // has same face both in res_poly and in wrk_poly\r\n        let int_points_next_pool_num = intPointsPoolCount(intersections.int_points1_sorted, next_int_point_id, cur_face);\r\n        next_int_point1 = null;\r\n        for (let j=next_int_point_id; j < next_int_point_id + int_points_next_pool_num; j++) {\r\n            let next_int_point1_tmp = intersections.int_points1_sorted[j];\r\n            if (next_int_point1_tmp.face === cur_face &&\r\n                intersections.int_points2[next_int_point1_tmp.id].face === intersections.int_points2[cur_int_point1.id].face) {\r\n                next_int_point1 = next_int_point1_tmp;\r\n                break;\r\n            }\r\n        }\r\n        if (next_int_point1 === null)\r\n            continue;\r\n\r\n        let edge_from1 = cur_int_point1.edge_after;\r\n        let edge_to1 = next_int_point1.edge_before;\r\n\r\n        if (!(edge_from1.bv === BOUNDARY$1 && edge_to1.bv === BOUNDARY$1))      // not a boundary chain - skip\r\n            continue;\r\n\r\n        if (edge_from1 !== edge_to1)                    //  one edge chain    TODO: support complex case\r\n            continue;\r\n\r\n        /* Find boundary chain in polygon2 between same intersection points */\r\n        let cur_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n        let next_int_point2 = intersections.int_points2[next_int_point1.id];\r\n\r\n        let edge_from2 = cur_int_point2.edge_after;\r\n        let edge_to2 = next_int_point2.edge_before;\r\n\r\n        /* if [edge_from2..edge_to2] is not a boundary chain, invert it */\r\n        /* check also that chain consist of one or two edges */\r\n        if (!(edge_from2.bv === BOUNDARY$1 && edge_to2.bv === BOUNDARY$1 && edge_from2 === edge_to2)) {\r\n            cur_int_point2 = intersections.int_points2[next_int_point1.id];\r\n            next_int_point2 = intersections.int_points2[cur_int_point1.id];\r\n\r\n            edge_from2 = cur_int_point2.edge_after;\r\n            edge_to2 = next_int_point2.edge_before;\r\n        }\r\n\r\n        if (!(edge_from2.bv === BOUNDARY$1 && edge_to2.bv === BOUNDARY$1 && edge_from2 === edge_to2))\r\n            continue;                           // not an overlapping chain - skip   TODO: fix boundary conflict\r\n\r\n        // Set overlapping flag - one-to-one case\r\n        edge_from1.setOverlap(edge_from2);\r\n    }\r\n}\r\n\r\nfunction intPointsPoolCount(int_points, cur_int_point_num, cur_face)\r\n{\r\n    let int_point_current;\r\n    let int_point_next;\r\n\r\n    let int_points_pool_num = 1;\r\n\r\n    if (int_points.length === 1) return 1;\r\n\r\n    int_point_current = int_points[cur_int_point_num];\r\n\r\n    for (let i = cur_int_point_num + 1; i < int_points.length; i++) {\r\n        if (int_point_current.face !== cur_face) {      /* next face started */\r\n            break;\r\n        }\r\n\r\n        int_point_next = int_points[i];\r\n\r\n        if (!(int_point_next.pt.equalTo(int_point_current.pt) &&\r\n            int_point_next.edge_before === int_point_current.edge_before &&\r\n            int_point_next.edge_after === int_point_current.edge_after)) {\r\n            break;         /* next point is different - break and exit */\r\n        }\r\n\r\n        int_points_pool_num++;     /* duplicated intersection point - increase counter */\r\n    }\r\n    return int_points_pool_num;\r\n}\r\n\r\nfunction splitByIntersections(polygon, int_points)\r\n{\r\n    if (!int_points) return;\r\n    for (let int_point of int_points) {\r\n        let edge = int_point.edge_before;\r\n\r\n        // recalculate vertex flag: it may be changed after previous split\r\n        int_point.is_vertex = NOT_VERTEX$1;\r\n        if (edge.shape.start && edge.shape.start.equalTo(int_point.pt)) {\r\n            int_point.is_vertex |= START_VERTEX$1;\r\n        }\r\n        if (edge.shape.end && edge.shape.end.equalTo(int_point.pt)) {\r\n            int_point.is_vertex |= END_VERTEX$1;\r\n        }\r\n\r\n        if (int_point.is_vertex & START_VERTEX$1) {    // nothing to split\r\n            int_point.edge_before = edge.prev;\r\n            if (edge.prev) {\r\n                int_point.is_vertex = END_VERTEX$1;   // polygon\r\n            }\r\n            continue;\r\n        }\r\n        if (int_point.is_vertex & END_VERTEX$1) {    // nothing to split\r\n            continue;\r\n        }\r\n\r\n        let newEdge = polygon.addVertex(int_point.pt, edge);\r\n        int_point.edge_before = newEdge;\r\n    }\r\n\r\n    for (let int_point of int_points) {\r\n        if (int_point.edge_before) {\r\n            int_point.edge_after = int_point.edge_before.next;\r\n        }\r\n        else {\r\n            if (polygon instanceof Multiline$1 && int_point.is_vertex & START_VERTEX$1) {\r\n                int_point.edge_after = polygon.first;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction insertBetweenIntPoints(int_point1, int_point2, new_edges) {\r\n    const edge_before = int_point1.edge_before;\r\n    const edge_after = int_point2.edge_after;\r\n    const len = new_edges.length;\r\n    edge_before.next = new_edges[0];\r\n    new_edges[0].prev = edge_before;\r\n\r\n    new_edges[len-1].next = edge_after;\r\n    edge_after.prev = new_edges[len-1];\r\n}\r\n\r\nvar smart_intersections = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    addToIntPoints: addToIntPoints,\r\n    calculateInclusionFlags: calculateInclusionFlags,\r\n    filterDuplicatedIntersections: filterDuplicatedIntersections,\r\n    getSortedArray: getSortedArray,\r\n    initializeInclusionFlags: initializeInclusionFlags,\r\n    insertBetweenIntPoints: insertBetweenIntPoints,\r\n    intPointsPoolCount: intPointsPoolCount,\r\n    setOverlappingFlags: setOverlappingFlags,\r\n    sortIntersections: sortIntersections,\r\n    splitByIntersections: splitByIntersections\r\n});\r\n\r\n/**\r\n * Created by Alex Bol on 12/02/2018.\r\n */\r\n/**\r\n * @module BooleanOperations\r\n */\r\n\r\nconst {INSIDE: INSIDE$1, OUTSIDE, BOUNDARY, OVERLAP_SAME, OVERLAP_OPPOSITE} = Constants;\r\nconst {NOT_VERTEX, START_VERTEX, END_VERTEX} = Constants;\r\n\r\nconst BOOLEAN_UNION = 1;\r\nconst BOOLEAN_INTERSECT = 2;\r\nconst BOOLEAN_SUBTRACT = 3;\r\n\r\n\r\n/**\r\n * Unify two polygons polygons and returns new polygon. <br/>\r\n * Point belongs to the resulted polygon if it belongs to the first OR to the second polygon\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Polygon}\r\n */\r\nfunction unify(polygon1, polygon2) {\r\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_UNION, true);\r\n    return res_poly;\r\n}\r\n\r\n/**\r\n * Subtract second polygon from the first and returns new polygon\r\n * Point belongs to the resulted polygon if it belongs to the first polygon AND NOT to the second polygon\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Polygon}\r\n */\r\nfunction subtract(polygon1, polygon2) {\r\n    let polygon2_tmp = polygon2.clone();\r\n    let polygon2_reversed = polygon2_tmp.reverse();\r\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2_reversed, BOOLEAN_SUBTRACT, true);\r\n    return res_poly;\r\n}\r\n\r\n/**\r\n * Intersect two polygons and returns new polygon\r\n * Point belongs to the resulted polygon is it belongs to the first AND to the second polygon\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Polygon}\r\n */\r\nfunction intersect$1(polygon1, polygon2) {\r\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_INTERSECT, true);\r\n    return res_poly;\r\n}\r\n\r\n/**\r\n * Returns boundary of intersection between two polygons as two arrays of shapes (Segments/Arcs) <br/>\r\n * The first array are shapes from the first polygon, the second array are shapes from the second\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Shape[][]}\r\n */\r\nfunction innerClip(polygon1, polygon2) {\r\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_INTERSECT, false);\r\n\r\n    let clip_shapes1 = [];\r\n    for (let face of res_poly.faces) {\r\n        clip_shapes1 = [...clip_shapes1, ...[...face.edges].map(edge => edge.shape)];\r\n    }\r\n    let clip_shapes2 = [];\r\n    for (let face of wrk_poly.faces) {\r\n        clip_shapes2 = [...clip_shapes2, ...[...face.edges].map(edge => edge.shape)];\r\n    }\r\n    return [clip_shapes1, clip_shapes2];\r\n}\r\n\r\n/**\r\n * Returns boundary of subtraction of the second polygon from first polygon as array of shapes\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Shape[]}\r\n */\r\nfunction outerClip(polygon1, polygon2) {\r\n    let [res_poly, wrk_poly] = booleanOpBinary(polygon1, polygon2, BOOLEAN_SUBTRACT, false);\r\n\r\n    let clip_shapes1 = [];\r\n    for (let face of res_poly.faces) {\r\n        clip_shapes1 = [...clip_shapes1, ...[...face.edges].map(edge => edge.shape)];\r\n    }\r\n\r\n    return clip_shapes1;\r\n}\r\n\r\n/**\r\n * Returns intersection points between boundaries of two polygons as two array of points <br/>\r\n * Points in the first array belong to first polygon, points from the second - to the second.\r\n * Points in each array are ordered according to the direction of the correspondent polygon\r\n * @param {Polygon} polygon1 - first operand\r\n * @param {Polygon} polygon2 - second operand\r\n * @returns {Point[][]}\r\n */\r\nfunction calculateIntersections(polygon1, polygon2) {\r\n    let res_poly = polygon1.clone();\r\n    let wrk_poly = polygon2.clone();\r\n\r\n    // get intersection points\r\n    let intersections = getIntersections(res_poly, wrk_poly);\r\n\r\n    // sort intersection points\r\n    sortIntersections(intersections);\r\n\r\n    // split by intersection points\r\n    splitByIntersections(res_poly, intersections.int_points1_sorted);\r\n    splitByIntersections(wrk_poly, intersections.int_points2_sorted);\r\n\r\n    // filter duplicated intersection points\r\n    filterDuplicatedIntersections(intersections);\r\n\r\n    // sort intersection points again after filtering\r\n    sortIntersections(intersections);\r\n\r\n    let ip_sorted1 = intersections.int_points1_sorted.map( int_point => int_point.pt);\r\n    let ip_sorted2 = intersections.int_points2_sorted.map( int_point => int_point.pt);\r\n    return [ip_sorted1, ip_sorted2];\r\n}\r\n\r\nfunction filterNotRelevantEdges(res_poly, wrk_poly, intersections, op) {\r\n    // keep not intersected faces for further remove and merge\r\n    let notIntersectedFacesRes = getNotIntersectedFaces(res_poly, intersections.int_points1);\r\n    let notIntersectedFacesWrk = getNotIntersectedFaces(wrk_poly, intersections.int_points2);\r\n\r\n    // calculate inclusion flag for not intersected faces\r\n    calcInclusionForNotIntersectedFaces(notIntersectedFacesRes, wrk_poly);\r\n    calcInclusionForNotIntersectedFaces(notIntersectedFacesWrk, res_poly);\r\n\r\n    // initialize inclusion flags for edges incident to intersections\r\n    initializeInclusionFlags(intersections.int_points1);\r\n    initializeInclusionFlags(intersections.int_points2);\r\n\r\n    // calculate inclusion flags only for edges incident to intersections\r\n    calculateInclusionFlags(intersections.int_points1, wrk_poly);\r\n    calculateInclusionFlags(intersections.int_points2, res_poly);\r\n\r\n    // fix boundary conflicts\r\n    while (fixBoundaryConflicts(res_poly, wrk_poly, intersections.int_points1, intersections.int_points1_sorted, intersections.int_points2, intersections));\r\n    // while (fixBoundaryConflicts(wrk_poly, res_poly, intersections.int_points2, intersections.int_points2_sorted, intersections.int_points1, intersections));\r\n\r\n    // Set overlapping flags for boundary chains: SAME or OPPOSITE\r\n    setOverlappingFlags(intersections);\r\n\r\n    // remove not relevant chains between intersection points\r\n    removeNotRelevantChains(res_poly, op, intersections.int_points1_sorted, true);\r\n    removeNotRelevantChains(wrk_poly, op, intersections.int_points2_sorted, false);\r\n\r\n    // remove not relevant not intersected faces from res_polygon and wrk_polygon\r\n    // if op == UNION, remove faces that are included in wrk_polygon without intersection\r\n    // if op == INTERSECT, remove faces that are not included into wrk_polygon\r\n    removeNotRelevantNotIntersectedFaces(res_poly, notIntersectedFacesRes, op, true);\r\n    removeNotRelevantNotIntersectedFaces(wrk_poly, notIntersectedFacesWrk, op, false);\r\n}\r\n\r\nfunction swapLinksAndRestore(res_poly, wrk_poly, intersections, op) {\r\n\r\n    // add edges of wrk_poly into the edge container of res_poly\r\n    copyWrkToRes(res_poly, wrk_poly, op, intersections.int_points2);\r\n\r\n    // swap links from res_poly to wrk_poly and vice versa\r\n    swapLinks(res_poly, wrk_poly, intersections);\r\n\r\n    // remove old faces\r\n    removeOldFaces(res_poly, intersections.int_points1);\r\n    removeOldFaces(wrk_poly, intersections.int_points2);\r\n\r\n    // restore faces\r\n    restoreFaces(res_poly, intersections.int_points1, intersections.int_points2);\r\n    restoreFaces(res_poly, intersections.int_points2, intersections.int_points1);\r\n\r\n    // merge relevant not intersected faces from wrk_polygon to res_polygon\r\n    // mergeRelevantNotIntersectedFaces(res_poly, wrk_poly);\r\n}\r\n\r\n\r\nfunction booleanOpBinary(polygon1, polygon2, op, restore)\r\n{\r\n    let res_poly = polygon1.clone();\r\n    let wrk_poly = polygon2.clone();\r\n\r\n    // get intersection points\r\n    let intersections = getIntersections(res_poly, wrk_poly);\r\n\r\n    // sort intersection points\r\n    sortIntersections(intersections);\r\n\r\n    // split by intersection points\r\n    splitByIntersections(res_poly, intersections.int_points1_sorted);\r\n    splitByIntersections(wrk_poly, intersections.int_points2_sorted);\r\n\r\n    // filter duplicated intersection points\r\n    filterDuplicatedIntersections(intersections);\r\n\r\n    // sort intersection points again after filtering\r\n    sortIntersections(intersections);\r\n\r\n    // calculate inclusion and remove not relevant edges\r\n    filterNotRelevantEdges(res_poly, wrk_poly, intersections, op);\r\n\r\n    if (restore) {\r\n        swapLinksAndRestore(res_poly, wrk_poly, intersections, op);\r\n    }\r\n\r\n    return [res_poly, wrk_poly];\r\n}\r\n\r\nfunction getIntersections(polygon1, polygon2)\r\n{\r\n    let intersections = {\r\n        int_points1: [],\r\n        int_points2: []\r\n    };\r\n\r\n    // calculate intersections\r\n    for (let edge1 of polygon1.edges) {\r\n\r\n        // request edges of polygon2 in the box of edge1\r\n        let resp = polygon2.edges.search(edge1.box);\r\n\r\n        // for each edge2 in response\r\n        for (let edge2 of resp) {\r\n\r\n            // calculate intersections between edge1 and edge2\r\n            let ip = edge1.shape.intersect(edge2.shape);\r\n\r\n            // for each intersection point\r\n            for (let pt of ip) {\r\n                addToIntPoints(edge1, pt, intersections.int_points1);\r\n                addToIntPoints(edge2, pt, intersections.int_points2);\r\n            }\r\n        }\r\n    }\r\n    return intersections;\r\n}\r\n\r\nfunction getNotIntersectedFaces(poly, int_points)\r\n{\r\n    let notIntersected = [];\r\n    for (let face of poly.faces) {\r\n        if (!int_points.find((ip) => ip.face === face)) {\r\n            notIntersected.push(face);\r\n        }\r\n    }\r\n    return notIntersected;\r\n}\r\n\r\nfunction calcInclusionForNotIntersectedFaces(notIntersectedFaces, poly2)\r\n{\r\n    for (let face of notIntersectedFaces) {\r\n        face.first.bv = face.first.bvStart = face.first.bvEnd = undefined;\r\n        face.first.setInclusion(poly2);\r\n    }\r\n}\r\n\r\nfunction fixBoundaryConflicts(poly1, poly2, int_points1, int_points1_sorted, int_points2, intersections )\r\n{\r\n    let cur_face;\r\n    let first_int_point_in_face_id;\r\n    let next_int_point1;\r\n    let num_int_points = int_points1_sorted.length;\r\n    let iterate_more = false;\r\n\r\n    for (let i = 0; i < num_int_points; i++) {\r\n        let cur_int_point1 = int_points1_sorted[i];\r\n\r\n        // Find boundary chain in the polygon1\r\n        if (cur_int_point1.face !== cur_face) {                               // next chain started\r\n            first_int_point_in_face_id = i; // cur_int_point1;\r\n            cur_face = cur_int_point1.face;\r\n        }\r\n\r\n        // Skip duplicated points with same <x,y> in \"cur_int_point1\" pool\r\n        let int_points_cur_pool_start = i;\r\n        let int_points_cur_pool_num = intPointsPoolCount(int_points1_sorted, i, cur_face);\r\n        let next_int_point_id;\r\n        if (int_points_cur_pool_start + int_points_cur_pool_num < num_int_points &&\r\n            int_points1_sorted[int_points_cur_pool_start + int_points_cur_pool_num].face === cur_face) {\r\n            next_int_point_id = int_points_cur_pool_start + int_points_cur_pool_num;\r\n        } else {                                         // get first point from the same face\r\n            next_int_point_id = first_int_point_in_face_id;\r\n        }\r\n\r\n        // From all points with same ,x,y. in 'next_int_point1' pool choose one that\r\n        // has same face both in res_poly and in wrk_poly\r\n        let int_points_next_pool_num = intPointsPoolCount(int_points1_sorted, next_int_point_id, cur_face);\r\n        next_int_point1 = null;\r\n        for (let j=next_int_point_id; j < next_int_point_id + int_points_next_pool_num; j++) {\r\n            let next_int_point1_tmp = int_points1_sorted[j];\r\n            if (next_int_point1_tmp.face === cur_face &&\r\n                int_points2[next_int_point1_tmp.id].face === int_points2[cur_int_point1.id].face) {\r\n                next_int_point1 = next_int_point1_tmp;\r\n                break;\r\n            }\r\n        }\r\n        if (next_int_point1 === null)\r\n            continue;\r\n\r\n        let edge_from1 = cur_int_point1.edge_after;\r\n        let edge_to1 = next_int_point1.edge_before;\r\n\r\n        // Case #1. One of the ends is not boundary - probably tiny edge wrongly marked as boundary\r\n        if (edge_from1.bv === BOUNDARY && edge_to1.bv != BOUNDARY) {\r\n            edge_from1.bv = edge_to1.bv;\r\n            continue;\r\n        }\r\n\r\n        if (edge_from1.bv != BOUNDARY && edge_to1.bv === BOUNDARY) {\r\n            edge_to1.bv = edge_from1.bv;\r\n            continue;\r\n        }\r\n\r\n        // Set up all boundary values for middle edges. Need for cases 2 and 3\r\n        if ( (edge_from1.bv === BOUNDARY && edge_to1.bv === BOUNDARY && edge_from1 != edge_to1) ||\r\n        (edge_from1.bv === INSIDE$1 && edge_to1.bv === OUTSIDE  || edge_from1.bv === OUTSIDE && edge_to1.bv === INSIDE$1 ) ) {\r\n            let edge_tmp = edge_from1.next;\r\n            while (edge_tmp != edge_to1) {\r\n                edge_tmp.bvStart = undefined;\r\n                edge_tmp.bvEnd = undefined;\r\n                edge_tmp.bv = undefined;\r\n                edge_tmp.setInclusion(poly2);\r\n                edge_tmp = edge_tmp.next;\r\n            }\r\n        }\r\n\r\n        // Case #2. Both of the ends boundary. Check all the edges in the middle\r\n        // If some edges in the middle are not boundary then update bv of 'from' and 'to' edges\r\n        if (edge_from1.bv === BOUNDARY && edge_to1.bv === BOUNDARY && edge_from1 != edge_to1) {\r\n            let edge_tmp = edge_from1.next;\r\n            let new_bv;\r\n            while (edge_tmp != edge_to1) {\r\n                if (edge_tmp.bv != BOUNDARY) {\r\n                    if (new_bv === undefined) {        // first not boundary edge between from and to\r\n                        new_bv = edge_tmp.bv;\r\n                    }\r\n                    else {                            // another not boundary edge between from and to\r\n                        if (edge_tmp.bv != new_bv) {  // and it has different bv - can't resolve conflict\r\n                            throw Errors.UNRESOLVED_BOUNDARY_CONFLICT;\r\n                        }\r\n                    }\r\n                }\r\n                edge_tmp = edge_tmp.next;\r\n            }\r\n\r\n            if (new_bv != undefined) {\r\n                edge_from1.bv = new_bv;\r\n                edge_to1.bv = new_bv;\r\n            }\r\n            continue;         // all middle edges are boundary, proceed with this\r\n        }\r\n\r\n        // Case 3. One of the ends is inner, another is outer\r\n        if (edge_from1.bv === INSIDE$1 && edge_to1.bv === OUTSIDE  || edge_from1.bv === OUTSIDE && edge_to1.bv === INSIDE$1 ) {\r\n            let edge_tmp = edge_from1;\r\n            // Find missing intersection point\r\n            while (edge_tmp != edge_to1) {\r\n                if (edge_tmp.bvStart === edge_from1.bv && edge_tmp.bvEnd === edge_to1.bv) {\r\n                    let [dist, segment] = edge_tmp.shape.distanceTo(poly2);\r\n                    if (dist < 10*Flatten.DP_TOL) {  // it should be very close\r\n                        // let pt = edge_tmp.end;\r\n                        // add to the list of intersections of poly1\r\n                        addToIntPoints(edge_tmp, segment.ps, int_points1);\r\n\r\n                        // split edge_tmp in poly1 if need\r\n                        let int_point1 = int_points1[int_points1.length-1];\r\n                        if (int_point1.is_vertex & START_VERTEX) {        // nothing to split\r\n                            int_point1.edge_after = edge_tmp;\r\n                            int_point1.edge_before = edge_tmp.prev;\r\n                            edge_tmp.bvStart = BOUNDARY;\r\n                            edge_tmp.bv = undefined;\r\n                            edge_tmp.setInclusion(poly2);\r\n                        }\r\n                        else if (int_point1.is_vertex & END_VERTEX) {    // nothing to split\r\n                            int_point1.edge_after = edge_tmp.next;\r\n                            edge_tmp.bvEnd = BOUNDARY;\r\n                            edge_tmp.bv = undefined;\r\n                            edge_tmp.setInclusion(poly2);\r\n                        }\r\n                        else {        // split edge here\r\n                            let newEdge1 = poly2.addVertex(int_point1.pt, edge_tmp);\r\n                            int_point1.edge_before = newEdge1;\r\n                            int_point1.edge_after = newEdge1.next;\r\n\r\n                            newEdge1.setInclusion(poly2);\r\n\r\n                            newEdge1.next.bvStart = BOUNDARY;\r\n                            newEdge1.next.bvEnd = undefined;\r\n                            newEdge1.next.bv = undefined;\r\n                            newEdge1.next.setInclusion(poly2);\r\n                        }\r\n\r\n                        // add to the list of intersections of poly2\r\n                        let edge2 = poly2.findEdgeByPoint(segment.pe);\r\n                        addToIntPoints(edge2, segment.pe, int_points2);\r\n                        // split edge2 in poly2 if need\r\n                        let int_point2 = int_points2[int_points2.length-1];\r\n                        if (int_point2.is_vertex & START_VERTEX) {        // nothing to split\r\n                            int_point2.edge_after = edge2;\r\n                            int_point2.edge_before = edge2.prev;\r\n                        }\r\n                        else if (int_point2.is_vertex & END_VERTEX) {    // nothing to split\r\n                            int_point2.edge_after = edge2.next;\r\n                        }\r\n                        else {        // split edge here\r\n                            // first locate int_points that may refer to edge2 as edge.after\r\n                            // let int_point2_edge_before = int_points2.find( int_point => int_point.edge_before === edge2)\r\n                            let int_point2_edge_after = int_points2.find( int_point => int_point.edge_after === edge2 );\r\n\r\n                            let newEdge2 = poly2.addVertex(int_point2.pt, edge2);\r\n                            int_point2.edge_before = newEdge2;\r\n                            int_point2.edge_after = newEdge2.next;\r\n\r\n                            if (int_point2_edge_after)\r\n                                int_point2_edge_after.edge_after = newEdge2;\r\n\r\n                            newEdge2.bvStart = undefined;\r\n                            newEdge2.bvEnd = BOUNDARY;\r\n                            newEdge2.bv = undefined;\r\n                            newEdge2.setInclusion(poly1);\r\n\r\n                            newEdge2.next.bvStart = BOUNDARY;\r\n                            newEdge2.next.bvEnd = undefined;\r\n                            newEdge2.next.bv = undefined;\r\n                            newEdge2.next.setInclusion(poly1);\r\n                        }\r\n\r\n                        sortIntersections(intersections);\r\n\r\n                        iterate_more = true;\r\n                        break;\r\n                    }\r\n                }\r\n                edge_tmp = edge_tmp.next;\r\n            }\r\n\r\n            // we changed intersections inside loop, have to exit and repair again\r\n            if (iterate_more)\r\n                break;\r\n\r\n            throw Errors.UNRESOLVED_BOUNDARY_CONFLICT;\r\n        }\r\n    }\r\n\r\n    return iterate_more;\r\n}\r\n\r\nfunction removeNotRelevantChains(polygon, op, int_points, is_res_polygon)\r\n{\r\n    if (!int_points) return;\r\n    let cur_face = undefined;\r\n    let first_int_point_in_face_num = undefined;\r\n    let int_point_current;\r\n    let int_point_next;\r\n\r\n    for (let i = 0; i < int_points.length; i++) {\r\n        int_point_current = int_points[i];\r\n\r\n        if (int_point_current.face !== cur_face) {   // next face started\r\n            first_int_point_in_face_num = i;\r\n            cur_face = int_point_current.face;\r\n        }\r\n\r\n        if (cur_face.isEmpty())                // ??\r\n            continue;\r\n\r\n        // Get next int point from the same face that current\r\n\r\n        // Count how many duplicated points with same <x,y> in \"points from\" pool ?\r\n        let int_points_from_pull_start = i;\r\n        let int_points_from_pull_num = intPointsPoolCount(int_points, i, cur_face);\r\n        let next_int_point_num;\r\n        if (int_points_from_pull_start + int_points_from_pull_num < int_points.length &&\r\n            int_points[int_points_from_pull_start + int_points_from_pull_num].face === int_point_current.face) {\r\n            next_int_point_num = int_points_from_pull_start + int_points_from_pull_num;\r\n        } else {                                         // get first point from the same face\r\n            next_int_point_num = first_int_point_in_face_num;\r\n        }\r\n        int_point_next = int_points[next_int_point_num];\r\n\r\n        /* Count how many duplicated points with same <x,y> in \"points to\" pull ? */\r\n        let int_points_to_pull_start = next_int_point_num;\r\n        let int_points_to_pull_num = intPointsPoolCount(int_points, int_points_to_pull_start, cur_face);\r\n\r\n\r\n        let edge_from = int_point_current.edge_after;\r\n        let edge_to = int_point_next.edge_before;\r\n\r\n        if ((edge_from.bv === INSIDE$1 && edge_to.bv === INSIDE$1 && op === BOOLEAN_UNION) ||\r\n            (edge_from.bv === OUTSIDE && edge_to.bv === OUTSIDE && op === BOOLEAN_INTERSECT) ||\r\n            ((edge_from.bv === OUTSIDE || edge_to.bv === OUTSIDE) && op === BOOLEAN_SUBTRACT && !is_res_polygon) ||\r\n            ((edge_from.bv === INSIDE$1 || edge_to.bv === INSIDE$1) && op === BOOLEAN_SUBTRACT && is_res_polygon) ||\r\n            (edge_from.bv === BOUNDARY && edge_to.bv === BOUNDARY && (edge_from.overlap & OVERLAP_SAME) && is_res_polygon) ||\r\n            (edge_from.bv === BOUNDARY && edge_to.bv === BOUNDARY && (edge_from.overlap & OVERLAP_OPPOSITE))) {\r\n\r\n            polygon.removeChain(cur_face, edge_from, edge_to);\r\n\r\n            /* update all points in \"points from\" pull */\r\n            for (let k = int_points_from_pull_start; k < int_points_from_pull_start + int_points_from_pull_num; k++) {\r\n                int_points[k].edge_after = undefined;\r\n            }\r\n\r\n            /* update all points in \"points to\" pull */\r\n            for (let k = int_points_to_pull_start; k < int_points_to_pull_start + int_points_to_pull_num; k++) {\r\n                int_points[k].edge_before = undefined;\r\n            }\r\n        }\r\n\r\n        /* skip to the last point in \"points from\" group */\r\n        i += int_points_from_pull_num - 1;\r\n    }\r\n}\r\nfunction copyWrkToRes(res_polygon, wrk_polygon, op, int_points)\r\n{\r\n    for (let face of wrk_polygon.faces) {\r\n        for (let edge of face) {\r\n            res_polygon.edges.add(edge);\r\n        }\r\n        // If union - add face from wrk_polygon that is not intersected with res_polygon\r\n        if ( /*(op === BOOLEAN_UNION || op == BOOLEAN_SUBTRACT) &&*/\r\n            int_points.find((ip) => (ip.face === face)) === undefined) {\r\n            res_polygon.addFace(face.first, face.last);\r\n        }\r\n    }\r\n}\r\n\r\nfunction swapLinks(res_polygon, wrk_polygon, intersections)\r\n{\r\n    if (intersections.int_points1.length === 0) return;\r\n\r\n    for (let i = 0; i < intersections.int_points1.length; i++) {\r\n        let int_point1 = intersections.int_points1[i];\r\n        let int_point2 = intersections.int_points2[i];\r\n\r\n        // Simple case - find continuation on the other polygon\r\n\r\n        // Process edge from res_polygon\r\n        if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // swap need\r\n            if (int_point2.edge_before === undefined && int_point2.edge_after !== undefined) {  // simple case\r\n                // Connect edges\r\n                int_point1.edge_before.next = int_point2.edge_after;\r\n                int_point2.edge_after.prev = int_point1.edge_before;\r\n\r\n                // Fill in missed links in intersection points\r\n                int_point1.edge_after = int_point2.edge_after;\r\n                int_point2.edge_before = int_point1.edge_before;\r\n            }\r\n        }\r\n        // Process edge from wrk_polygon\r\n        if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // swap need\r\n            if (int_point1.edge_before === undefined && int_point1.edge_after !== undefined) {  // simple case\r\n                // Connect edges\r\n                int_point2.edge_before.next = int_point1.edge_after;\r\n                int_point1.edge_after.prev = int_point2.edge_before;\r\n\r\n                // Complete missed links\r\n                int_point2.edge_after = int_point1.edge_after;\r\n                int_point1.edge_before = int_point2.edge_before;\r\n            }\r\n        }\r\n\r\n        // Continuation not found - complex case\r\n        // Continuation will be found on the same polygon.\r\n        // It happens when intersection point is actually touching point\r\n        // Polygon1\r\n        if (int_point1.edge_before !== undefined && int_point1.edge_after === undefined) {    // still swap need\r\n            for (let int_point of intersections.int_points1_sorted) {\r\n                if (int_point === int_point1) continue;     // skip same\r\n                if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                    if (int_point.pt.equalTo(int_point1.pt)) {\r\n                        // Connect edges\r\n                        int_point1.edge_before.next = int_point.edge_after;\r\n                        int_point.edge_after.prev = int_point1.edge_before;\r\n\r\n                        // Complete missed links\r\n                        int_point1.edge_after = int_point.edge_after;\r\n                        int_point.edge_before = int_point1.edge_before;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Polygon2\r\n        if (int_point2.edge_before !== undefined && int_point2.edge_after === undefined) {    // still swap need\r\n            for (let int_point of intersections.int_points2_sorted) {\r\n                if (int_point === int_point2) continue;     // skip same\r\n                if (int_point.edge_before === undefined && int_point.edge_after !== undefined) {\r\n                    if (int_point.pt.equalTo(int_point2.pt)) {\r\n                        // Connect edges\r\n                        int_point2.edge_before.next = int_point.edge_after;\r\n                        int_point.edge_after.prev = int_point2.edge_before;\r\n\r\n                        // Complete missed links\r\n                        int_point2.edge_after = int_point.edge_after;\r\n                        int_point.edge_before = int_point2.edge_before;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // Sanity check that no dead ends left\r\n}\r\n\r\nfunction removeOldFaces(polygon, int_points)\r\n{\r\n    for (let int_point of int_points) {\r\n        polygon.faces.delete(int_point.face);\r\n        int_point.face = undefined;\r\n        if (int_point.edge_before)\r\n            int_point.edge_before.face = undefined;\r\n        if (int_point.edge_after)\r\n            int_point.edge_after.face = undefined;\r\n    }\r\n}\r\n\r\nfunction restoreFaces(polygon, int_points, other_int_points)\r\n{\r\n    // For each intersection point - create new face\r\n    for (let int_point of int_points) {\r\n        if (int_point.edge_before === undefined || int_point.edge_after === undefined)  // completely deleted\r\n            continue;\r\n        if (int_point.face)            // already restored\r\n            continue;\r\n\r\n        if (int_point.edge_after.face || int_point.edge_before.face)        // Face already created. Possible case in duplicated intersection points\r\n            continue;\r\n\r\n        let first = int_point.edge_after;      // face start\r\n        let last = int_point.edge_before;      // face end;\r\n\r\n        try {\r\n            LinkedList.testInfiniteLoop(first);    // check and throw error if infinite loop found\r\n        }\r\n        catch (error) {\r\n            throw Errors.CANNOT_COMPLETE_BOOLEAN_OPERATION\r\n        }\r\n\r\n        let face = polygon.addFace(first, last);\r\n\r\n        // Mark intersection points from the newly create face\r\n        // to avoid multiple creation of the same face.\r\n        // Face was assigned to each edge of new face in addFace function\r\n        for (let int_point_tmp of int_points) {\r\n            if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                int_point_tmp.face = face;\r\n            }\r\n        }\r\n        // Mark other intersection points as well\r\n        for (let int_point_tmp of other_int_points) {\r\n            if (int_point_tmp.edge_before && int_point_tmp.edge_after &&\r\n                int_point_tmp.edge_before.face === face && int_point_tmp.edge_after.face === face) {\r\n                int_point_tmp.face = face;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction removeNotRelevantNotIntersectedFaces(polygon, notIntersectedFaces, op, is_res_polygon)\r\n{\r\n    for (let face of notIntersectedFaces) {\r\n        let rel = face.first.bv;\r\n        if (op === BOOLEAN_UNION && rel === INSIDE$1 ||\r\n            op === BOOLEAN_SUBTRACT && rel === INSIDE$1 && is_res_polygon ||\r\n            op === BOOLEAN_SUBTRACT && rel === OUTSIDE && !is_res_polygon ||\r\n            op === BOOLEAN_INTERSECT && rel === OUTSIDE) {\r\n\r\n            polygon.deleteFace(face);\r\n        }\r\n    }\r\n}\r\n\r\nvar BooleanOperations = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    BOOLEAN_INTERSECT: BOOLEAN_INTERSECT,\r\n    BOOLEAN_SUBTRACT: BOOLEAN_SUBTRACT,\r\n    BOOLEAN_UNION: BOOLEAN_UNION,\r\n    calculateIntersections: calculateIntersections,\r\n    innerClip: innerClip,\r\n    intersect: intersect$1,\r\n    outerClip: outerClip,\r\n    removeNotRelevantChains: removeNotRelevantChains,\r\n    removeOldFaces: removeOldFaces,\r\n    restoreFaces: restoreFaces,\r\n    subtract: subtract,\r\n    unify: unify\r\n});\r\n\r\n/*\r\n    Dimensionally extended 9-intersected model\r\n    See https://en.wikipedia.org/wiki/DE-9IM for more details\r\n */\r\n// const DISJOINT = RegExp('FF.FF....');\r\nconst EQUAL = RegExp('T.F..FFF.|T.F...F..');\r\nconst INTERSECT = RegExp('T........|.T.......|...T.....|....T....');\r\nconst TOUCH = RegExp('FT.......|F..T.....|F...T....');\r\nconst INSIDE = RegExp('T.F..F...');\r\nconst COVERED = RegExp('T.F..F...|.TF..F...|..FT.F...|..F.TF...');\r\n\r\nclass DE9IM {\r\n    /**\r\n     * Create new instance of DE9IM matrix\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Array representing 3x3 intersection matrix\r\n         * @type {Shape[]}\r\n         */\r\n        this.m = new Array(9).fill(undefined);\r\n    }\r\n\r\n    /**\r\n     * Get Interior To Interior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get I2I() {\r\n        return this.m[0];\r\n    }\r\n\r\n    /**\r\n     * Set Interior To Interior intersection\r\n     * @param geom\r\n     */\r\n    set I2I(geom) {\r\n        this.m[0] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Interior To Boundary intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get I2B() {\r\n        return this.m[1];\r\n    }\r\n\r\n    /**\r\n     * Set Interior to Boundary intersection\r\n     * @param geomc\r\n     */\r\n    set I2B(geom) {\r\n        this.m[1] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Interior To Exterior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get I2E() {\r\n        return this.m[2];\r\n    }\r\n\r\n    /**\r\n     * Set Interior to Exterior intersection\r\n     * @param geom\r\n     */\r\n    set I2E(geom) {\r\n        this.m[2] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Boundary To Interior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get B2I() {\r\n        return this.m[3];\r\n    }\r\n\r\n    /**\r\n     * Set Boundary to Interior intersection\r\n     * @param geom\r\n     */\r\n    set B2I(geom) {\r\n        this.m[3] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Boundary To Boundary intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get B2B() {\r\n        return this.m[4];\r\n    }\r\n\r\n    /**\r\n     * Set Boundary to Boundary intersection\r\n     * @param geom\r\n     */\r\n    set B2B(geom) {\r\n        this.m[4] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Boundary To Exterior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get B2E() {\r\n        return this.m[5];\r\n    }\r\n\r\n    /**\r\n     * Set Boundary to Exterior intersection\r\n     * @param geom\r\n     */\r\n    set B2E(geom) {\r\n        this.m[5] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Exterior To Interior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get E2I() {\r\n        return this.m[6];\r\n    }\r\n\r\n    /**\r\n     * Set Exterior to Interior intersection\r\n     * @param geom\r\n     */\r\n    set E2I(geom) {\r\n        this.m[6] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Exterior To Boundary intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get E2B() {\r\n        return this.m[7];\r\n    }\r\n\r\n    /**\r\n     * Set Exterior to Boundary intersection\r\n     * @param geom\r\n     */\r\n    set E2B(geom) {\r\n        this.m[7] = geom;\r\n    }\r\n\r\n    /**\r\n     * Get Exterior to Exterior intersection\r\n     * @returns {Shape[] | undefined}\r\n     */\r\n    get E2E() {\r\n        return this.m[8];\r\n    }\r\n\r\n    /**\r\n     * Set Exterior to Exterior intersection\r\n     * @param geom\r\n     */\r\n    set E2E(geom) {\r\n        this.m[8] = geom;\r\n    }\r\n\r\n    /**\r\n     * Return de9im matrix as string where<br/>\r\n     * - intersection is 'T'<br/>\r\n     * - not intersected is 'F'<br/>\r\n     * - not relevant is '*'<br/>\r\n     * For example, string 'FF**FF****' means 'DISJOINT'\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return this.m.map( e => {\r\n            if (e instanceof Array && e.length > 0) {\r\n                return 'T'\r\n            }\r\n            else if (e instanceof Array && e.length === 0) {\r\n                return 'F'\r\n            }\r\n            else {\r\n                return '*'\r\n            }\r\n        }).join(\"\")\r\n    }\r\n\r\n    equal() {\r\n        return EQUAL.test(this.toString());\r\n    }\r\n\r\n    intersect() {\r\n        return INTERSECT.test(this.toString());\r\n    }\r\n\r\n    touch() {\r\n        return TOUCH.test(this.toString());\r\n    }\r\n\r\n    inside() {\r\n        return INSIDE.test(this.toString());\r\n    }\r\n\r\n    covered() {\r\n        return COVERED.test(this.toString());\r\n    }\r\n}\r\n\r\n/**\r\n * @module RayShoot\r\n */\r\n/**\r\n * Implements ray shooting algorithm. Returns relation between point and polygon: inside, outside or boundary\r\n * @param {Polygon} polygon - polygon to test\r\n * @param {Point} point - point to test\r\n * @returns {INSIDE|OUTSIDE|BOUNDARY}\r\n */\r\nfunction ray_shoot(polygon, point) {\r\n    let contains = undefined;\r\n\r\n    // 1. Quick reject\r\n    // if (polygon.box.not_intersect(point.box)) {\r\n    //     return Flatten.OUTSIDE;\r\n    // }\r\n\r\n    let ray = new Flatten.Ray(point);\r\n    let line = new Flatten.Line(ray.pt, ray.norm);\r\n\r\n    // 2. Locate relevant edges of the polygon\r\n    const searchBox = new Flatten.Box(\r\n        ray.box.xmin-Flatten.DP_TOL, ray.box.ymin-Flatten.DP_TOL,\r\n        ray.box.xmax, ray.box.ymax+Flatten.DP_TOL\r\n    );\r\n\r\n    if (polygon.box.not_intersect(searchBox)) {\r\n        return Flatten.OUTSIDE;\r\n    }\r\n\r\n    let resp_edges = polygon.edges.search(searchBox);\r\n\r\n    if (resp_edges.length === 0) {\r\n        return Flatten.OUTSIDE;\r\n    }\r\n\r\n    // 2.5 Check if boundary\r\n    for (let edge of resp_edges) {\r\n        if (edge.shape.contains(point)) {\r\n            return Flatten.BOUNDARY;\r\n        }\r\n    }\r\n\r\n    let faces = [...polygon.faces];\r\n\r\n    // 3. Calculate intersections\r\n    let intersections = [];\r\n    for (let edge of resp_edges) {\r\n        for (let ip of ray.intersect(edge.shape)) {\r\n\r\n            // If intersection is equal to query point then point lays on boundary\r\n            if (ip.equalTo(point)) {\r\n                return Flatten.BOUNDARY;\r\n            }\r\n\r\n            intersections.push({\r\n                pt: ip,\r\n                edge: edge,\r\n                face_index: faces.indexOf(edge.face)\r\n            });\r\n        }\r\n    }\r\n\r\n    // 4. Sort intersection in x-ascending order\r\n    intersections.sort((i1, i2) => {\r\n        if (LT(i1.pt.x, i2.pt.x)) {\r\n            return -1;\r\n        }\r\n        if (GT(i1.pt.x, i2.pt.x)) {\r\n            return 1;\r\n        }\r\n        if (i1.face_index < i2.face_index) {\r\n            return -1\r\n        }\r\n        if (i1.face_index > i2.face_index) {\r\n            return 1\r\n        }\r\n        if (i1.edge.arc_length < i2.edge.arc_length) {\r\n            return -1\r\n        }\r\n        if (i1.edge.arc_length > i2.edge.arc_length) {\r\n            return 1\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    // 5. Count real intersections, exclude touching\r\n    let counter = 0;\r\n\r\n    for (let i = 0; i < intersections.length; i++) {\r\n        let intersection = intersections[i];\r\n\r\n        if (intersection.pt.equalTo(intersection.edge.shape.start)) {\r\n            /* skip same point between same edges if already counted */\r\n            if (i > 0 && intersection.pt.equalTo(intersections[i - 1].pt) &&\r\n                intersection.face_index === intersections[i - 1].face_index &&\r\n                intersection.edge.prev === intersections[i - 1].edge) {\r\n                continue;\r\n            }\r\n\r\n            let prev_edge = intersection.edge.prev;\r\n            while (EQ_0(prev_edge.length)) {\r\n                prev_edge = prev_edge.prev;\r\n            }\r\n            let prev_tangent = prev_edge.shape.tangentInEnd();\r\n            let prev_point = intersection.pt.translate(prev_tangent);\r\n\r\n            let cur_tangent = intersection.edge.shape.tangentInStart();\r\n            let cur_point = intersection.pt.translate(cur_tangent);\r\n\r\n            let prev_on_the_left = prev_point.leftTo(line);\r\n            let cur_on_the_left = cur_point.leftTo(line);\r\n\r\n            if ((prev_on_the_left && !cur_on_the_left) || (!prev_on_the_left && cur_on_the_left)) {\r\n                counter++;\r\n            }\r\n        } else if (intersection.pt.equalTo(intersection.edge.shape.end)) {\r\n            /* skip same point between same edges if already counted */\r\n            if (i > 0 && intersection.pt.equalTo(intersections[i - 1].pt) &&\r\n                intersection.face_index === intersections[i-1].face_index &&\r\n                intersection.edge.next === intersections[i - 1].edge) {\r\n                continue;\r\n            }\r\n\r\n            let next_edge = intersection.edge.next;\r\n            while (EQ_0(next_edge.length)) {\r\n                next_edge = next_edge.next;\r\n            }\r\n            let next_tangent = next_edge.shape.tangentInStart();\r\n            let next_point = intersection.pt.translate(next_tangent);\r\n\r\n            let cur_tangent = intersection.edge.shape.tangentInEnd();\r\n            let cur_point = intersection.pt.translate(cur_tangent);\r\n\r\n            let next_on_the_left = next_point.leftTo(line);\r\n            let cur_on_the_left = cur_point.leftTo(line);\r\n\r\n            if ((next_on_the_left && !cur_on_the_left) || (!next_on_the_left && cur_on_the_left)) {\r\n                counter++;\r\n            }\r\n        } else {        /* intersection point is not a vertex */\r\n            if (intersection.edge.shape instanceof Flatten.Segment) {\r\n                counter++;\r\n            } else {\r\n                /* Check if ray does not touch the curve in the extremal (top or bottom) point */\r\n                let box = intersection.edge.shape.box;\r\n                if (!(EQ(intersection.pt.y, box.ymin) ||\r\n                    EQ(intersection.pt.y, box.ymax))) {\r\n                    counter++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 6. Odd or even?\r\n    contains = counter % 2 === 1 ? INSIDE$2 : OUTSIDE$1;\r\n    return contains;\r\n}\r\n\r\n/*\r\n    Calculate relationship between two shapes and return result in the form of\r\n    Dimensionally Extended nine-Intersection Matrix (https://en.wikipedia.org/wiki/DE-9IM)\r\n */\r\n\r\n\r\n/**\r\n * Returns true if shapes are topologically equal:  their interiors intersect and\r\n * no part of the interior or boundary of one geometry intersects the exterior of the other\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction equal(shape1, shape2) {\r\n    return relate(shape1, shape2).equal();\r\n}\r\n\r\n/**\r\n * Returns true if shapes have at least one point in common, same as \"not disjoint\"\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction intersect(shape1, shape2) {\r\n    return relate(shape1, shape2).intersect();\r\n}\r\n\r\n/**\r\n * Returns true if shapes have at least one point in common, but their interiors do not intersect\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction touch(shape1, shape2) {\r\n    return relate(shape1, shape2).touch();\r\n}\r\n\r\n/**\r\n * Returns true if shapes have no points in common neither in interior nor in boundary\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction disjoint(shape1, shape2) {\r\n    return !intersect(shape1, shape2);\r\n}\r\n\r\n/**\r\n * Returns true shape1 lies in the interior of shape2\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction inside(shape1, shape2) {\r\n    return relate(shape1, shape2).inside();\r\n}\r\n\r\n/**\r\n * Returns true if every point in shape1 lies in the interior or on the boundary of shape2\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction covered(shape1, shape2) {\r\n    return  relate(shape1, shape2).covered();\r\n}\r\n\r\n/**\r\n * Returns true shape1's interior contains shape2 <br/>\r\n * Same as inside(shape2, shape1)\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction contain(shape1, shape2) {\r\n    return inside(shape2, shape1);\r\n}\r\n\r\n/**\r\n * Returns true shape1's cover shape2, same as shape2 covered by shape1\r\n * @param shape1\r\n * @param shape2\r\n * @returns {boolean}\r\n */\r\nfunction cover(shape1, shape2) {\r\n    return covered(shape2, shape1);\r\n}\r\n\r\n/**\r\n * Returns relation between two shapes as intersection 3x3 matrix, where each\r\n * element contains relevant intersection as array of shapes.\r\n * If there is no intersection, element contains empty array\r\n * If intersection is irrelevant it left undefined. (For example, intersection\r\n * between two exteriors is usually irrelevant)\r\n * @param shape1\r\n * @param shape2\r\n * @returns {DE9IM}\r\n */\r\nfunction relate(shape1, shape2) {\r\n    if (shape1 instanceof Flatten.Line && shape2 instanceof Flatten.Line) {\r\n        return relateLine2Line(shape1,  shape2);\r\n    }\r\n    else if (shape1 instanceof Flatten.Line && shape2 instanceof Flatten.Circle) {\r\n        return relateLine2Circle(shape1, shape2);\r\n    }\r\n    else if (shape1 instanceof Flatten.Line && shape2 instanceof Flatten.Box) {\r\n        return relateLine2Box(shape1, shape2);\r\n    }\r\n    else if ( shape1 instanceof Flatten.Line  && shape2 instanceof Flatten.Polygon) {\r\n        return relateLine2Polygon(shape1, shape2);\r\n    }\r\n    else if ( (shape1 instanceof Flatten.Segment || shape1 instanceof Flatten.Arc)  && shape2 instanceof Flatten.Polygon) {\r\n        return relateShape2Polygon(shape1, shape2);\r\n    }\r\n    else if ( (shape1 instanceof Flatten.Segment || shape1 instanceof Flatten.Arc)  &&\r\n        (shape2 instanceof Flatten.Circle || shape2 instanceof Flatten.Box) ) {\r\n        return relateShape2Polygon(shape1, new Flatten.Polygon(shape2));\r\n    }\r\n    else if (shape1 instanceof Flatten.Polygon && shape2 instanceof Flatten.Polygon) {\r\n        return relatePolygon2Polygon(shape1, shape2);\r\n    }\r\n    else if ((shape1 instanceof Flatten.Circle || shape1 instanceof Flatten.Box) &&\r\n        (shape2 instanceof  Flatten.Circle || shape2 instanceof Flatten.Box)) {\r\n        return relatePolygon2Polygon(new Flatten.Polygon(shape1), new Flatten.Polygon(shape2));\r\n    }\r\n    else if ((shape1 instanceof Flatten.Circle || shape1 instanceof Flatten.Box) && shape2 instanceof Flatten.Polygon) {\r\n        return relatePolygon2Polygon(new Flatten.Polygon(shape1), shape2);\r\n    }\r\n    else if (shape1 instanceof Flatten.Polygon && (shape2 instanceof Flatten.Circle || shape2 instanceof Flatten.Box)) {\r\n        return relatePolygon2Polygon(shape1, new Flatten.Polygon(shape2));\r\n    }\r\n}\r\n\r\nfunction relateLine2Line(line1, line2) {\r\n    let denim = new DE9IM();\r\n    let ip = intersectLine2Line(line1, line2);\r\n    if (ip.length === 0) {       // parallel or equal ?\r\n        if (line1.contains(line2.pt) && line2.contains(line1.pt)) {\r\n            denim.I2I = [line1];   // equal  'T.F...F..'  - no boundary\r\n            denim.I2E = [];\r\n            denim.E2I = [];\r\n        }\r\n        else {                     // parallel - disjoint 'FFTFF*T**'\r\n            denim.I2I = [];\r\n            denim.I2E = [line1];\r\n            denim.E2I = [line2];\r\n        }\r\n    }\r\n    else {                       // intersect   'T********'\r\n        denim.I2I = ip;\r\n        denim.I2E = line1.split(ip);\r\n        denim.E2I = line2.split(ip);\r\n    }\r\n    return denim;\r\n}\r\n\r\nfunction relateLine2Circle(line,circle) {\r\n    let denim = new DE9IM();\r\n    let ip = intersectLine2Circle(line, circle);\r\n    if (ip.length === 0) {\r\n        denim.I2I = [];\r\n        denim.I2B = [];\r\n        denim.I2E = [line];\r\n        denim.E2I = [circle];\r\n    }\r\n    else if (ip.length === 1) {\r\n        denim.I2I = [];\r\n        denim.I2B = ip;\r\n        denim.I2E = line.split(ip);\r\n\r\n        denim.E2I = [circle];\r\n    }\r\n    else {       // ip.length == 2\r\n        let multiline = new Multiline$1([line]);\r\n        let ip_sorted = line.sortPoints(ip);\r\n        multiline.split(ip_sorted);\r\n        let splitShapes = multiline.toShapes();\r\n\r\n        denim.I2I = [splitShapes[1]];\r\n        denim.I2B = ip_sorted;\r\n        denim.I2E = [splitShapes[0], splitShapes[2]];\r\n\r\n        denim.E2I = new Flatten.Polygon([circle.toArc()]).cutWithLine(line);\r\n    }\r\n\r\n    return denim;\r\n}\r\n\r\nfunction relateLine2Box(line, box) {\r\n    let denim = new DE9IM();\r\n    let ip = intersectLine2Box(line, box);\r\n    if (ip.length === 0) {\r\n        denim.I2I = [];\r\n        denim.I2B = [];\r\n        denim.I2E = [line];\r\n\r\n        denim.E2I = [box];\r\n    }\r\n    else if (ip.length === 1) {\r\n        denim.I2I = [];\r\n        denim.I2B = ip;\r\n        denim.I2E = line.split(ip);\r\n\r\n        denim.E2I = [box];\r\n    }\r\n    else {                     // ip.length == 2\r\n        let multiline = new Multiline$1([line]);\r\n        let ip_sorted = line.sortPoints(ip);\r\n        multiline.split(ip_sorted);\r\n        let splitShapes = multiline.toShapes();\r\n\r\n        /* Are two intersection points on the same segment of the box boundary ? */\r\n        if (box.toSegments().some( segment => segment.contains(ip[0]) && segment.contains(ip[1]) )) {\r\n            denim.I2I = [];                         // case of touching\r\n            denim.I2B = [splitShapes[1]];\r\n            denim.I2E = [splitShapes[0], splitShapes[2]];\r\n\r\n            denim.E2I = [box];\r\n        }\r\n        else {                                       // case of intersection\r\n            denim.I2I = [splitShapes[1]];            // [segment(ip[0], ip[1])];\r\n            denim.I2B = ip_sorted;\r\n            denim.I2E = [splitShapes[0], splitShapes[2]];\r\n\r\n            denim.E2I = new Flatten.Polygon(box.toSegments()).cutWithLine(line);\r\n        }\r\n    }\r\n    return denim;\r\n}\r\n\r\nfunction relateLine2Polygon(line, polygon) {\r\n    let denim = new DE9IM();\r\n    let ip = intersectLine2Polygon(line, polygon);\r\n    let multiline = new Multiline$1([line]);\r\n    let ip_sorted = ip.length > 0 ? ip.slice() : line.sortPoints(ip);\r\n\r\n    multiline.split(ip_sorted);\r\n\r\n    [...multiline].forEach(edge => edge.setInclusion(polygon));\r\n\r\n    denim.I2I = [...multiline].filter(edge => edge.bv === Flatten.INSIDE).map(edge => edge.shape);\r\n    denim.I2B = [...multiline].slice(1).map( (edge) => edge.bv === Flatten.BOUNDARY ? edge.shape : edge.shape.start );\r\n    denim.I2E = [...multiline].filter(edge => edge.bv === Flatten.OUTSIDE).map(edge => edge.shape);\r\n\r\n    denim.E2I = polygon.cutWithLine(line);\r\n\r\n    return denim;\r\n}\r\n\r\nfunction relateShape2Polygon(shape, polygon) {\r\n    let denim = new DE9IM();\r\n    let ip = intersectShape2Polygon(shape, polygon);\r\n    let ip_sorted = ip.length > 0 ? ip.slice() : shape.sortPoints(ip);\r\n\r\n    let multiline = new Multiline$1([shape]);\r\n    multiline.split(ip_sorted);\r\n\r\n    [...multiline].forEach(edge => edge.setInclusion(polygon));\r\n\r\n    denim.I2I = [...multiline].filter(edge => edge.bv === Flatten.INSIDE).map(edge => edge.shape);\r\n    denim.I2B = [...multiline].slice(1).map( (edge) => edge.bv === Flatten.BOUNDARY ? edge.shape : edge.shape.start );\r\n    denim.I2E = [...multiline].filter(edge => edge.bv === Flatten.OUTSIDE).map(edge => edge.shape);\r\n\r\n\r\n    denim.B2I = [];\r\n    denim.B2B = [];\r\n    denim.B2E = [];\r\n    for (let pt of [shape.start, shape.end]) {\r\n        switch (ray_shoot(polygon, pt)) {\r\n            case Flatten.INSIDE:\r\n                denim.B2I.push(pt);\r\n                break;\r\n            case Flatten.BOUNDARY:\r\n                denim.B2B.push(pt);\r\n                break;\r\n            case Flatten.OUTSIDE:\r\n                denim.B2E.push(pt);\r\n                break;\r\n        }\r\n    }\r\n\r\n    // denim.E2I  TODO: calculate, not clear what is expected result\r\n\r\n    return denim;\r\n}\r\n\r\nfunction relatePolygon2Polygon(polygon1, polygon2) {\r\n    let denim = new DE9IM();\r\n\r\n    let [ip_sorted1, ip_sorted2] = calculateIntersections(polygon1, polygon2);\r\n    let boolean_intersection = intersect$1(polygon1, polygon2);\r\n    let boolean_difference1 = subtract(polygon1, polygon2);\r\n    let boolean_difference2 = subtract(polygon2, polygon1);\r\n    let [inner_clip_shapes1, inner_clip_shapes2] = innerClip(polygon1, polygon2);\r\n    let outer_clip_shapes1 = outerClip(polygon1, polygon2);\r\n    let outer_clip_shapes2 = outerClip(polygon2, polygon1);\r\n\r\n    denim.I2I = boolean_intersection.isEmpty() ? [] : [boolean_intersection];\r\n    denim.I2B = inner_clip_shapes2;\r\n    denim.I2E = boolean_difference1.isEmpty() ? [] : [boolean_difference1];\r\n\r\n    denim.B2I = inner_clip_shapes1;\r\n    denim.B2B = ip_sorted1;\r\n    denim.B2E = outer_clip_shapes1;\r\n\r\n    denim.E2I = boolean_difference2.isEmpty() ? [] : [boolean_difference2];\r\n    denim.E2B = outer_clip_shapes2;\r\n    // denim.E2E    not relevant meanwhile\r\n\r\n    return denim;\r\n}\r\n\r\nvar Relations = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    contain: contain,\r\n    cover: cover,\r\n    covered: covered,\r\n    disjoint: disjoint,\r\n    equal: equal,\r\n    inside: inside,\r\n    intersect: intersect,\r\n    relate: relate,\r\n    touch: touch\r\n});\r\n\r\n/**\r\n * Class representing an affine transformation 3x3 matrix:\r\n * <pre>\r\n *      [ a  c  tx\r\n * A =    b  d  ty\r\n *        0  0  1  ]\r\n * </pre\r\n * @type {Matrix}\r\n */\r\nclass Matrix {\r\n    /**\r\n     * Construct new instance of affine transformation matrix <br/>\r\n     * If parameters omitted, construct identity matrix a = 1, d = 1\r\n     * @param {number} a - position(0,0)   sx*cos(alpha)\r\n     * @param {number} b - position (0,1)  sx*sin(alpha)\r\n     * @param {number} c - position (1,0)  -sy*sin(alpha)\r\n     * @param {number} d - position (1,1)  sy*cos(alpha)\r\n     * @param {number} tx - position (2,0) translation by x\r\n     * @param {number} ty - position (2,1) translation by y\r\n     */\r\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.tx = tx;\r\n        this.ty = ty;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of matrix\r\n     * @return {Matrix}\r\n     **/\r\n    clone() {\r\n        return new Matrix(this.a, this.b, this.c, this.d, this.tx, this.ty);\r\n    };\r\n\r\n    /**\r\n     * Transform vector [x,y] using transformation matrix. <br/>\r\n     * Vector [x,y] is an abstract array[2] of numbers and not a FlattenJS object <br/>\r\n     * The result is also an abstract vector [x',y'] = A * [x,y]:\r\n     * <code>\r\n     * [x'       [ ax + by + tx\r\n     *  y'   =     cx + dy + ty\r\n     *  1]                    1 ]\r\n     * </code>\r\n     * @param {number[]} vector - array[2] of numbers\r\n     * @returns {number[]} transformation result - array[2] of numbers\r\n     */\r\n    transform(vector) {\r\n        return [\r\n            vector[0] * this.a + vector[1] * this.c + this.tx,\r\n            vector[0] * this.b + vector[1] * this.d + this.ty\r\n        ]\r\n    };\r\n\r\n    /**\r\n     * Returns result of multiplication of this matrix by other matrix\r\n     * @param {Matrix} other_matrix - matrix to multiply by\r\n     * @returns {Matrix}\r\n     */\r\n    multiply(other_matrix) {\r\n        return new Matrix(\r\n            this.a * other_matrix.a + this.c * other_matrix.b,\r\n            this.b * other_matrix.a + this.d * other_matrix.b,\r\n            this.a * other_matrix.c + this.c * other_matrix.d,\r\n            this.b * other_matrix.c + this.d * other_matrix.d,\r\n            this.a * other_matrix.tx + this.c * other_matrix.ty + this.tx,\r\n            this.b * other_matrix.tx + this.d * other_matrix.ty + this.ty\r\n        )\r\n    };\r\n\r\n    /**\r\n     * Return new matrix as a result of multiplication of the current matrix\r\n     * by the matrix(1,0,0,1,tx,ty)\r\n     * @param {Vector} vector - Translation by vector or\r\n     * @param {number} tx - translation by x-axis\r\n     * @param {number} ty - translation by y-axis\r\n     * @returns {Matrix}\r\n     */\r\n    translate(...args) {\r\n        let tx, ty;\r\n        if (args.length == 1 &&  !isNaN(args[0].x) && !isNaN(args[0].y)) {\r\n            tx = args[0].x;\r\n            ty = args[0].y;\r\n        } else if (args.length === 2 && typeof (args[0]) == \"number\" && typeof (args[1]) == \"number\") {\r\n            tx = args[0];\r\n            ty = args[1];\r\n        } else {\r\n            throw Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n        return this.multiply(new Matrix(1, 0, 0, 1, tx, ty))\r\n    };\r\n\r\n    /**\r\n     * Return new matrix as a result of multiplication of the current matrix\r\n     * by the matrix that defines rotation by given angle (in radians) around\r\n     * center of rotation (centerX,centerY) in counterclockwise direction\r\n     * @param {number} angle - angle in radians\r\n     * @param {number} centerX - center of rotation\r\n     * @param {number} centerY - center of rotation\r\n     * @returns {Matrix}\r\n     */\r\n    rotate(angle, centerX = 0.0, centerY = 0.0) {\r\n        let cos = Math.cos(angle);\r\n        let sin = Math.sin(angle);\r\n        return this\r\n            .translate(centerX, centerY)\r\n            .multiply(new Matrix(cos, sin, -sin, cos, 0, 0))\r\n            .translate(-centerX, -centerY);\r\n    };\r\n\r\n    /**\r\n     * Return new matrix as a result of multiplication of the current matrix\r\n     * by the matrix (sx,0,0,sy,0,0) that defines scaling\r\n     * @param {number} sx\r\n     * @param {number} sy\r\n     * @returns {Matrix}\r\n     */\r\n    scale(sx, sy) {\r\n        return this.multiply(new Matrix(sx, 0, 0, sy, 0, 0));\r\n    };\r\n\r\n    /**\r\n     * Returns true if two matrix are equal parameter by parameter\r\n     * @param {Matrix} matrix - other matrix\r\n     * @returns {boolean} true if equal, false otherwise\r\n     */\r\n    equalTo(matrix) {\r\n        if (!Flatten.Utils.EQ(this.tx, matrix.tx)) return false;\r\n        if (!Flatten.Utils.EQ(this.ty, matrix.ty)) return false;\r\n        if (!Flatten.Utils.EQ(this.a, matrix.a)) return false;\r\n        if (!Flatten.Utils.EQ(this.b, matrix.b)) return false;\r\n        if (!Flatten.Utils.EQ(this.c, matrix.c)) return false;\r\n        if (!Flatten.Utils.EQ(this.d, matrix.d)) return false;\r\n        return true;\r\n    };\r\n}\r\nFlatten.Matrix = Matrix;\r\n/**\r\n * Function to create matrix equivalent to \"new\" constructor\r\n * @param args\r\n */\r\nconst matrix = (...args) => new Flatten.Matrix(...args);\r\nFlatten.matrix = matrix;\r\n\r\n/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n/**\r\n * Interval is a pair of numbers or a pair of any comparable objects on which may be defined predicates\r\n * *equal*, *less* and method *max(p1, p1)* that returns maximum in a pair.\r\n * When interval is an object rather than pair of numbers, this object should have properties *low*, *high*, *max*\r\n * and implement methods *less_than(), equal_to(), intersect(), not_intersect(), clone(), output()*.\r\n * Two static methods *comparable_max(), comparable_less_than()* define how to compare values in pair. <br/>\r\n * This interface is described in typescript definition file *index.d.ts*\r\n *\r\n * Axis aligned rectangle is an example of such interval.\r\n * We may look at rectangle as an interval between its low left and top right corners.\r\n * See **Box** class in [flatten-js](https://github.com/alexbol99/flatten-js) library as the example\r\n * of Interval interface implementation\r\n * @type {Interval}\r\n */\r\nconst Interval = class Interval {\r\n    /**\r\n     * Accept two comparable values and creates new instance of interval\r\n     * Predicate Interval.comparable_less(low, high) supposed to return true on these values\r\n     * @param low\r\n     * @param high\r\n     */\r\n    constructor(low, high) {\r\n        this.low = low;\r\n        this.high = high;\r\n    }\r\n\r\n    /**\r\n     * Clone interval\r\n     * @returns {Interval}\r\n     */\r\n    clone() {\r\n        return new Interval(this.low, this.high);\r\n    }\r\n\r\n    /**\r\n     * Propery max returns clone of this interval\r\n     * @returns {Interval}\r\n     */\r\n    get max() {\r\n        return this.clone();   // this.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true is this interval less than other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    less_than(other_interval) {\r\n        return this.low < other_interval.low ||\r\n            this.low == other_interval.low && this.high < other_interval.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true is this interval equals to other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    equal_to(other_interval) {\r\n        return this.low == other_interval.low && this.high == other_interval.high;\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if this interval intersects other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    intersect(other_interval) {\r\n        return !this.not_intersect(other_interval);\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if this interval does not intersect other interval\r\n     * @param other_interval\r\n     * @returns {boolean}\r\n     */\r\n    not_intersect(other_interval) {\r\n        return (this.high < other_interval.low || other_interval.high < this.low);\r\n    }\r\n\r\n    /**\r\n     * Returns new interval merged with other interval\r\n     * @param {Interval} interval - Other interval to merge with\r\n     * @returns {Interval}\r\n     */\r\n    merge(other_interval) {\r\n        return new Interval(\r\n            this.low === undefined ? other_interval.low : Math.min(this.low, other_interval.low),\r\n            this.high === undefined ? other_interval.high : Math.max(this.high, other_interval.high)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns how key should return\r\n     */\r\n    output() {\r\n        return [this.low, this.high];\r\n    }\r\n\r\n    /**\r\n     * Function returns maximum between two comparable values\r\n     * @param interval1\r\n     * @param interval2\r\n     * @returns {Interval}\r\n     */\r\n    static comparable_max(interval1, interval2) {\r\n        return interval1.merge(interval2);\r\n    }\r\n\r\n    /**\r\n     * Predicate returns true if first value less than second value\r\n     * @param val1\r\n     * @param val2\r\n     * @returns {boolean}\r\n     */\r\n    static comparable_less_than(val1, val2 ) {\r\n        return val1 < val2;\r\n    }\r\n};\r\n\r\n/**\r\n * Created by Alex Bol on 3/28/2017.\r\n */\r\n\r\n\r\n// module.exports = {\r\n//     RB_TREE_COLOR_RED: 0,\r\n//     RB_TREE_COLOR_BLACK: 1\r\n// };\r\n\r\nconst RB_TREE_COLOR_RED = 0;\r\nconst RB_TREE_COLOR_BLACK = 1;\r\n\r\n/**\r\n * Created by Alex Bol on 4/1/2017.\r\n */\r\n\r\n\r\nclass Node {\r\n    constructor(key = undefined, value = undefined,\r\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\r\n        this.left = left;                     // reference to left child node\r\n        this.right = right;                   // reference to right child node\r\n        this.parent = parent;                 // reference to parent node\r\n        this.color = color;\r\n\r\n        this.item = {key: key, value: value};   // key is supposed to be instance of Interval\r\n\r\n        /* If not, this should by an array of two numbers */\r\n        if (key && key instanceof Array && key.length == 2) {\r\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\r\n                this.item.key = new Interval(Math.min(key[0], key[1]), Math.max(key[0], key[1]));\r\n            }\r\n        }\r\n\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n    }\r\n\r\n    isNil() {\r\n        return (this.item.key === undefined && this.item.value === undefined &&\r\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\r\n    }\r\n\r\n    _value_less_than(other_node) {\r\n        return this.item.value && other_node.item.value && this.item.value.less_than ?\r\n            this.item.value.less_than(other_node.item.value) :\r\n            this.item.value < other_node.item.value;\r\n    }\r\n\r\n    less_than(other_node) {\r\n        // if tree stores only keys\r\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\r\n            return this.item.key.less_than(other_node.item.key);\r\n        }\r\n        else {    // if tree stores keys and values\r\n            return this.item.key.less_than(other_node.item.key) ||\r\n                this.item.key.equal_to((other_node.item.key)) && this._value_less_than(other_node)\r\n        }\r\n    }\r\n\r\n    _value_equal(other_node) {\r\n        return this.item.value && other_node.item.value && this.item.value.equal_to ?\r\n            this.item.value.equal_to(other_node.item.value) :\r\n            this.item.value == other_node.item.value;\r\n    }\r\n    equal_to(other_node) {\r\n        // if tree stores only keys\r\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\r\n            return this.item.key.equal_to(other_node.item.key);\r\n        }\r\n        else {    // if tree stores keys and values\r\n            return this.item.key.equal_to(other_node.item.key) && this._value_equal(other_node);\r\n        }\r\n    }\r\n\r\n    intersect(other_node) {\r\n        return this.item.key.intersect(other_node.item.key);\r\n    }\r\n\r\n    copy_data(other_node) {\r\n        this.item.key = other_node.item.key;\r\n        this.item.value = other_node.item.value;\r\n    }\r\n\r\n    update_max() {\r\n        // use key (Interval) max property instead of key.high\r\n        this.max = this.item.key ? this.item.key.max : undefined;\r\n        if (this.right && this.right.max) {\r\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\r\n            this.max = comparable_max(this.max, this.right.max);\r\n        }\r\n        if (this.left && this.left.max) {\r\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\r\n            this.max = comparable_max(this.max, this.left.max);\r\n        }\r\n    }\r\n\r\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\r\n    not_intersect_left_subtree(search_node) {\r\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\r\n        let high = this.left.max.high !== undefined ? this.left.max.high : this.left.max;\r\n        return comparable_less_than(high, search_node.item.key.low);\r\n    }\r\n\r\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\r\n    not_intersect_right_subtree(search_node) {\r\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\r\n        let low = this.right.max.low !== undefined ? this.right.max.low : this.right.item.key.low;\r\n        return comparable_less_than(search_node.item.key.high, low);\r\n    }\r\n}\r\n\r\n/**\r\n * Created by Alex Bol on 3/31/2017.\r\n */\r\n\r\n// const nil_node = new Node();\r\n\r\n/**\r\n * Implementation of interval binary search tree <br/>\r\n * Interval tree stores items which are couples of {key:interval, value: value} <br/>\r\n * Interval is an object with high and low properties or simply pair [low,high] of numeric values <br />\r\n * @type {IntervalTree}\r\n */\r\nclass IntervalTree {\r\n    /**\r\n     * Construct new empty instance of IntervalTree\r\n     */\r\n    constructor() {\r\n        this.root = null;\r\n        this.nil_node = new Node();\r\n    }\r\n\r\n    /**\r\n     * Returns number of items stored in the interval tree\r\n     * @returns {number}\r\n     */\r\n    get size() {\r\n        let count = 0;\r\n        this.tree_walk(this.root, () => count++);\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Returns array of sorted keys in the ascending order\r\n     * @returns {Array}\r\n     */\r\n    get keys() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(\r\n            node.item.key.output ? node.item.key.output() : node.item.key\r\n        ));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Return array of values in the ascending keys order\r\n     * @returns {Array}\r\n     */\r\n    get values() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push(node.item.value));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns array of items (<key,value> pairs) in the ascended keys order\r\n     * @returns {Array}\r\n     */\r\n    get items() {\r\n        let res = [];\r\n        this.tree_walk(this.root, (node) => res.push({\r\n            key: node.item.key.output ? node.item.key.output() : node.item.key,\r\n            value: node.item.value\r\n        }));\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Returns true if tree is empty\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return (this.root == null || this.root == this.nil_node);\r\n    }\r\n\r\n    /**\r\n     * Clear tree\r\n     */\r\n    clear() {\r\n        this.root = null;\r\n    }\r\n\r\n    /**\r\n     * Insert new item into interval tree\r\n     * @param {Interval} key - interval object or array of two numbers [low, high]\r\n     * @param {any} value - value representing any object (optional)\r\n     * @returns {Node} returns reference to inserted node as an object {key:interval, value: value}\r\n     */\r\n    insert(key, value = key) {\r\n        if (key === undefined) return;\r\n        let insert_node = new Node(key, value, this.nil_node, this.nil_node, null, RB_TREE_COLOR_RED);\r\n        this.tree_insert(insert_node);\r\n        this.recalc_max(insert_node);\r\n        return insert_node;\r\n    }\r\n\r\n    /**\r\n     * Returns true if item {key,value} exist in the tree\r\n     * @param {Interval} key - interval correspondent to keys stored in the tree\r\n     * @param {any} value - value object to be checked\r\n     * @returns {boolean} true if item {key, value} exist in the tree, false otherwise\r\n     */\r\n    exist(key, value = key) {\r\n        let search_node = new Node(key, value);\r\n        return this.tree_search(this.root, search_node) ? true : false;\r\n    }\r\n\r\n    /**\r\n     * Remove entry {key, value} from the tree\r\n     * @param {Interval} key - interval correspondent to keys stored in the tree\r\n     * @param {any} value - value object\r\n     * @returns {boolean} true if item {key, value} deleted, false if not found\r\n     */\r\n    remove(key, value = key) {\r\n        let search_node = new Node(key, value);\r\n        let delete_node = this.tree_search(this.root, search_node);\r\n        if (delete_node) {\r\n            this.tree_delete(delete_node);\r\n        }\r\n        return delete_node;\r\n    }\r\n\r\n    /**\r\n     * Returns array of entry values which keys intersect with given interval <br/>\r\n     * If no values stored in the tree, returns array of keys which intersect given interval\r\n     * @param {Interval} interval - search interval, or tuple [low, high]\r\n     * @param outputMapperFn(value,key) - optional function that maps (value, key) to custom output\r\n     * @returns {Array}\r\n     */\r\n    search(interval, outputMapperFn = (value, key) => value === key ? key.output() : value) {\r\n        let search_node = new Node(interval);\r\n        let resp_nodes = [];\r\n        this.tree_search_interval(this.root, search_node, resp_nodes);\r\n        return resp_nodes.map(node => outputMapperFn(node.item.value, node.item.key))\r\n    }\r\n\r\n    /**\r\n     * Returns true if intersection between given and any interval stored in the tree found\r\n     * @param {Interval} interval - search interval or tuple [low, high]\r\n     * @returns {boolean}\r\n     */\r\n    intersect_any(interval) {\r\n        let search_node = new Node(interval);\r\n        let found = this.tree_find_any_interval(this.root, search_node);\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * Tree visitor. For each node implement a callback function. <br/>\r\n     * Method calls a callback function with two parameters (key, value)\r\n     * @param visitor(key,value) - function to be called for each tree item\r\n     */\r\n    forEach(visitor) {\r\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\r\n    }\r\n\r\n    /** Value Mapper. Walk through every node and map node value to another value\r\n    * @param callback(value,key) - function to be called for each tree item\r\n    */\r\n    map(callback) {\r\n        const tree = new IntervalTree();\r\n        this.tree_walk(this.root, (node) => tree.insert(node.item.key, callback(node.item.value, node.item.key)));\r\n        return tree;\r\n    }\r\n\r\n    recalc_max(node) {\r\n        let node_current = node;\r\n        while (node_current.parent != null) {\r\n            node_current.parent.update_max();\r\n            node_current = node_current.parent;\r\n        }\r\n    }\r\n\r\n    tree_insert(insert_node) {\r\n        let current_node = this.root;\r\n        let parent_node = null;\r\n\r\n        if (this.root == null || this.root == this.nil_node) {\r\n            this.root = insert_node;\r\n        }\r\n        else {\r\n            while (current_node != this.nil_node) {\r\n                parent_node = current_node;\r\n                if (insert_node.less_than(current_node)) {\r\n                    current_node = current_node.left;\r\n                }\r\n                else {\r\n                    current_node = current_node.right;\r\n                }\r\n            }\r\n\r\n            insert_node.parent = parent_node;\r\n\r\n            if (insert_node.less_than(parent_node)) {\r\n                parent_node.left = insert_node;\r\n            }\r\n            else {\r\n                parent_node.right = insert_node;\r\n            }\r\n        }\r\n\r\n        this.insert_fixup(insert_node);\r\n    }\r\n\r\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\r\n// Go upwords to the root and re-color until violation will be resolved\r\n    insert_fixup(insert_node) {\r\n        let current_node;\r\n        let uncle_node;\r\n\r\n        current_node = insert_node;\r\n        while (current_node != this.root && current_node.parent.color == RB_TREE_COLOR_RED) {\r\n            if (current_node.parent == current_node.parent.parent.left) {   // parent is left child of grandfather\r\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {                                                    // Case 2 & 3. Uncle is black\r\n                    if (current_node == current_node.parent.right) {     // Case 2. Current if right child\r\n                        // This case is transformed into Case 3.\r\n                        current_node = current_node.parent;\r\n                        this.rotate_left(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\r\n                    // Re-color father and grandfather, rotate grandfather right\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_right(current_node.parent.parent);\r\n                }\r\n            }\r\n            else {                                                         // parent is right child of grandfather\r\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\r\n                if (uncle_node.color == RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\r\n                    // re-color father and uncle into black\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    current_node = current_node.parent.parent;\r\n                }\r\n                else {\r\n                    if (current_node == current_node.parent.left) {             // Case 5. Current is left child\r\n                        // Transform into case 6\r\n                        current_node = current_node.parent;\r\n                        this.rotate_right(current_node);\r\n                    }\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\r\n                    // Re-color father and grandfather, rotate grandfather left\r\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\r\n                    this.rotate_left(current_node.parent.parent);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.root.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_delete(delete_node) {\r\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\r\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\r\n\r\n        if (delete_node.left == this.nil_node || delete_node.right == this.nil_node) {  // delete_node has less then 2 children\r\n            cut_node = delete_node;\r\n        }\r\n        else {                                                    // delete_node has 2 children\r\n            cut_node = this.tree_successor(delete_node);\r\n        }\r\n\r\n        // fix_node if single child of cut_node\r\n        if (cut_node.left != this.nil_node) {\r\n            fix_node = cut_node.left;\r\n        }\r\n        else {\r\n            fix_node = cut_node.right;\r\n        }\r\n\r\n        // remove cut_node from parent\r\n        /*if (fix_node != this.nil_node) {*/\r\n            fix_node.parent = cut_node.parent;\r\n        /*}*/\r\n\r\n        if (cut_node == this.root) {\r\n            this.root = fix_node;\r\n        }\r\n        else {\r\n            if (cut_node == cut_node.parent.left) {\r\n                cut_node.parent.left = fix_node;\r\n            }\r\n            else {\r\n                cut_node.parent.right = fix_node;\r\n            }\r\n            cut_node.parent.update_max();        // update max property of the parent\r\n        }\r\n\r\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\r\n\r\n        // COPY DATA !!!\r\n        // Delete_node becomes cut_node, it means that we cannot hold reference\r\n        // to node in outer structure and we will have to delete by key, additional search need\r\n        if (cut_node != delete_node) {\r\n            delete_node.copy_data(cut_node);\r\n            delete_node.update_max();           // update max property of the cut node at the new place\r\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\r\n        }\r\n\r\n        if (/*fix_node != this.nil_node && */cut_node.color == RB_TREE_COLOR_BLACK) {\r\n            this.delete_fixup(fix_node);\r\n        }\r\n    }\r\n\r\n    delete_fixup(fix_node) {\r\n        let current_node = fix_node;\r\n        let brother_node;\r\n\r\n        while (current_node != this.root && current_node.parent != null && current_node.color == RB_TREE_COLOR_BLACK) {\r\n            if (current_node == current_node.parent.left) {          // fix node is left child\r\n                brother_node = current_node.parent.right;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_left(current_node.parent);\r\n                    brother_node = current_node.parent.right;                      // update brother\r\n                }\r\n                // Derive to cases 2..4: brother is black\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\r\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\r\n                    current_node = current_node.parent;                  // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\r\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\r\n                        this.rotate_right(brother_node);\r\n                        brother_node = current_node.parent.right;                     // update brother\r\n                        // Derive to case 4: left nephew black, right nephew red\r\n                    }\r\n                    // case 4: left nephew black, right nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_left(current_node.parent);\r\n                    current_node = this.root;                         // exit from loop\r\n                }\r\n            }\r\n            else {                                             // fix node is right child\r\n                brother_node = current_node.parent.left;\r\n                if (brother_node.color == RB_TREE_COLOR_RED) {   // Case 1. Brother is red\r\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\r\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\r\n                    this.rotate_right(current_node.parent);\r\n                    brother_node = current_node.parent.left;                        // update brother\r\n                }\r\n                // Go to cases 2..4\r\n                if (brother_node.left.color == RB_TREE_COLOR_BLACK &&\r\n                    brother_node.right.color == RB_TREE_COLOR_BLACK) {   // case 2\r\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\r\n                    current_node = current_node.parent;                              // continue iteration\r\n                }\r\n                else {\r\n                    if (brother_node.left.color == RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\r\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\r\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\r\n                        this.rotate_left(brother_node);\r\n                        brother_node = current_node.parent.left;                        // update brother\r\n                        // Derive to case 4: right nephew black, left nephew red\r\n                    }\r\n                    // case 4: right nephew black, left nephew red\r\n                    brother_node.color = current_node.parent.color;\r\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\r\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\r\n                    this.rotate_right(current_node.parent);\r\n                    current_node = this.root;                               // force exit from loop\r\n                }\r\n            }\r\n        }\r\n\r\n        current_node.color = RB_TREE_COLOR_BLACK;\r\n    }\r\n\r\n    tree_search(node, search_node) {\r\n        if (node == null || node == this.nil_node)\r\n            return undefined;\r\n\r\n        if (search_node.equal_to(node)) {\r\n            return node;\r\n        }\r\n        if (search_node.less_than(node)) {\r\n            return this.tree_search(node.left, search_node);\r\n        }\r\n        else {\r\n            return this.tree_search(node.right, search_node);\r\n        }\r\n    }\r\n\r\n    // Original search_interval method; container res support push() insertion\r\n    // Search all intervals intersecting given one\r\n    tree_search_interval(node, search_node, res) {\r\n        if (node != null && node != this.nil_node) {\r\n            // if (node->left != this.nil_node && node->left->max >= low) {\r\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                this.tree_search_interval(node.left, search_node, res);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (node.intersect(search_node)) {\r\n                res.push(node);\r\n            }\r\n            // if (node->right != this.nil_node && node->low <= high) {\r\n            if (node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                this.tree_search_interval(node.right, search_node, res);\r\n            }\r\n        }\r\n    }\r\n\r\n    tree_find_any_interval(node, search_node) {\r\n        let found = false;\r\n        if (node != null && node != this.nil_node) {\r\n            // if (node->left != this.nil_node && node->left->max >= low) {\r\n            if (node.left != this.nil_node && !node.not_intersect_left_subtree(search_node)) {\r\n                found = this.tree_find_any_interval(node.left, search_node);\r\n            }\r\n            // if (low <= node->high && node->low <= high) {\r\n            if (!found) {\r\n                found = node.intersect(search_node);\r\n            }\r\n            // if (node->right != this.nil_node && node->low <= high) {\r\n            if (!found && node.right != this.nil_node && !node.not_intersect_right_subtree(search_node)) {\r\n                found = this.tree_find_any_interval(node.right, search_node);\r\n            }\r\n        }\r\n        return found;\r\n    }\r\n\r\n    local_minimum(node) {\r\n        let node_min = node;\r\n        while (node_min.left != null && node_min.left != this.nil_node) {\r\n            node_min = node_min.left;\r\n        }\r\n        return node_min;\r\n    }\r\n\r\n    // not in use\r\n    local_maximum(node) {\r\n        let node_max = node;\r\n        while (node_max.right != null && node_max.right != this.nil_node) {\r\n            node_max = node_max.right;\r\n        }\r\n        return node_max;\r\n    }\r\n\r\n    tree_successor(node) {\r\n        let node_successor;\r\n        let current_node;\r\n        let parent_node;\r\n\r\n        if (node.right != this.nil_node) {\r\n            node_successor = this.local_minimum(node.right);\r\n        }\r\n        else {\r\n            current_node = node;\r\n            parent_node = node.parent;\r\n            while (parent_node != null && parent_node.right == current_node) {\r\n                current_node = parent_node;\r\n                parent_node = parent_node.parent;\r\n            }\r\n            node_successor = parent_node;\r\n        }\r\n        return node_successor;\r\n    }\r\n\r\n    //           |            right-rotate(T,y)       |\r\n    //           y            ---------------.       x\r\n    //          / \\                                  / \\\r\n    //         x   c          left-rotate(T,x)      a   y\r\n    //        / \\             <---------------         / \\\r\n    //       a   b                                    b   c\r\n\r\n    rotate_left(x) {\r\n        let y = x.right;\r\n\r\n        x.right = y.left;           // b goes to x.right\r\n\r\n        if (y.left != this.nil_node) {\r\n            y.left.parent = x;     // x becomes parent of b\r\n        }\r\n        y.parent = x.parent;       // move parent\r\n\r\n        if (x == this.root) {\r\n            this.root = y;           // y becomes root\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (x == x.parent.left) {\r\n                x.parent.left = y;\r\n            }\r\n            else {\r\n                x.parent.right = y;\r\n            }\r\n        }\r\n        y.left = x;                 // x becomes left child of y\r\n        x.parent = y;               // and y becomes parent of x\r\n\r\n        if (x != null && x != this.nil_node) {\r\n            x.update_max();\r\n        }\r\n\r\n        y = x.parent;\r\n        if (y != null && y != this.nil_node) {\r\n            y.update_max();\r\n        }\r\n    }\r\n\r\n    rotate_right(y) {\r\n        let x = y.left;\r\n\r\n        y.left = x.right;           // b goes to y.left\r\n\r\n        if (x.right != this.nil_node) {\r\n            x.right.parent = y;        // y becomes parent of b\r\n        }\r\n        x.parent = y.parent;          // move parent\r\n\r\n        if (y == this.root) {        // x becomes root\r\n            this.root = x;\r\n        }\r\n        else {                        // y becomes child of x.parent\r\n            if (y == y.parent.left) {\r\n                y.parent.left = x;\r\n            }\r\n            else {\r\n                y.parent.right = x;\r\n            }\r\n        }\r\n        x.right = y;                 // y becomes right child of x\r\n        y.parent = x;               // and x becomes parent of y\r\n\r\n        if (y != null && y != this.nil_node) {\r\n            y.update_max();\r\n        }\r\n\r\n        x = y.parent;\r\n        if (x != null && x != this.nil_node) {\r\n            x.update_max();\r\n        }\r\n    }\r\n\r\n    tree_walk(node, action) {\r\n        if (node != null && node != this.nil_node) {\r\n            this.tree_walk(node.left, action);\r\n            // arr.push(node.toArray());\r\n            action(node);\r\n            this.tree_walk(node.right, action);\r\n        }\r\n    }\r\n\r\n    /* Return true if all red nodes have exactly two black child nodes */\r\n    testRedBlackProperty() {\r\n        let res = true;\r\n        this.tree_walk(this.root, function (node) {\r\n            if (node.color == RB_TREE_COLOR_RED) {\r\n                if (!(node.left.color == RB_TREE_COLOR_BLACK && node.right.color == RB_TREE_COLOR_BLACK)) {\r\n                    res = false;\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n\r\n    /* Throw error if not every path from root to bottom has same black height */\r\n    testBlackHeightProperty(node) {\r\n        let height = 0;\r\n        let heightLeft = 0;\r\n        let heightRight = 0;\r\n        if (node.color == RB_TREE_COLOR_BLACK) {\r\n            height++;\r\n        }\r\n        if (node.left != this.nil_node) {\r\n            heightLeft = this.testBlackHeightProperty(node.left);\r\n        }\r\n        else {\r\n            heightLeft = 1;\r\n        }\r\n        if (node.right != this.nil_node) {\r\n            heightRight = this.testBlackHeightProperty(node.right);\r\n        }\r\n        else {\r\n            heightRight = 1;\r\n        }\r\n        if (heightLeft != heightRight) {\r\n            throw new Error('Red-black height property violated');\r\n        }\r\n        height += heightLeft;\r\n        return height;\r\n    };\r\n}\r\n\r\n/**\r\n * Created by Alex Bol on 3/12/2017.\r\n */\r\n\r\n\r\n/**\r\n * Class representing a planar set - a generic container with ability to keep and retrieve shapes and\r\n * perform spatial queries. Planar set is an extension of Set container, so it supports\r\n * Set properties and methods\r\n */\r\nclass PlanarSet extends Set {\r\n    /**\r\n     * Create new instance of PlanarSet\r\n     * @param shapes - array or set of geometric objects to store in planar set\r\n     * Each object should have a <b>box</b> property\r\n     */\r\n    constructor(shapes) {\r\n        super(shapes);\r\n        this.index = new IntervalTree();\r\n        this.forEach(shape => this.index.insert(shape));\r\n    }\r\n\r\n    /**\r\n     * Add new shape to planar set and to its spatial index.<br/>\r\n     * If shape already exist, it will not be added again.\r\n     * This happens with no error, it is possible to use <i>size</i> property to check if\r\n     * a shape was actually added.<br/>\r\n     * Method returns planar set object updated and may be chained\r\n     * @param {AnyShape | {Box, AnyShape}} entry - shape to be added, should have valid <i>box</i> property\r\n     * Another option to transfer as an object {key: Box, value: AnyShape}\r\n     * @returns {PlanarSet}\r\n     */\r\n    add(entry) {\r\n        let size = this.size;\r\n        const {key, value} = entry;\r\n        const box = key || entry.box;\r\n        const shape = value || entry;\r\n        super.add(shape);\r\n        // size not changed - item not added, probably trying to add same item twice\r\n        if (this.size > size) {\r\n            this.index.insert(box, shape);\r\n        }\r\n        return this;         // in accordance to Set.add interface\r\n    }\r\n\r\n    /**\r\n     * Delete shape from planar set. Returns true if shape was actually deleted, false otherwise\r\n     * @param {AnyShape | {Box, AnyShape}} entry - shape to be deleted\r\n     * @returns {boolean}\r\n     */\r\n    delete(entry) {\r\n        const {key, value} = entry;\r\n        const box = key || entry.box;\r\n        const shape = value || entry;\r\n        let deleted = super.delete(shape);\r\n        if (deleted) {\r\n            this.index.remove(box, shape);\r\n        }\r\n        return deleted;\r\n    }\r\n\r\n    /**\r\n     * Clear planar set\r\n     */\r\n    clear() {\r\n        super.clear();\r\n        this.index = new IntervalTree();\r\n    }\r\n\r\n    /**\r\n     * 2d range search in planar set.<br/>\r\n     * Returns array of all shapes in planar set which bounding box is intersected with query box\r\n     * @param {Box} box - query box\r\n     * @returns {AnyShape[]}\r\n     */\r\n    search(box) {\r\n        let resp = this.index.search(box);\r\n        return resp;\r\n    }\r\n\r\n    /**\r\n     * Point location test. Returns array of shapes which contains given point\r\n     * @param {Point} point - query point\r\n     * @returns {AnyShape[]}\r\n     */\r\n    hit(point) {\r\n        let box = new Flatten.Box(point.x - 1, point.y - 1, point.x + 1, point.y + 1);\r\n        let resp = this.index.search(box);\r\n        return resp.filter((shape) => point.on(shape));\r\n    }\r\n\r\n    /**\r\n     * Returns svg string to draw all shapes in planar set\r\n     * @returns {String}\r\n     */\r\n    svg() {\r\n        let svgcontent = [...this].reduce((acc, shape) => acc + shape.svg(), \"\");\r\n        return svgcontent;\r\n    }\r\n}\r\n\r\nFlatten.PlanarSet = PlanarSet;\r\n\r\n/**\r\n * Base class representing shape\r\n * Implement common methods of affine transformations\r\n */\r\nclass Shape {\r\n    get name() {\r\n        throw(Errors.CANNOT_INVOKE_ABSTRACT_METHOD);\r\n    }\r\n\r\n    get box() {\r\n        throw(Errors.CANNOT_INVOKE_ABSTRACT_METHOD);\r\n    }\r\n\r\n    clone() {\r\n        throw(Errors.CANNOT_INVOKE_ABSTRACT_METHOD);\r\n    }\r\n\r\n    /**\r\n     * Returns new shape translated by given vector.\r\n     * Translation vector may be also defined by a pair of numbers.\r\n     * @param {Vector | (number, number) } args - Translation vector\r\n     * or tuple of numbers\r\n     * @returns {Shape}\r\n     */\r\n    translate(...args) {\r\n        return this.transform(new Matrix().translate(...args))\r\n    }\r\n\r\n    /**\r\n     * Returns new shape rotated by given angle around given center point.\r\n     * If center point is omitted, rotates around zero point (0,0).\r\n     * Positive value of angle defines rotation in counterclockwise direction,\r\n     * negative angle defines rotation in clockwise direction\r\n     * @param {number} angle - angle in radians\r\n     * @param {Point} [center=(0,0)] center\r\n     * @returns {Shape}\r\n     */\r\n    rotate(angle, center = new Flatten.Point()) {\r\n        return this.transform(new Matrix().rotate(angle, center.x, center.y));\r\n    }\r\n\r\n    /**\r\n     * Return new shape with coordinates multiplied by scaling factor\r\n     * @param {number} sx - x-axis scaling factor\r\n     * @param {number} sy - y-axis scaling factor\r\n     * @returns {Shape}\r\n     */\r\n    scale(sx, sy) {\r\n        return this.transform(new Matrix().scale(sx, sy));\r\n    }\r\n\r\n    transform(...args) {\r\n        throw(Errors.CANNOT_INVOKE_ABSTRACT_METHOD);\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return Object.assign({}, this, {name: this.name});\r\n    }\r\n\r\n    svg(attrs = {}) {\r\n        throw(Errors.CANNOT_INVOKE_ABSTRACT_METHOD);\r\n    }\r\n}\r\n\r\n/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\n\r\n/**\r\n *\r\n * Class representing a point\r\n * @type {Point}\r\n */\r\nlet Point$3 = class Point extends Shape {\r\n    /**\r\n     * Point may be constructed by two numbers, or by array of two numbers\r\n     * @param {number} x - x-coordinate (float number)\r\n     * @param {number} y - y-coordinate (float number)\r\n     */\r\n    constructor(...args) {\r\n        super();\r\n        /**\r\n         * x-coordinate (float number)\r\n         * @type {number}\r\n         */\r\n        this.x = 0;\r\n        /**\r\n         * y-coordinate (float number)\r\n         * @type {number}\r\n         */\r\n        this.y = 0;\r\n\r\n        if (args.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\r\n            let arr = args[0];\r\n            if (typeof (arr[0]) == \"number\" && typeof (arr[1]) == \"number\") {\r\n                this.x = arr[0];\r\n                this.y = arr[1];\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"point\") {\r\n            let {x, y} = args[0];\r\n            this.x = x;\r\n            this.y = y;\r\n            return;\r\n        }\r\n\r\n        if (args.length === 2) {\r\n            if (typeof (args[0]) == \"number\" && typeof (args[1]) == \"number\") {\r\n                this.x = args[0];\r\n                this.y = args[1];\r\n                return;\r\n            }\r\n        }\r\n        throw Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Returns bounding box of a point\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return new Flatten.Box(this.x, this.y, this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of point\r\n     * @returns {Point}\r\n     */\r\n    clone() {\r\n        return new Flatten.Point(this.x, this.y);\r\n    }\r\n\r\n    get vertices() {\r\n        return [this.clone()];\r\n    }\r\n\r\n    /**\r\n     * Returns true if points are equal up to [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\r\n     * @param {Point} pt Query point\r\n     * @returns {boolean}\r\n     */\r\n    equalTo(pt) {\r\n        return Flatten.Utils.EQ(this.x, pt.x) && Flatten.Utils.EQ(this.y, pt.y);\r\n    }\r\n\r\n    /**\r\n     * Defines predicate \"less than\" between points. Returns true if the point is less than query points, false otherwise <br/>\r\n     * By definition point1 < point2 if {point1.y < point2.y || point1.y == point2.y && point1.x < point2.x <br/>\r\n     * Numeric values compared with [Flatten.Utils.DP_TOL]{@link DP_TOL} tolerance\r\n     * @param {Point} pt Query point\r\n     * @returns {boolean}\r\n     */\r\n    lessThan(pt) {\r\n        if (Flatten.Utils.LT(this.y, pt.y))\r\n            return true;\r\n        if (Flatten.Utils.EQ(this.y, pt.y) && Flatten.Utils.LT(this.x, pt.x))\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Return new point transformed by affine transformation matrix\r\n     * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\r\n     * @returns {Point}\r\n     */\r\n    transform(m) {\r\n        return new Flatten.Point(m.transform([this.x, this.y]))\r\n    }\r\n\r\n    /**\r\n     * Returns projection point on given line\r\n     * @param {Line} line Line this point be projected on\r\n     * @returns {Point}\r\n     */\r\n    projectionOn(line) {\r\n        if (this.equalTo(line.pt))                   // this point equal to line anchor point\r\n            return this.clone();\r\n\r\n        let vec = new Flatten.Vector(this, line.pt);\r\n        if (Flatten.Utils.EQ_0(vec.cross(line.norm)))    // vector to point from anchor point collinear to normal vector\r\n            return line.pt.clone();\r\n\r\n        let dist = vec.dot(line.norm);             // signed distance\r\n        let proj_vec = line.norm.multiply(dist);\r\n        return this.translate(proj_vec);\r\n    }\r\n\r\n    /**\r\n     * Returns true if point belongs to the \"left\" semi-plane, which means, point belongs to the same semi plane where line normal vector points to\r\n     * Return false if point belongs to the \"right\" semi-plane or to the line itself\r\n     * @param {Line} line Query line\r\n     * @returns {boolean}\r\n     */\r\n    leftTo(line) {\r\n        let vec = new Flatten.Vector(line.pt, this);\r\n        let onLeftSemiPlane = Flatten.Utils.GT(vec.dot(line.norm), 0);\r\n        return onLeftSemiPlane;\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from point to shape and return as array [distance, shortest segment]\r\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n     * @returns {number} distance from point to shape\r\n     * @returns {Segment} shortest segment between point and shape (started at point, ended at shape)\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Point) {\r\n            let dx = shape.x - this.x;\r\n            let dy = shape.y - this.y;\r\n            return [Math.sqrt(dx * dx + dy * dy), new Flatten.Segment(this, shape)];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            return Flatten.Distance.point2line(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return Flatten.Distance.point2circle(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return Flatten.Distance.point2segment(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return Flatten.Distance.point2arc(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return Flatten.Distance.point2polygon(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.PlanarSet) {\r\n            return Flatten.Distance.shape2planarSet(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Multiline) {\r\n            return Flatten.Distance.shape2multiline(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if point is on a shape, false otherwise\r\n     * @param {Shape} shape\r\n     * @returns {boolean}\r\n     */\r\n    on(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.equalTo(shape);\r\n        }\r\n\r\n        if (shape.contains && shape.contains instanceof Function) {\r\n            return shape.contains(this);\r\n        }\r\n\r\n        throw Flatten.Errors.UNSUPPORTED_SHAPE_TYPE;\r\n    }\r\n\r\n    get name() {\r\n        return \"point\"\r\n    }\r\n\r\n    /**\r\n     * Return string to draw point in svg as circle with radius \"r\" <br/>\r\n     * Accept any valid attributes of svg elements as svg object\r\n     * Defaults attribues are: <br/>\r\n     * {\r\n     *    r:\"3\",\r\n     *    stroke:\"black\",\r\n     *    strokeWidth:\"1\",\r\n     *    fill:\"red\"\r\n     * }\r\n     * @param {Object} attrs - Any valid attributes of svg circle element, like \"r\", \"stroke\", \"strokeWidth\", \"fill\"\r\n     * @returns {String}\r\n     */\r\n    svg(attrs = {}) {\r\n        const r = attrs.r ?? 3;            // default radius - 3\r\n        return `\\n<circle cx=\"${this.x}\" cy=\"${this.y}\" r=\"${r}\"\r\n            ${convertToString({fill: \"red\", ...attrs})} />`;\r\n    }\r\n};\r\n\r\nFlatten.Point = Point$3;\r\n/**\r\n * Function to create point equivalent to \"new\" constructor\r\n * @param args\r\n */\r\nconst point = (...args) => new Flatten.Point(...args);\r\nFlatten.point = point;\r\n\r\n// export {Point};\r\n\r\n/**\r\n * Created by Alex Bol on 2/19/2017.\r\n */\r\n\r\n\r\n/**\r\n * Class representing a vector\r\n * @type {Vector}\r\n */\r\nlet Vector$1 = class Vector extends Shape {\r\n    /**\r\n     * Vector may be constructed by two points, or by two float numbers,\r\n     * or by array of two numbers\r\n     * @param {Point} ps - start point\r\n     * @param {Point} pe - end point\r\n     */\r\n    constructor(...args) {\r\n        super();\r\n        /**\r\n         * x-coordinate of a vector (float number)\r\n         * @type {number}\r\n         */\r\n        this.x = 0;\r\n        /**\r\n         * y-coordinate of a vector (float number)\r\n         * @type {number}\r\n         */\r\n        this.y = 0;\r\n\r\n        /* return zero vector */\r\n        if (args.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\r\n            let arr = args[0];\r\n            if (typeof (arr[0]) == \"number\" && typeof (arr[1]) == \"number\") {\r\n                this.x = arr[0];\r\n                this.y = arr[1];\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"vector\") {\r\n            let {x, y} = args[0];\r\n            this.x = x;\r\n            this.y = y;\r\n            return;\r\n        }\r\n\r\n        if (args.length === 2) {\r\n            let a1 = args[0];\r\n            let a2 = args[1];\r\n\r\n            if (typeof (a1) == \"number\" && typeof (a2) == \"number\") {\r\n                this.x = a1;\r\n                this.y = a2;\r\n                return;\r\n            }\r\n\r\n            if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\r\n                this.x = a2.x - a1.x;\r\n                this.y = a2.y - a1.y;\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        throw Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Method clone returns new instance of Vector\r\n     * @returns {Vector}\r\n     */\r\n    clone() {\r\n        return new Flatten.Vector(this.x, this.y);\r\n    }\r\n\r\n    /**\r\n     * Slope of the vector in radians from 0 to 2PI\r\n     * @returns {number}\r\n     */\r\n    get slope() {\r\n        let angle = Math.atan2(this.y, this.x);\r\n        if (angle < 0) angle = 2 * Math.PI + angle;\r\n        return angle;\r\n    }\r\n\r\n    /**\r\n     * Length of vector\r\n     * @returns {number}\r\n     */\r\n    get length() {\r\n        return Math.sqrt(this.dot(this));\r\n    }\r\n\r\n    /**\r\n     * Returns true if vectors are equal up to [DP_TOL]{@link http://localhost:63342/flatten-js/docs/global.html#DP_TOL}\r\n     * tolerance\r\n     * @param {Vector} v\r\n     * @returns {boolean}\r\n     */\r\n    equalTo(v) {\r\n        return Flatten.Utils.EQ(this.x, v.x) && Flatten.Utils.EQ(this.y, v.y);\r\n    }\r\n\r\n    /**\r\n     * Returns new vector multiplied by scalar\r\n     * @param {number} scalar\r\n     * @returns {Vector}\r\n     */\r\n    multiply(scalar) {\r\n        return (new Flatten.Vector(scalar * this.x, scalar * this.y));\r\n    }\r\n\r\n    /**\r\n     * Returns scalar product (dot product) of two vectors <br/>\r\n     * <code>dot_product = (this * v)</code>\r\n     * @param {Vector} v Other vector\r\n     * @returns {number}\r\n     */\r\n    dot(v) {\r\n        return (this.x * v.x + this.y * v.y);\r\n    }\r\n\r\n    /**\r\n     * Returns vector product (cross product) of two vectors <br/>\r\n     * <code>cross_product = (this x v)</code>\r\n     * @param {Vector} v Other vector\r\n     * @returns {number}\r\n     */\r\n    cross(v) {\r\n        return (this.x * v.y - this.y * v.x);\r\n    }\r\n\r\n    /**\r\n     * Returns unit vector.<br/>\r\n     * Throw error if given vector has zero length\r\n     * @returns {Vector}\r\n     */\r\n    normalize() {\r\n        if (!Flatten.Utils.EQ_0(this.length)) {\r\n            return (new Flatten.Vector(this.x / this.length, this.y / this.length));\r\n        }\r\n        throw Errors.ZERO_DIVISION;\r\n    }\r\n\r\n    /**\r\n     * Returns new vector rotated by given angle,\r\n     * positive angle defines rotation in counterclockwise direction,\r\n     * negative - in clockwise direction\r\n     * Vector only can be rotated around (0,0) point!\r\n     * @param {number} angle - Angle in radians\r\n     * @returns {Vector}\r\n     */\r\n    rotate(angle, center = new Flatten.Point()) {\r\n        if (center.x === 0 && center.y === 0) {\r\n            return this.transform(new Matrix().rotate(angle));\r\n        }\r\n        throw(Errors.OPERATION_IS_NOT_SUPPORTED);\r\n    }\r\n\r\n    /**\r\n     * Return new vector transformed by affine transformation matrix m\r\n     * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\r\n     * @returns {Vector}\r\n     */\r\n    transform(m) {\r\n        return new Flatten.Vector(m.transform([this.x, this.y]))\r\n    }\r\n\r\n    /**\r\n     * Returns vector rotated 90 degrees counterclockwise\r\n     * @returns {Vector}\r\n     */\r\n    rotate90CCW() {\r\n        return new Flatten.Vector(-this.y, this.x);\r\n    };\r\n\r\n    /**\r\n     * Returns vector rotated 90 degrees clockwise\r\n     * @returns {Vector}\r\n     */\r\n    rotate90CW() {\r\n        return new Flatten.Vector(this.y, -this.x);\r\n    };\r\n\r\n    /**\r\n     * Return inverted vector\r\n     * @returns {Vector}\r\n     */\r\n    invert() {\r\n        return new Flatten.Vector(-this.x, -this.y);\r\n    }\r\n\r\n    /**\r\n     * Return result of addition of other vector to this vector as a new vector\r\n     * @param {Vector} v Other vector\r\n     * @returns {Vector}\r\n     */\r\n    add(v) {\r\n        return new Flatten.Vector(this.x + v.x, this.y + v.y);\r\n    }\r\n\r\n    /**\r\n     * Return result of subtraction of other vector from current vector as a new vector\r\n     * @param {Vector} v Another vector\r\n     * @returns {Vector}\r\n     */\r\n    subtract(v) {\r\n        return new Flatten.Vector(this.x - v.x, this.y - v.y);\r\n    }\r\n\r\n    /**\r\n     * Return angle between this vector and other vector. <br/>\r\n     * Angle is measured from 0 to 2*PI in the counterclockwise direction\r\n     * from current vector to  another.\r\n     * @param {Vector} v Another vector\r\n     * @returns {number}\r\n     */\r\n    angleTo(v) {\r\n        let norm1 = this.normalize();\r\n        let norm2 = v.normalize();\r\n        let angle = Math.atan2(norm1.cross(norm2), norm1.dot(norm2));\r\n        if (angle < 0) angle += 2 * Math.PI;\r\n        return angle;\r\n    }\r\n\r\n    /**\r\n     * Return vector projection of the current vector on another vector\r\n     * @param {Vector} v Another vector\r\n     * @returns {Vector}\r\n     */\r\n    projectionOn(v) {\r\n        let n = v.normalize();\r\n        let d = this.dot(n);\r\n        return n.multiply(d);\r\n    }\r\n\r\n    get name() {\r\n        return \"vector\"\r\n    }\r\n};\r\n\r\nFlatten.Vector = Vector$1;\r\n\r\n/**\r\n * Function to create vector equivalent to \"new\" constructor\r\n * @param args\r\n */\r\nconst vector$1 = (...args) => new Flatten.Vector(...args);\r\nFlatten.vector = vector$1;\r\n\r\n/**\r\n * Created by Alex Bol on 3/10/2017.\r\n */\r\n\r\n\r\n/**\r\n * Class representing a segment\r\n * @type {Segment}\r\n */\r\nlet Segment$1 = class Segment extends Shape {\r\n    /**\r\n     *\r\n     * @param {Point} ps - start point\r\n     * @param {Point} pe - end point\r\n     */\r\n    constructor(...args) {\r\n        super();\r\n        /**\r\n         * Start point\r\n         * @type {Point}\r\n         */\r\n        this.ps = new Flatten.Point();\r\n        /**\r\n         * End Point\r\n         * @type {Point}\r\n         */\r\n        this.pe = new Flatten.Point();\r\n\r\n        if (args.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 4) {\r\n            let coords = args[0];\r\n            this.ps = new Flatten.Point(coords[0], coords[1]);\r\n            this.pe = new Flatten.Point(coords[2], coords[3]);\r\n            return;\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"segment\") {\r\n            let {ps, pe} = args[0];\r\n            this.ps = new Flatten.Point(ps.x, ps.y);\r\n            this.pe = new Flatten.Point(pe.x, pe.y);\r\n            return;\r\n        }\r\n\r\n        // second point omitted issue #84\r\n        if (args.length === 1 && args[0] instanceof Flatten.Point) {\r\n            this.ps = args[0].clone();\r\n            return;\r\n        }\r\n\r\n        if (args.length === 2 && args[0] instanceof Flatten.Point && args[1] instanceof Flatten.Point) {\r\n            this.ps = args[0].clone();\r\n            this.pe = args[1].clone();\r\n            return;\r\n        }\r\n\r\n        if (args.length === 4) {\r\n            this.ps = new Flatten.Point(args[0], args[1]);\r\n            this.pe = new Flatten.Point(args[2], args[3]);\r\n            return;\r\n        }\r\n\r\n        throw Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of segment\r\n     * @returns {Segment}\r\n     */\r\n    clone() {\r\n        return new Flatten.Segment(this.start, this.end);\r\n    }\r\n\r\n    /**\r\n     * Start point\r\n     * @returns {Point}\r\n     */\r\n    get start() {\r\n        return this.ps;\r\n    }\r\n\r\n    /**\r\n     * End point\r\n     * @returns {Point}\r\n     */\r\n    get end() {\r\n        return this.pe;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns array of start and end point\r\n     * @returns [Point,Point]\r\n     */\r\n    get vertices() {\r\n        return [this.ps.clone(), this.pe.clone()];\r\n    }\r\n\r\n    /**\r\n     * Length of a segment\r\n     * @returns {number}\r\n     */\r\n    get length() {\r\n        return this.start.distanceTo(this.end)[0];\r\n    }\r\n\r\n    /**\r\n     * Slope of the line - angle to axe x in radians from 0 to 2PI\r\n     * @returns {number}\r\n     */\r\n    get slope() {\r\n        let vec = new Flatten.Vector(this.start, this.end);\r\n        return vec.slope;\r\n    }\r\n\r\n    /**\r\n     * Bounding box\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return new Flatten.Box(\r\n            Math.min(this.start.x, this.end.x),\r\n            Math.min(this.start.y, this.end.y),\r\n            Math.max(this.start.x, this.end.x),\r\n            Math.max(this.start.y, this.end.y)\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns true if equals to query segment, false otherwise\r\n     * @param {Segment} seg - query segment\r\n     * @returns {boolean}\r\n     */\r\n    equalTo(seg) {\r\n        return this.ps.equalTo(seg.ps) && this.pe.equalTo(seg.pe);\r\n    }\r\n\r\n    /**\r\n     * Returns true if segment contains point\r\n     * @param {Point} pt Query point\r\n     * @returns {boolean}\r\n     */\r\n    contains(pt) {\r\n        return Flatten.Utils.EQ_0(this.distanceToPoint(pt));\r\n    }\r\n\r\n    /**\r\n     * Returns array of intersection points between segment and other shape\r\n     * @param {Shape} shape - Shape of the one of supported types <br/>\r\n     * @returns {Point[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectSegment2Line(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Ray) {\r\n            return intersectRay2Segment(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return  intersectSegment2Segment(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectSegment2Circle(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Box) {\r\n            return intersectSegment2Box(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectSegment2Arc(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return  intersectSegment2Polygon(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Multiline) {\r\n            return intersectShape2Multiline(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from segment to shape and return as array [distance, shortest segment]\r\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n     * @returns {[number, Segment]} shortest segment between segment and shape (started at segment, ended at shape)\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            let [dist, shortest_segment] = Flatten.Distance.point2segment(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            let [dist, shortest_segment] = Flatten.Distance.segment2circle(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            let [dist, shortest_segment] = Flatten.Distance.segment2line(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            let [dist, shortest_segment] = Flatten.Distance.segment2segment(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            let [dist, shortest_segment] = Flatten.Distance.segment2arc(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.PlanarSet) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2planarSet(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Multiline) {\r\n            return Flatten.Distance.shape2multiline(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns unit vector in the direction from start to end\r\n     * @returns {Vector}\r\n     */\r\n    tangentInStart() {\r\n        let vec = new Flatten.Vector(this.start, this.end);\r\n        return vec.normalize();\r\n    }\r\n\r\n    /**\r\n     * Return unit vector in the direction from end to start\r\n     * @returns {Vector}\r\n     */\r\n    tangentInEnd() {\r\n        let vec = new Flatten.Vector(this.end, this.start);\r\n        return vec.normalize();\r\n    }\r\n\r\n    /**\r\n     * Returns new segment with swapped start and end points\r\n     * @returns {Segment}\r\n     */\r\n    reverse() {\r\n        return new Segment(this.end, this.start);\r\n    }\r\n\r\n    /**\r\n     * When point belongs to segment, return array of two segments split by given point,\r\n     * if point is inside segment. Returns clone of this segment if query point is incident\r\n     * to start or end point of the segment. Returns empty array if point does not belong to segment\r\n     * @param {Point} pt Query point\r\n     * @returns {Segment[]}\r\n     */\r\n    split(pt) {\r\n        if (this.start.equalTo(pt))\r\n            return [null, this.clone()];\r\n\r\n        if (this.end.equalTo(pt))\r\n            return [this.clone(), null];\r\n\r\n        return [\r\n            new Flatten.Segment(this.start, pt),\r\n            new Flatten.Segment(pt, this.end)\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * Return middle point of the segment\r\n     * @returns {Point}\r\n     */\r\n    middle() {\r\n        return new Flatten.Point((this.start.x + this.end.x) / 2, (this.start.y + this.end.y) / 2);\r\n    }\r\n\r\n    /**\r\n     * Get point at given length\r\n     * @param {number} length - The length along the segment\r\n     * @returns {Point}\r\n     */\r\n    pointAtLength(length) {\r\n        if (length > this.length || length < 0) return null;\r\n        if (length == 0) return this.start;\r\n        if (length == this.length) return this.end;\r\n        let factor = length / this.length;\r\n        return new Flatten.Point(\r\n            (this.end.x - this.start.x) * factor + this.start.x,\r\n            (this.end.y - this.start.y) * factor + this.start.y\r\n        );\r\n    }\r\n\r\n    distanceToPoint(pt) {\r\n        let [dist, ...rest] = Flatten.Distance.point2segment(pt, this);\r\n        return dist;\r\n    };\r\n\r\n    definiteIntegral(ymin = 0.0) {\r\n        let dx = this.end.x - this.start.x;\r\n        let dy1 = this.start.y - ymin;\r\n        let dy2 = this.end.y - ymin;\r\n        return (dx * (dy1 + dy2) / 2);\r\n    }\r\n\r\n    /**\r\n     * Return new segment transformed using affine transformation matrix\r\n     * @param {Matrix} matrix - affine transformation matrix\r\n     * @returns {Segment} - transformed segment\r\n     */\r\n    transform(matrix = new Flatten.Matrix()) {\r\n        return new Segment(this.ps.transform(matrix), this.pe.transform(matrix))\r\n    }\r\n\r\n    /**\r\n     * Returns true if segment start is equal to segment end up to DP_TOL\r\n     * @returns {boolean}\r\n     */\r\n    isZeroLength() {\r\n        return this.ps.equalTo(this.pe)\r\n    }\r\n\r\n    /**\r\n     * Sort given array of points from segment start to end, assuming all points lay on the segment\r\n     * @param {Point[]} - array of points\r\n     * @returns {Point[]} new array sorted\r\n     */\r\n    sortPoints(pts) {\r\n        let line = new Flatten.Line(this.start, this.end);\r\n        return line.sortPoints(pts);\r\n    }\r\n\r\n    get name() {\r\n        return \"segment\"\r\n    }\r\n\r\n    /**\r\n     * Return string to draw segment in svg\r\n     * @param {Object} attrs - an object with attributes for svg path element,\r\n     * like \"stroke\", \"strokeWidth\" <br/>\r\n     * Defaults are stroke:\"black\", strokeWidth:\"1\"\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        return `\\n<line x1=\"${this.start.x}\" y1=\"${this.start.y}\" x2=\"${this.end.x}\" y2=\"${this.end.y}\" ${convertToString(attrs)} />`;\r\n    }\r\n};\r\n\r\nFlatten.Segment = Segment$1;\r\n/**\r\n * Shortcut method to create new segment\r\n */\r\nconst segment = (...args) => new Flatten.Segment(...args);\r\nFlatten.segment = segment;\r\n\r\n/**\r\n * Created by Alex Bol on 2/20/2017.\r\n */\r\n\r\nlet {vector} = Flatten;\r\n\r\n/**\r\n * Class representing a line\r\n * @type {Line}\r\n */\r\nlet Line$1 = class Line extends Shape {\r\n    /**\r\n     * Line may be constructed by point and normal vector or by two points that a line passes through\r\n     * @param {Point} pt - point that a line passes through\r\n     * @param {Vector|Point} norm - normal vector to a line or second point a line passes through\r\n     */\r\n    constructor(...args) {\r\n        super();\r\n        /**\r\n         * Point a line passes through\r\n         * @type {Point}\r\n         */\r\n        this.pt = new Flatten.Point();\r\n        /**\r\n         * Normal vector to a line <br/>\r\n         * Vector is normalized (length == 1)<br/>\r\n         * Direction of the vector is chosen to satisfy inequality norm * p >= 0\r\n         * @type {Vector}\r\n         */\r\n        this.norm = new Flatten.Vector(0, 1);\r\n\r\n        if (args.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"line\") {\r\n            let {pt, norm} = args[0];\r\n            this.pt = new Flatten.Point(pt);\r\n            this.norm = new Flatten.Vector(norm);\r\n            return;\r\n        }\r\n\r\n        if (args.length === 2) {\r\n            let a1 = args[0];\r\n            let a2 = args[1];\r\n\r\n            if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Point) {\r\n                this.pt = a1;\r\n                this.norm = Line.points2norm(a1, a2);\r\n                if (this.norm.dot(vector(this.pt.x,this.pt.y)) >= 0) {\r\n                    this.norm.invert();\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (a1 instanceof Flatten.Point && a2 instanceof Flatten.Vector) {\r\n                if (Flatten.Utils.EQ_0(a2.x) && Flatten.Utils.EQ_0(a2.y)) {\r\n                    throw Errors.ILLEGAL_PARAMETERS;\r\n                }\r\n                this.pt = a1.clone();\r\n                this.norm = a2.clone();\r\n                this.norm = this.norm.normalize();\r\n                if (this.norm.dot(vector(this.pt.x,this.pt.y)) >= 0) {\r\n                    this.norm.invert();\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (a1 instanceof Flatten.Vector && a2 instanceof Flatten.Point) {\r\n                if (Flatten.Utils.EQ_0(a1.x) && Flatten.Utils.EQ_0(a1.y)) {\r\n                    throw Errors.ILLEGAL_PARAMETERS;\r\n                }\r\n                this.pt = a2.clone();\r\n                this.norm = a1.clone();\r\n                this.norm = this.norm.normalize();\r\n                if (this.norm.dot(vector(this.pt.x,this.pt.y)) >= 0) {\r\n                    this.norm.invert();\r\n                }\r\n                return;\r\n            }\r\n        }\r\n\r\n        throw Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of line\r\n     * @returns {Line}\r\n     */\r\n    clone() {\r\n        return new Flatten.Line(this.pt, this.norm);\r\n    }\r\n\r\n    /* The following methods need for implementation of Edge interface\r\n    /**\r\n     * Line has no start point\r\n     * @returns {undefined}\r\n     */\r\n    get start() {return undefined;}\r\n\r\n    /**\r\n     * Line has no end point\r\n     */\r\n    get end() {return undefined;}\r\n\r\n    /**\r\n     * Return positive infinity number as length\r\n     * @returns {number}\r\n     */\r\n    get length() {return Number.POSITIVE_INFINITY;}\r\n\r\n    /**\r\n     * Returns infinite box\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return new Flatten.Box(\r\n            Number.NEGATIVE_INFINITY,\r\n            Number.NEGATIVE_INFINITY,\r\n            Number.POSITIVE_INFINITY,\r\n            Number.POSITIVE_INFINITY\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Middle point is undefined\r\n     * @returns {undefined}\r\n     */\r\n    get middle() {return undefined}\r\n\r\n    /**\r\n     * Slope of the line - angle in radians between line and axe x from 0 to 2PI\r\n     * @returns {number} - slope of the line\r\n     */\r\n    get slope() {\r\n        let vec = new Flatten.Vector(this.norm.y, -this.norm.x);\r\n        return vec.slope;\r\n    }\r\n\r\n    /**\r\n     * Get coefficients [A,B,C] of a standard line equation in the form Ax + By = C\r\n     * @code [A, B, C] = line.standard\r\n     * @returns {number[]} - array of coefficients\r\n     */\r\n    get standard() {\r\n        let A = this.norm.x;\r\n        let B = this.norm.y;\r\n        let C = this.norm.dot(vector(this.pt.x, this.pt.y));\r\n\r\n        return [A, B, C];\r\n    }\r\n\r\n    /**\r\n     * Return true if parallel or incident to other line\r\n     * @param {Line} other_line - line to check\r\n     * @returns {boolean}\r\n     */\r\n    parallelTo(other_line) {\r\n        return Flatten.Utils.EQ_0(this.norm.cross(other_line.norm));\r\n    }\r\n\r\n    /**\r\n     * Returns true if incident to other line\r\n     * @param {Line} other_line - line to check\r\n     * @returns {boolean}\r\n     */\r\n    incidentTo(other_line) {\r\n        return this.parallelTo(other_line) && this.pt.on(other_line);\r\n    }\r\n\r\n    /**\r\n     * Returns true if point belongs to line\r\n     * @param {Point} pt Query point\r\n     * @returns {boolean}\r\n     */\r\n    contains(pt) {\r\n        if (this.pt.equalTo(pt)) {\r\n            return true;\r\n        }\r\n        /* Line contains point if vector to point is orthogonal to the line normal vector */\r\n        let vec = new Flatten.Vector(this.pt, pt);\r\n        return Flatten.Utils.EQ_0(this.norm.dot(vec));\r\n    }\r\n\r\n    /**\r\n     * Return coordinate of the point that lies on the line in the transformed\r\n     * coordinate system where center is the projection of the point(0,0) to\r\n     * the line and axe y is collinear to the normal vector. <br/>\r\n     * This method assumes that point lies on the line and does not check it\r\n     * @param {Point} pt - point on a line\r\n     * @returns {number}\r\n     */\r\n    coord(pt) {\r\n        return vector(pt.x, pt.y).cross(this.norm);\r\n    }\r\n\r\n    /**\r\n     * Returns array of intersection points\r\n     * @param {Shape} shape - shape to intersect with\r\n     * @returns {Point[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectLine2Line(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Ray) {\r\n            return intersectRay2Line(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectLine2Circle(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Box) {\r\n            return intersectLine2Box(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return intersectSegment2Line(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectLine2Arc(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return  intersectLine2Polygon(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Multiline) {\r\n            return intersectShape2Multiline(this, shape);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from line to shape and returns array [distance, shortest_segment]\r\n     * @param {Shape} shape Shape of the one of the types Point, Circle, Segment, Arc, Polygon\r\n     * @returns {[number, Segment]}\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            let [distance, shortest_segment] = Flatten.Distance.point2line(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            let [distance, shortest_segment] = Flatten.Distance.circle2line(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            let [distance, shortest_segment] = Flatten.Distance.segment2line(shape, this);\r\n            return [distance, shortest_segment.reverse()];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            let [distance, shortest_segment] = Flatten.Distance.arc2line(shape, this);\r\n            return [distance, shortest_segment.reverse()];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            let [distance, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\r\n            return [distance, shortest_segment];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Split line with a point or array of points and return array of shapes\r\n     * Assumed (but not checked) that all points lay on the line\r\n     * @param {Point | Point[]} pt\r\n     * @returns {MultilineShapes}\r\n     */\r\n    split(pt) {\r\n        if (pt instanceof Flatten.Point) {\r\n            return [new Flatten.Ray(pt, this.norm), new Flatten.Ray(pt, this.norm)]\r\n        }\r\n        else {\r\n            let multiline = new Flatten.Multiline([this]);\r\n            let sorted_points = this.sortPoints(pt);\r\n            multiline.split(sorted_points);\r\n            return multiline.toShapes();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return new line rotated by angle\r\n     * @param {number} angle - angle in radians\r\n     * @param {Point} center - center of rotation\r\n     */\r\n    rotate(angle, center = new Flatten.Point()) {\r\n        return new Flatten.Line(\r\n            this.pt.rotate(angle, center),\r\n            this.norm.rotate(angle)\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Return new line transformed by affine transformation matrix\r\n     * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\r\n     * @returns {Line}\r\n     */\r\n    transform(m) {\r\n        return new Flatten.Line(\r\n            this.pt.transform(m),\r\n            this.norm.clone()\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Sort given array of points that lay on a line with respect to coordinate on a line\r\n     * The method assumes that points lay on the line and does not check this\r\n     * @param {Point[]} pts - array of points\r\n     * @returns {Point[]} new array sorted\r\n     */\r\n    sortPoints(pts) {\r\n        return pts.slice().sort( (pt1, pt2) => {\r\n            if (this.coord(pt1) < this.coord(pt2)) {\r\n                return -1;\r\n            }\r\n            if (this.coord(pt1) > this.coord(pt2)) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        })\r\n    }\r\n\r\n    get name() {\r\n        return \"line\"\r\n    }\r\n\r\n    /**\r\n     * Return string to draw svg segment representing line inside given box\r\n     * @param {Box} box Box representing drawing area\r\n     * @param {Object} attrs - an object with attributes of svg circle element\r\n     */\r\n    svg(box, attrs = {}) {\r\n        let ip = intersectLine2Box(this, box);\r\n        if (ip.length === 0)\r\n            return \"\";\r\n        let ps = ip[0];\r\n        let pe = ip.length === 2 ? ip[1] : ip.find(pt => !pt.equalTo(ps));\r\n        if (pe === undefined) pe = ps;\r\n        let segment = new Flatten.Segment(ps, pe);\r\n        return segment.svg(attrs);\r\n    }\r\n\r\n    static points2norm(pt1, pt2) {\r\n        if (pt1.equalTo(pt2)) {\r\n            throw Errors.ILLEGAL_PARAMETERS;\r\n        }\r\n        let vec = new Flatten.Vector(pt1, pt2);\r\n        let unit = vec.normalize();\r\n        return unit.rotate90CCW();\r\n    }\r\n};\r\n\r\nFlatten.Line = Line$1;\r\n/**\r\n * Function to create line equivalent to \"new\" constructor\r\n * @param args\r\n */\r\nconst line = (...args) => new Flatten.Line(...args);\r\nFlatten.line = line;\r\n\r\n/**\r\n * Created by Alex Bol on 3/6/2017.\r\n */\r\n\r\n\r\n/**\r\n * Class representing a circle\r\n * @type {Circle}\r\n */\r\nlet Circle$1 = class Circle extends Shape {\r\n    /**\r\n     * Class private property\r\n     * @type {string}\r\n     */\r\n\r\n    /**\r\n     *\r\n     * @param {Point} pc - circle center point\r\n     * @param {number} r - circle radius\r\n     */\r\n    constructor(...args) {\r\n        super();\r\n        /**\r\n         * Circle center\r\n         * @type {Point}\r\n         */\r\n        this.pc = new Flatten.Point();\r\n        /**\r\n         * Circle radius\r\n         * @type {number}\r\n         */\r\n        this.r = 1;\r\n\r\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"circle\") {\r\n            let {pc, r} = args[0];\r\n            this.pc = new Flatten.Point(pc);\r\n            this.r = r;\r\n        } else {\r\n            let [pc, r] = [...args];\r\n            if (pc && pc instanceof Flatten.Point) this.pc = pc.clone();\r\n            if (r !== undefined) this.r = r;\r\n        }\r\n        // throw Errors.ILLEGAL_PARAMETERS;    unreachable code\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of circle\r\n     * @returns {Circle}\r\n     */\r\n    clone() {\r\n        return new Flatten.Circle(this.pc.clone(), this.r);\r\n    }\r\n\r\n    /**\r\n     * Circle center\r\n     * @returns {Point}\r\n     */\r\n    get center() {\r\n        return this.pc;\r\n    }\r\n\r\n    /**\r\n     * Circle bounding box\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return new Flatten.Box(\r\n            this.pc.x - this.r,\r\n            this.pc.y - this.r,\r\n            this.pc.x + this.r,\r\n            this.pc.y + this.r\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Return true if circle contains shape: no point of shape lies outside of the circle\r\n     * @param {Shape} shape - test shape\r\n     * @returns {boolean}\r\n     */\r\n    contains(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return Flatten.Utils.LE(shape.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return Flatten.Utils.LE(shape.start.distanceTo(this.center)[0], this.r) &&\r\n                Flatten.Utils.LE(shape.end.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return this.intersect(shape).length === 0 &&\r\n                Flatten.Utils.LE(shape.start.distanceTo(this.center)[0], this.r) &&\r\n                Flatten.Utils.LE(shape.end.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return this.intersect(shape).length === 0 &&\r\n                Flatten.Utils.LE(shape.r, this.r) &&\r\n                Flatten.Utils.LE(shape.center.distanceTo(this.center)[0], this.r);\r\n        }\r\n\r\n        /* TODO: box, polygon */\r\n    }\r\n\r\n    /**\r\n     * Transform circle to closed arc\r\n     * @param {boolean} counterclockwise\r\n     * @returns {Arc}\r\n     */\r\n    toArc(counterclockwise = true) {\r\n        return new Flatten.Arc(this.center, this.r, Math.PI, -Math.PI, counterclockwise);\r\n    }\r\n\r\n    /**\r\n     * Method scale is supported only for uniform scaling of the circle with (0,0) center\r\n     * @param {number} sx\r\n     * @param {number} sy\r\n     * @returns {Circle}\r\n     */\r\n    scale(sx, sy) {\r\n        if (sx !== sy)\r\n            throw Errors.OPERATION_IS_NOT_SUPPORTED\r\n        if (!(this.pc.x === 0.0 && this.pc.y === 0.0))\r\n            throw Errors.OPERATION_IS_NOT_SUPPORTED\r\n        return new Flatten.Circle(this.pc, this.r*sx)\r\n    }\r\n\r\n    /**\r\n     * Return new circle transformed using affine transformation matrix\r\n     * @param {Matrix} matrix - affine transformation matrix\r\n     * @returns {Circle}\r\n     */\r\n    transform(matrix = new Flatten.Matrix()) {\r\n        return new Flatten.Circle(this.pc.transform(matrix), this.r)\r\n    }\r\n\r\n    /**\r\n     * Returns array of intersection points between circle and other shape\r\n     * @param {Shape} shape Shape of the one of supported types\r\n     * @returns {Point[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectLine2Circle(shape, this);\r\n        }\r\n        if (shape instanceof Flatten.Ray) {\r\n            return intersectRay2Circle(shape, this);\r\n        }\r\n        if (shape instanceof Flatten.Segment) {\r\n            return intersectSegment2Circle(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectCircle2Circle(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Box) {\r\n            return intersectCircle2Box(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectArc2Circle(shape, this);\r\n        }\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return intersectCircle2Polygon(this, shape);\r\n        }\r\n        if (shape instanceof Flatten.Multiline) {\r\n            return intersectShape2Multiline(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from circle to shape and return array [distance, shortest segment]\r\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n     * @returns {number} distance from circle to shape\r\n     * @returns {Segment} shortest segment between circle and shape (started at circle, ended at shape)\r\n\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            let [distance, shortest_segment] = Flatten.Distance.point2circle(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            let [distance, shortest_segment] = Flatten.Distance.circle2circle(this, shape);\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            let [distance, shortest_segment] = Flatten.Distance.circle2line(this, shape);\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            let [distance, shortest_segment] = Flatten.Distance.segment2circle(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            let [distance, shortest_segment] = Flatten.Distance.arc2circle(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            let [distance, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\r\n            return [distance, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.PlanarSet) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2planarSet(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Multiline) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2multiline(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n    }\r\n\r\n    get name() {\r\n        return \"circle\"\r\n    }\r\n\r\n    /**\r\n     * Return string to draw circle in svg\r\n     * @param {Object} attrs - an object with attributes of svg circle element\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        return `\\n<circle cx=\"${this.pc.x}\" cy=\"${this.pc.y}\" r=\"${this.r}\"\r\n                ${convertToString({fill: \"none\", ...attrs})} />`;\r\n    }\r\n\r\n};\r\n\r\nFlatten.Circle = Circle$1;\r\n/**\r\n * Shortcut to create new circle\r\n * @param args\r\n */\r\nconst circle = (...args) => new Flatten.Circle(...args);\r\nFlatten.circle = circle;\r\n\r\n/**\r\n * Created by Alex Bol on 3/10/2017.\r\n */\r\n\r\n\r\n/**\r\n * Class representing a circular arc\r\n * @type {Arc}\r\n */\r\nclass Arc extends Shape {\r\n    /**\r\n     *\r\n     * @param {Point} pc - arc center\r\n     * @param {number} r - arc radius\r\n     * @param {number} startAngle - start angle in radians from 0 to 2*PI\r\n     * @param {number} endAngle - end angle in radians from 0 to 2*PI\r\n     * @param {boolean} counterClockwise - arc direction, true - clockwise, false - counterclockwise\r\n     */\r\n    constructor(...args) {\r\n        super();\r\n        /**\r\n         * Arc center\r\n         * @type {Point}\r\n         */\r\n        this.pc = new Flatten.Point();\r\n        /**\r\n         * Arc radius\r\n         * @type {number}\r\n         */\r\n        this.r = 1;\r\n        /**\r\n         * Arc start angle in radians\r\n         * @type {number}\r\n         */\r\n        this.startAngle = 0;\r\n        /**\r\n         * Arc end angle in radians\r\n         * @type {number}\r\n         */\r\n        this.endAngle = 2 * Math.PI;\r\n        /**\r\n         * Arc orientation\r\n         * @type {boolean}\r\n         */\r\n        this.counterClockwise = Flatten.CCW;\r\n\r\n        if (args.length === 0)\r\n            return;\r\n\r\n        if (args.length === 1 && args[0] instanceof Object && args[0].name === \"arc\") {\r\n            let {pc, r, startAngle, endAngle, counterClockwise} = args[0];\r\n            this.pc = new Flatten.Point(pc.x, pc.y);\r\n            this.r = r;\r\n            this.startAngle = startAngle;\r\n            this.endAngle = endAngle;\r\n            this.counterClockwise = counterClockwise;\r\n        } else {\r\n            let [pc, r, startAngle, endAngle, counterClockwise] = [...args];\r\n            if (pc && pc instanceof Flatten.Point) this.pc = pc.clone();\r\n            if (r !== undefined) this.r = r;\r\n            if (startAngle !== undefined) this.startAngle = startAngle;\r\n            if (endAngle !== undefined) this.endAngle = endAngle;\r\n            if (counterClockwise !== undefined) this.counterClockwise = counterClockwise;\r\n        }\r\n\r\n        // throw Flatten.Errors.ILLEGAL_PARAMETERS; unreachable code\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of arc\r\n     * @returns {Arc}\r\n     */\r\n    clone() {\r\n        return new Flatten.Arc(this.pc.clone(), this.r, this.startAngle, this.endAngle, this.counterClockwise);\r\n    }\r\n\r\n    /**\r\n     * Get sweep angle in radians. Sweep angle is non-negative number from 0 to 2*PI\r\n     * @returns {number}\r\n     */\r\n    get sweep() {\r\n        if (Flatten.Utils.EQ(this.startAngle, this.endAngle))\r\n            return 0.0;\r\n        if (Flatten.Utils.EQ(Math.abs(this.startAngle - this.endAngle), Flatten.PIx2)) {\r\n            return Flatten.PIx2;\r\n        }\r\n        let sweep;\r\n        if (this.counterClockwise) {\r\n            sweep = Flatten.Utils.GT(this.endAngle, this.startAngle) ?\r\n                this.endAngle - this.startAngle : this.endAngle - this.startAngle + Flatten.PIx2;\r\n        } else {\r\n            sweep = Flatten.Utils.GT(this.startAngle, this.endAngle) ?\r\n                this.startAngle - this.endAngle : this.startAngle - this.endAngle + Flatten.PIx2;\r\n        }\r\n\r\n        if (Flatten.Utils.GT(sweep, Flatten.PIx2)) {\r\n            sweep -= Flatten.PIx2;\r\n        }\r\n        if (Flatten.Utils.LT(sweep, 0)) {\r\n            sweep += Flatten.PIx2;\r\n        }\r\n        return sweep;\r\n    }\r\n\r\n    /**\r\n     * Get start point of arc\r\n     * @returns {Point}\r\n     */\r\n    get start() {\r\n        let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\r\n        return p0.rotate(this.startAngle, this.pc);\r\n    }\r\n\r\n    /**\r\n     * Get end point of arc\r\n     * @returns {Point}\r\n     */\r\n    get end() {\r\n        let p0 = new Flatten.Point(this.pc.x + this.r, this.pc.y);\r\n        return p0.rotate(this.endAngle, this.pc);\r\n    }\r\n\r\n    /**\r\n     * Get center of arc\r\n     * @returns {Point}\r\n     */\r\n    get center() {\r\n        return this.pc.clone();\r\n    }\r\n\r\n    get vertices() {\r\n        return [this.start.clone(), this.end.clone()];\r\n    }\r\n\r\n    /**\r\n     * Get arc length\r\n     * @returns {number}\r\n     */\r\n    get length() {\r\n        return Math.abs(this.sweep * this.r);\r\n    }\r\n\r\n    /**\r\n     * Get bounding box of the arc\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        let func_arcs = this.breakToFunctional();\r\n        let box = func_arcs.reduce((acc, arc) => acc.merge(arc.start.box), new Flatten.Box());\r\n        box = box.merge(this.end.box);\r\n        return box;\r\n    }\r\n\r\n    /**\r\n     * Returns true if arc contains point, false otherwise\r\n     * @param {Point} pt - point to test\r\n     * @returns {boolean}\r\n     */\r\n    contains(pt) {\r\n        // first check if  point on circle (pc,r)\r\n        if (!Flatten.Utils.EQ(this.pc.distanceTo(pt)[0], this.r))\r\n            return false;\r\n\r\n        // point on circle\r\n\r\n        if (pt.equalTo(this.start))\r\n            return true;\r\n\r\n        let angle = new Flatten.Vector(this.pc, pt).slope;\r\n        let test_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise);\r\n        return Flatten.Utils.LE(test_arc.length, this.length);\r\n    }\r\n\r\n    /**\r\n     * When given point belongs to arc, return array of two arcs split by this point. If points is incident\r\n     * to start or end point of the arc, return clone of the arc. If point does not belong to the arcs, return\r\n     * empty array.\r\n     * @param {Point} pt Query point\r\n     * @returns {Arc[]}\r\n     */\r\n    split(pt) {\r\n        if (this.start.equalTo(pt))\r\n            return [null, this.clone()];\r\n\r\n        if (this.end.equalTo(pt))\r\n            return [this.clone(), null];\r\n\r\n        let angle = new Flatten.Vector(this.pc, pt).slope;\r\n\r\n        return [\r\n            new Flatten.Arc(this.pc, this.r, this.startAngle, angle, this.counterClockwise),\r\n            new Flatten.Arc(this.pc, this.r, angle, this.endAngle, this.counterClockwise)\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * Return middle point of the arc\r\n     * @returns {Point}\r\n     */\r\n    middle() {\r\n        let endAngle = this.counterClockwise ? this.startAngle + this.sweep / 2 : this.startAngle - this.sweep / 2;\r\n        let arc = new Flatten.Arc(this.pc, this.r, this.startAngle, endAngle, this.counterClockwise);\r\n        return arc.end;\r\n    }\r\n\r\n    /**\r\n     * Get point at given length\r\n     * @param {number} length - The length along the arc\r\n     * @returns {Point}\r\n     */\r\n    pointAtLength(length) {\r\n        if (length > this.length || length < 0) return null;\r\n        if (length === 0) return this.start;\r\n        if (length === this.length) return this.end;\r\n        let factor = length / this.length;\r\n        let endAngle = this.counterClockwise ? this.startAngle + this.sweep * factor : this.startAngle - this.sweep * factor;\r\n        let arc = new Flatten.Arc(this.pc, this.r, this.startAngle, endAngle, this.counterClockwise);\r\n        return arc.end;\r\n    }\r\n\r\n    /**\r\n     * Returns chord height (\"sagitta\") of the arc\r\n     * @returns {number}\r\n     */\r\n    chordHeight() {\r\n        return (1.0 - Math.cos(Math.abs(this.sweep / 2.0))) * this.r;\r\n    }\r\n\r\n    /**\r\n     * Returns array of intersection points between arc and other shape\r\n     * @param {Shape} shape Shape of the one of supported types <br/>\r\n     * @returns {Point[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectLine2Arc(shape, this);\r\n        }\r\n        if (shape instanceof Flatten.Ray) {\r\n            return intersectRay2Arc(shape, this);\r\n        }\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectArc2Circle(this, shape);\r\n        }\r\n        if (shape instanceof Flatten.Segment) {\r\n            return intersectSegment2Arc(shape, this);\r\n        }\r\n        if (shape instanceof Flatten.Box) {\r\n            return intersectArc2Box(this, shape);\r\n        }\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectArc2Arc(this, shape);\r\n        }\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return intersectArc2Polygon(this, shape);\r\n        }\r\n        if (shape instanceof Flatten.Multiline) {\r\n            return intersectShape2Multiline(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from arc to shape and return array [distance, shortest segment]\r\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n     * @returns {number} distance from arc to shape\r\n     * @returns {Segment} shortest segment between arc and shape (started at arc, ended at shape)\r\n\r\n     */\r\n    distanceTo(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            let [dist, shortest_segment] = Flatten.Distance.point2arc(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            let [dist, shortest_segment] = Flatten.Distance.arc2circle(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            let [dist, shortest_segment] = Flatten.Distance.arc2line(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            let [dist, shortest_segment] = Flatten.Distance.segment2arc(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            let [dist, shortest_segment] = Flatten.Distance.arc2arc(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2polygon(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.PlanarSet) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2planarSet(this, shape);\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Multiline) {\r\n           return Flatten.Distance.shape2multiline(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Breaks arc in extreme point 0, pi/2, pi, 3*pi/2 and returns array of sub-arcs\r\n     * @returns {Arc[]}\r\n     */\r\n    breakToFunctional() {\r\n        let func_arcs_array = [];\r\n        let angles = [0, Math.PI / 2, 2 * Math.PI / 2, 3 * Math.PI / 2];\r\n        let pts = [\r\n            this.pc.translate(this.r, 0),\r\n            this.pc.translate(0, this.r),\r\n            this.pc.translate(-this.r, 0),\r\n            this.pc.translate(0, -this.r)\r\n        ];\r\n\r\n        // If arc contains extreme point,\r\n        // create test arc started at start point and ended at this extreme point\r\n        let test_arcs = [];\r\n        for (let i = 0; i < 4; i++) {\r\n            if (pts[i].on(this)) {\r\n                test_arcs.push(new Flatten.Arc(this.pc, this.r, this.startAngle, angles[i], this.counterClockwise));\r\n            }\r\n        }\r\n\r\n        if (test_arcs.length === 0) {                  // arc does contain any extreme point\r\n            func_arcs_array.push(this.clone());\r\n        } else {                                        // arc passes extreme point\r\n            // sort these arcs by length\r\n            test_arcs.sort((arc1, arc2) => arc1.length - arc2.length);\r\n\r\n            for (let i = 0; i < test_arcs.length; i++) {\r\n                let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\r\n                let new_arc;\r\n                if (prev_arc) {\r\n                    new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, test_arcs[i].endAngle, this.counterClockwise);\r\n                } else {\r\n                    new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, test_arcs[i].endAngle, this.counterClockwise);\r\n                }\r\n                if (!Flatten.Utils.EQ_0(new_arc.length)) {\r\n                    func_arcs_array.push(new_arc.clone());\r\n                }\r\n            }\r\n\r\n            // add last sub arc\r\n            let prev_arc = func_arcs_array.length > 0 ? func_arcs_array[func_arcs_array.length - 1] : undefined;\r\n            let new_arc;\r\n            if (prev_arc) {\r\n                new_arc = new Flatten.Arc(this.pc, this.r, prev_arc.endAngle, this.endAngle, this.counterClockwise);\r\n            } else {\r\n                new_arc = new Flatten.Arc(this.pc, this.r, this.startAngle, this.endAngle, this.counterClockwise);\r\n            }\r\n            // It could be 2*PI when occasionally start = 0 and end = 2*PI but this is not valid for breakToFunctional\r\n            if (!Flatten.Utils.EQ_0(new_arc.length) && !Flatten.Utils.EQ(new_arc.sweep, 2*Math.PI)) {\r\n                func_arcs_array.push(new_arc.clone());\r\n            }\r\n        }\r\n        return func_arcs_array;\r\n    }\r\n\r\n    /**\r\n     * Return tangent unit vector in the start point in the direction from start to end\r\n     * @returns {Vector}\r\n     */\r\n    tangentInStart() {\r\n        let vec = new Flatten.Vector(this.pc, this.start);\r\n        let angle = this.counterClockwise ? Math.PI / 2. : -Math.PI / 2.;\r\n        return vec.rotate(angle).normalize();\r\n    }\r\n\r\n    /**\r\n     * Return tangent unit vector in the end point in the direction from end to start\r\n     * @returns {Vector}\r\n     */\r\n    tangentInEnd() {\r\n        let vec = new Flatten.Vector(this.pc, this.end);\r\n        let angle = this.counterClockwise ? -Math.PI / 2. : Math.PI / 2.;\r\n        return vec.rotate(angle).normalize();\r\n    }\r\n\r\n    /**\r\n     * Returns new arc with swapped start and end angles and reversed direction\r\n     * @returns {Arc}\r\n     */\r\n    reverse() {\r\n        return new Flatten.Arc(this.pc, this.r, this.endAngle, this.startAngle, !this.counterClockwise);\r\n    }\r\n\r\n    /**\r\n     * Return new arc transformed using affine transformation matrix <br/>\r\n     * @param {Matrix} matrix - affine transformation matrix\r\n     * @returns {Arc}\r\n     */\r\n    transform(matrix = new Flatten.Matrix()) {\r\n        let newStart = this.start.transform(matrix);\r\n        let newEnd = this.end.transform(matrix);\r\n        let newCenter = this.pc.transform(matrix);\r\n        let newDirection = this.counterClockwise;\r\n        if (matrix.a * matrix.d < 0) {\r\n          newDirection = !newDirection;\r\n        }\r\n        return Flatten.Arc.arcSE(newCenter, newStart, newEnd, newDirection);\r\n    }\r\n\r\n    static arcSE(center, start, end, counterClockwise) {\r\n        let {vector} = Flatten;\r\n        let startAngle = vector(center, start).slope;\r\n        let endAngle = vector(center, end).slope;\r\n        if (Flatten.Utils.EQ(startAngle, endAngle)) {\r\n            endAngle += 2 * Math.PI;\r\n            counterClockwise = true;\r\n        }\r\n        let r = vector(center, start).length;\r\n\r\n        return new Flatten.Arc(center, r, startAngle, endAngle, counterClockwise);\r\n    }\r\n\r\n    definiteIntegral(ymin = 0) {\r\n        let f_arcs = this.breakToFunctional();\r\n        let area = f_arcs.reduce((acc, arc) => acc + arc.circularSegmentDefiniteIntegral(ymin), 0.0);\r\n        return area;\r\n    }\r\n\r\n    circularSegmentDefiniteIntegral(ymin) {\r\n        let line = new Flatten.Line(this.start, this.end);\r\n        let onLeftSide = this.pc.leftTo(line);\r\n        let segment = new Flatten.Segment(this.start, this.end);\r\n        let areaTrapez = segment.definiteIntegral(ymin);\r\n        let areaCircularSegment = this.circularSegmentArea();\r\n        let area = onLeftSide ? areaTrapez - areaCircularSegment : areaTrapez + areaCircularSegment;\r\n        return area;\r\n    }\r\n\r\n    circularSegmentArea() {\r\n        return (0.5 * this.r * this.r * (this.sweep - Math.sin(this.sweep)))\r\n    }\r\n\r\n    /**\r\n     * Sort given array of points from arc start to end, assuming all points lay on the arc\r\n     * @param {Point[]} pts array of points\r\n     * @returns {Point[]} new array sorted\r\n     */\r\n    sortPoints(pts) {\r\n        let {vector} = Flatten;\r\n        return pts.slice().sort( (pt1, pt2) => {\r\n            let slope1 = vector(this.pc, pt1).slope;\r\n            let slope2 = vector(this.pc, pt2).slope;\r\n            if (slope1 < slope2) {\r\n                return -1;\r\n            }\r\n            if (slope1 > slope2) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        })\r\n    }\r\n\r\n    get name() {\r\n        return \"arc\"\r\n    }\r\n\r\n    /**\r\n     * Return string to draw arc in svg\r\n     * @param {Object} attrs - an object with attributes of svg path element\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        let largeArcFlag = this.sweep <= Math.PI ? \"0\" : \"1\";\r\n        let sweepFlag = this.counterClockwise ? \"1\" : \"0\";\r\n\r\n        if (Flatten.Utils.EQ(this.sweep, 2 * Math.PI)) {\r\n            let circle = new Flatten.Circle(this.pc, this.r);\r\n            return circle.svg(attrs);\r\n        } else {\r\n            return `\\n<path d=\"M${this.start.x},${this.start.y}\r\n                             A${this.r},${this.r} 0 ${largeArcFlag},${sweepFlag} ${this.end.x},${this.end.y}\"\r\n                    ${convertToString({fill: \"none\", ...attrs})} />`\r\n        }\r\n    }\r\n\r\n}\r\n\r\nFlatten.Arc = Arc;\r\n/**\r\n * Function to create arc equivalent to \"new\" constructor\r\n * @param args\r\n */\r\nconst arc = (...args) => new Flatten.Arc(...args);\r\nFlatten.arc = arc;\r\n\r\n/**\r\n * Created by Alex Bol on 3/7/2017.\r\n */\r\n\r\n/**\r\n * Class Box represents bounding box of the shape.\r\n * It may also represent axis-aligned rectangle\r\n * @type {Box}\r\n */\r\nclass Box extends Shape {\r\n    /**\r\n     *\r\n     * @param {number} xmin - minimal x coordinate\r\n     * @param {number} ymin - minimal y coordinate\r\n     * @param {number} xmax - maximal x coordinate\r\n     * @param {number} ymax - maximal y coordinate\r\n     */\r\n    constructor(xmin = undefined, ymin = undefined, xmax = undefined, ymax = undefined) {\r\n        super();\r\n        /**\r\n         * Minimal x coordinate\r\n         * @type {number}\r\n         */\r\n        this.xmin = xmin;\r\n        /**\r\n         * Minimal y coordinate\r\n         * @type {number}\r\n         */\r\n        this.ymin = ymin;\r\n        /**\r\n         * Maximal x coordinate\r\n         * @type {number}\r\n         */\r\n        this.xmax = xmax;\r\n        /**\r\n         * Maximal y coordinate\r\n         * @type {number}\r\n         */\r\n        this.ymax = ymax;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of box\r\n     * @returns {Box}\r\n     */\r\n    clone() {\r\n        return new Box(this.xmin, this.ymin, this.xmax, this.ymax);\r\n    }\r\n\r\n    /**\r\n     * Property low need for interval tree interface\r\n     * @returns {Point}\r\n     */\r\n    get low() {\r\n        return new Flatten.Point(this.xmin, this.ymin);\r\n    }\r\n\r\n    /**\r\n     * Property high need for interval tree interface\r\n     * @returns {Point}\r\n     */\r\n    get high() {\r\n        return new Flatten.Point(this.xmax, this.ymax);\r\n    }\r\n\r\n    /**\r\n     * Property max returns the box itself !\r\n     * @returns {Box}\r\n     */\r\n    get max() {\r\n        return this.clone();\r\n    }\r\n    \r\n    /**\r\n     * Return center of the box\r\n     * @returns {Point}\r\n     */\r\n    get center() {\r\n        return new Flatten.Point((this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2);\r\n    }\r\n\r\n    /**\r\n     * Return the width of the box\r\n     * @returns {number}\r\n     */\r\n    get width() {\r\n        return Math.abs(this.xmax - this.xmin);\r\n    }\r\n\r\n    /**\r\n     * Return the height of the box\r\n     * @returns {number}\r\n     */\r\n    get height() {\r\n        return Math.abs(this.ymax - this.ymin);\r\n    }\r\n    \r\n    /**\r\n     * Return property box like all other shapes\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return this.clone();\r\n    }\r\n\r\n    /**\r\n     * Returns true if not intersected with other box\r\n     * @param {Box} other_box - other box to test\r\n     * @returns {boolean}\r\n     */\r\n    not_intersect(other_box) {\r\n        return (\r\n            this.xmax < other_box.xmin ||\r\n            this.xmin > other_box.xmax ||\r\n            this.ymax < other_box.ymin ||\r\n            this.ymin > other_box.ymax\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns true if intersected with other box\r\n     * @param {Box} other_box - Query box\r\n     * @returns {boolean}\r\n     */\r\n    intersect(other_box) {\r\n        return !this.not_intersect(other_box);\r\n    }\r\n\r\n    /**\r\n     * Returns new box merged with other box\r\n     * @param {Box} other_box - Other box to merge with\r\n     * @returns {Box}\r\n     */\r\n    merge(other_box) {\r\n        return new Box(\r\n            this.xmin === undefined ? other_box.xmin : Math.min(this.xmin, other_box.xmin),\r\n            this.ymin === undefined ? other_box.ymin : Math.min(this.ymin, other_box.ymin),\r\n            this.xmax === undefined ? other_box.xmax : Math.max(this.xmax, other_box.xmax),\r\n            this.ymax === undefined ? other_box.ymax : Math.max(this.ymax, other_box.ymax)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Defines predicate \"less than\" between two boxes. Need for interval index\r\n     * @param {Box} other_box - other box\r\n     * @returns {boolean} - true if this box less than other box, false otherwise\r\n     */\r\n    less_than(other_box) {\r\n        if (this.low.lessThan(other_box.low))\r\n            return true;\r\n        if (this.low.equalTo(other_box.low) && this.high.lessThan(other_box.high))\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if this box is equal to other box, false otherwise\r\n     * @param {Box} other_box - query box\r\n     * @returns {boolean}\r\n     */\r\n    equal_to(other_box) {\r\n        return (this.low.equalTo(other_box.low) && this.high.equalTo(other_box.high));\r\n    }\r\n\r\n    output() {\r\n        return this.clone();\r\n    }\r\n\r\n    static comparable_max(box1, box2) {\r\n        // return pt1.lessThan(pt2) ? pt2.clone() : pt1.clone();\r\n        return box1.merge(box2);\r\n    }\r\n\r\n    static comparable_less_than(pt1, pt2) {\r\n        return pt1.lessThan(pt2);\r\n    }\r\n\r\n    /**\r\n     * Set new values to the box object\r\n     * @param {number} xmin - mininal x coordinate\r\n     * @param {number} ymin - minimal y coordinate\r\n     * @param {number} xmax - maximal x coordinate\r\n     * @param {number} ymax - maximal y coordinate\r\n     */\r\n    set(xmin, ymin, xmax, ymax) {\r\n        this.xmin = xmin;\r\n        this.ymin = ymin;\r\n        this.xmax = xmax;\r\n        this.ymax = ymax;\r\n    }\r\n\r\n    /**\r\n     * Transform box into array of points from low left corner in counterclockwise\r\n     * @returns {Point[]}\r\n     */\r\n    toPoints() {\r\n        return [\r\n            new Flatten.Point(this.xmin, this.ymin),\r\n            new Flatten.Point(this.xmax, this.ymin),\r\n            new Flatten.Point(this.xmax, this.ymax),\r\n            new Flatten.Point(this.xmin, this.ymax)\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Transform box into array of segments from low left corner in counterclockwise\r\n     * @returns {Segment[]}\r\n     */\r\n    toSegments() {\r\n        let pts = this.toPoints();\r\n        return [\r\n            new Flatten.Segment(pts[0], pts[1]),\r\n            new Flatten.Segment(pts[1], pts[2]),\r\n            new Flatten.Segment(pts[2], pts[3]),\r\n            new Flatten.Segment(pts[3], pts[0])\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Box rotation is not supported\r\n     * Attempt to rotate box throws error\r\n     * @param {number} angle - angle in radians\r\n     * @param {Point} [center=(0,0)] center\r\n     */\r\n    rotate(angle, center = new Flatten.Point()) {\r\n            throw Errors.OPERATION_IS_NOT_SUPPORTED\r\n    }\r\n\r\n    /**\r\n     * Return new box transformed using affine transformation matrix\r\n     * New box is a bounding box of transformed corner points\r\n     * @param {Matrix} m - affine transformation matrix\r\n     * @returns {Box}\r\n     */\r\n    transform(m = new Flatten.Matrix()) {\r\n        const transformed_points = this.toPoints().map(pt => pt.transform(m));\r\n        return transformed_points.reduce(\r\n            (new_box, pt) => new_box.merge(pt.box), new Box())\r\n    }\r\n\r\n    /**\r\n     * Return true if box contains shape: no point of shape lies outside the box\r\n     * @param {AnyShape} shape - test shape\r\n     * @returns {boolean}\r\n     */\r\n    contains(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return (shape.x >= this.xmin) && (shape.x <= this.xmax) && (shape.y >= this.ymin) && (shape.y <= this.ymax);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return shape.vertices.every(vertex => this.contains(vertex))\r\n        }\r\n\r\n        if (shape instanceof Flatten.Box) {\r\n            return shape.toSegments().every(segment => this.contains(segment))\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return this.contains(shape.box)\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return shape.vertices.every(vertex => this.contains(vertex)) &&\r\n                shape.toSegments().every(segment => intersectSegment2Arc(segment, shape).length === 0)\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line || shape instanceof Flatten.Ray) {\r\n            return false\r\n        }\r\n\r\n        if (shape instanceof Flatten.Multiline) {\r\n            return shape.toShapes().every(shape => this.contains(shape))\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return this.contains(shape.box)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment from box to shape and return as array [distance, shortest segment]\r\n     * @param {Shape} shape Shape of the one of supported types Point, Line, Circle, Segment, Arc, Polygon or Planar Set\r\n     * @returns {number} distance from box to shape\r\n     * @returns {Segment} shortest segment between box and shape (started at box, ended at shape)\r\n     */\r\n    distanceTo(shape) {\r\n        const distanceInfos = this.toSegments()\r\n          .map(segment => segment.distanceTo(shape));\r\n        let shortestDistanceInfo = [\r\n          Number.MAX_SAFE_INTEGER,\r\n          null,\r\n        ];\r\n        distanceInfos.forEach(distanceInfo => {\r\n          if (distanceInfo[0] < shortestDistanceInfo[0]) {\r\n            shortestDistanceInfo = distanceInfo;\r\n          }\r\n        });\r\n        return shortestDistanceInfo;\r\n    }\r\n\r\n    get name() {\r\n        return \"box\"\r\n    }\r\n\r\n    /**\r\n     * Return string to draw box in svg\r\n     * @param {Object} attrs - an object with attributes of svg rectangle element\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        const width = this.xmax - this.xmin;\r\n        const height = this.ymax - this.ymin;\r\n        return `\\n<rect x=\"${this.xmin}\" y=\"${this.ymin}\" width=\"${width}\" height=\"${height}\"\r\n                ${convertToString({fill: \"none\", ...attrs})} />`;\r\n    };\r\n}\r\n\r\nFlatten.Box = Box;\r\n/**\r\n * Shortcut to create new box\r\n * @param args\r\n * @returns {Box}\r\n */\r\nconst box = (...args) => new Flatten.Box(...args);\r\nFlatten.box = box;\r\n\r\n/**\r\n * Created by Alex Bol on 3/17/2017.\r\n */\r\n\r\n\r\n/**\r\n * Class representing an edge of polygon. Edge shape may be Segment or Arc.\r\n * Each edge contains references to the next and previous edges in the face of the polygon.\r\n *\r\n * @type {Edge}\r\n */\r\nclass Edge {\r\n    /**\r\n     * Construct new instance of edge\r\n     * @param {Shape} shape Shape of type Segment or Arc\r\n     */\r\n    constructor(shape) {\r\n        /**\r\n         * Shape of the edge: Segment or Arc\r\n         * @type {Segment|Arc}\r\n         */\r\n        this.shape = shape;\r\n        /**\r\n         * Pointer to the next edge in the face\r\n         * @type {Edge}\r\n         */\r\n        this.next = undefined;\r\n        /**\r\n         * Pointer to the previous edge in the face\r\n         * @type {Edge}\r\n         */\r\n        this.prev = undefined;\r\n        /**\r\n         * Pointer to the face containing this edge\r\n         * @type {Face}\r\n         */\r\n        this.face = undefined;\r\n        /**\r\n         * \"Arc distance\" from the face start\r\n         * @type {number}\r\n         */\r\n        this.arc_length = 0;\r\n        /**\r\n         * Start inclusion flag (inside/outside/boundary)\r\n         * @type {*}\r\n         */\r\n        this.bvStart = undefined;\r\n        /**\r\n         * End inclusion flag (inside/outside/boundary)\r\n         * @type {*}\r\n         */\r\n        this.bvEnd = undefined;\r\n        /**\r\n         * Edge inclusion flag (Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY)\r\n         * @type {*}\r\n         */\r\n        this.bv = undefined;\r\n        /**\r\n         * Overlap flag for boundary edge (Flatten.OVERLAP_SAME/Flatten.OVERLAP_OPPOSITE)\r\n         * @type {*}\r\n         */\r\n        this.overlap = undefined;\r\n    }\r\n\r\n    /**\r\n     * Get edge start point\r\n     */\r\n    get start() {\r\n        return this.shape.start;\r\n    }\r\n\r\n    /**\r\n     * Get edge end point\r\n     */\r\n    get end() {\r\n        return this.shape.end;\r\n    }\r\n\r\n    /**\r\n     * Get edge length\r\n     */\r\n    get length() {\r\n        return this.shape.length;\r\n    }\r\n\r\n    /**\r\n     * Get bounding box of the edge\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return this.shape.box;\r\n    }\r\n\r\n    get isSegment() {\r\n        return this.shape instanceof Flatten.Segment;\r\n    }\r\n\r\n    get isArc() {\r\n        return this.shape instanceof Flatten.Arc;\r\n    }\r\n\r\n    get isLine() {\r\n        return this.shape instanceof Flatten.Line;\r\n    }\r\n\r\n    get isRay() {\r\n        return this.shape instanceof Flatten.Ray\r\n    }\r\n\r\n    /**\r\n     * Get middle point of the edge\r\n     * @returns {Point}\r\n     */\r\n    middle() {\r\n        return this.shape.middle();\r\n    }\r\n\r\n    /**\r\n     * Get point at given length\r\n     * @param {number} length - The length along the edge\r\n     * @returns {Point}\r\n     */\r\n    pointAtLength(length) {\r\n        return this.shape.pointAtLength(length);\r\n    }\r\n\r\n    /**\r\n     * Returns true if point belongs to the edge, false otherwise\r\n     * @param {Point} pt - test point\r\n     */\r\n    contains(pt) {\r\n        return this.shape.contains(pt);\r\n    }\r\n\r\n    /**\r\n     * Set inclusion flag of the edge with respect to another polygon\r\n     * Inclusion flag is one of Flatten.INSIDE, Flatten.OUTSIDE, Flatten.BOUNDARY\r\n     * @param polygon\r\n     */\r\n    setInclusion(polygon) {\r\n        if (this.bv !== undefined) return this.bv;\r\n\r\n        if (this.shape instanceof Flatten.Line || this.shape instanceof Flatten.Ray) {\r\n            this.bv = Flatten.OUTSIDE;\r\n            return this.bv;\r\n        }\r\n\r\n        if (this.bvStart === undefined) {\r\n            this.bvStart = ray_shoot(polygon, this.start);\r\n        }\r\n        if (this.bvEnd === undefined) {\r\n            this.bvEnd = ray_shoot(polygon, this.end);\r\n        }\r\n        /* At least one end outside - the whole edge outside */\r\n        if (this.bvStart === Flatten.OUTSIDE || this.bvEnd == Flatten.OUTSIDE) {\r\n            this.bv = Flatten.OUTSIDE;\r\n        }\r\n        /* At least one end inside - the whole edge inside */\r\n        else if (this.bvStart === Flatten.INSIDE || this.bvEnd == Flatten.INSIDE) {\r\n            this.bv = Flatten.INSIDE;\r\n        }\r\n        /* Both are boundary - check the middle point */\r\n        else {\r\n            let bvMiddle = ray_shoot(polygon, this.middle());\r\n            // let boundary = this.middle().distanceTo(polygon)[0] < 10*Flatten.DP_TOL;\r\n            // let bvMiddle = boundary ? Flatten.BOUNDARY : ray_shoot(polygon, this.middle());\r\n            this.bv = bvMiddle;\r\n        }\r\n        return this.bv;\r\n    }\r\n\r\n    /**\r\n     * Set overlapping between two coincident boundary edges\r\n     * Overlapping flag is one of Flatten.OVERLAP_SAME or Flatten.OVERLAP_OPPOSITE\r\n     * @param edge\r\n     */\r\n    setOverlap(edge) {\r\n        let flag = undefined;\r\n        let shape1 = this.shape;\r\n        let shape2 = edge.shape;\r\n\r\n        if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Segment) {\r\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end)) {\r\n                flag = Flatten.OVERLAP_SAME;\r\n            } else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start)) {\r\n                flag = Flatten.OVERLAP_OPPOSITE;\r\n            }\r\n        } else if (shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Arc) {\r\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && /*shape1.counterClockwise === shape2.counterClockwise &&*/\r\n                shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_SAME;\r\n            } else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && /*shape1.counterClockwise !== shape2.counterClockwise &&*/\r\n                shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_OPPOSITE;\r\n            }\r\n        } else if (shape1 instanceof Flatten.Segment && shape2 instanceof Flatten.Arc ||\r\n            shape1 instanceof Flatten.Arc && shape2 instanceof Flatten.Segment) {\r\n            if (shape1.start.equalTo(shape2.start) && shape1.end.equalTo(shape2.end) && shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_SAME;\r\n            } else if (shape1.start.equalTo(shape2.end) && shape1.end.equalTo(shape2.start) && shape1.middle().equalTo(shape2.middle())) {\r\n                flag = Flatten.OVERLAP_OPPOSITE;\r\n            }\r\n        }\r\n\r\n        /* Do not update overlap flag if already set on previous chain */\r\n        if (this.overlap === undefined) this.overlap = flag;\r\n        if (edge.overlap === undefined) edge.overlap = flag;\r\n    }\r\n\r\n    svg() {\r\n        if (this.shape instanceof Flatten.Segment) {\r\n            return ` L${this.shape.end.x},${this.shape.end.y}`;\r\n        } else if (this.shape instanceof Flatten.Arc) {\r\n            let arc = this.shape;\r\n            let largeArcFlag;\r\n            let sweepFlag = arc.counterClockwise ? \"1\" : \"0\";\r\n\r\n            // Draw full circe arc as special case: split it into two half-circles\r\n            if (Flatten.Utils.EQ(arc.sweep, 2 * Math.PI)) {\r\n                let sign = arc.counterClockwise ? 1 : -1;\r\n                let halfArc1 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle, arc.startAngle + sign * Math.PI, arc.counterClockwise);\r\n                let halfArc2 = new Flatten.Arc(arc.pc, arc.r, arc.startAngle + sign * Math.PI, arc.endAngle, arc.counterClockwise);\r\n\r\n                largeArcFlag = \"0\";\r\n\r\n                return ` A${halfArc1.r},${halfArc1.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc1.end.x},${halfArc1.end.y}\r\n                    A${halfArc2.r},${halfArc2.r} 0 ${largeArcFlag},${sweepFlag} ${halfArc2.end.x},${halfArc2.end.y}`\r\n            } else {\r\n                largeArcFlag = arc.sweep <= Math.PI ? \"0\" : \"1\";\r\n\r\n                return ` A${arc.r},${arc.r} 0 ${largeArcFlag},${sweepFlag} ${arc.end.x},${arc.end.y}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    toJSON() {\r\n        return this.shape.toJSON();\r\n    }\r\n}\r\nFlatten.Edge = Edge;\r\n\r\n/**\r\n * Class implements circular bidirectional linked list <br/>\r\n * LinkedListElement - object of any type that has properties next and prev.\r\n */\r\nclass CircularLinkedList extends LinkedList {\r\n    constructor(first, last) {\r\n        super(first, last);\r\n        this.setCircularLinks();\r\n    }\r\n\r\n    setCircularLinks() {\r\n        if (this.isEmpty()) return;\r\n        this.last.next = this.first;\r\n        this.first.prev = this.last;\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        let element = undefined;\r\n        return {\r\n            next: () => {\r\n                let value = element ? element : this.first;\r\n                let done = this.first ? (element ? element === this.first : false) : true;\r\n                element = value ? value.next : undefined;\r\n                return {value: value, done: done};\r\n            }\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Append new element to the end of the list\r\n     * @param {LinkedListElement} element - new element to be appended\r\n     * @returns {CircularLinkedList}\r\n     */\r\n    append(element) {\r\n        super.append(element);\r\n        this.setCircularLinks();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert new element to the list after elementBefore\r\n     * @param {LinkedListElement} newElement - new element to be inserted\r\n     * @param {LinkedListElement} elementBefore - element in the list to insert after it\r\n     * @returns {CircularLinkedList}\r\n     */\r\n    insert(newElement, elementBefore) {\r\n        super.insert(newElement, elementBefore);\r\n        this.setCircularLinks();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove element from the list\r\n     * @param {LinkedListElement} element - element to be removed from the list\r\n     * @returns {CircularLinkedList}\r\n     */\r\n    remove(element) {\r\n        super.remove(element);\r\n        // this.setCircularLinks();\r\n        return this;\r\n    }\r\n}\r\n\r\n/**\r\n * Created by Alex Bol on 3/17/2017.\r\n */\r\n\r\n\r\n/**\r\n * Class representing a face (closed loop) in a [polygon]{@link Flatten.Polygon} object.\r\n * Face is a circular bidirectionally linked list of [edges]{@link Flatten.Edge}.\r\n * Face object cannot be instantiated with a constructor.\r\n * Instead, use [polygon.addFace()]{@link Flatten.Polygon#addFace} method.\r\n * <br/>\r\n * Note, that face only set entry point to the linked list of edges but does not contain edges by itself.\r\n * Container of edges is a property of the polygon object. <br/>\r\n *\r\n * @example\r\n * // Face implements \"next\" iterator which enables to iterate edges in for loop:\r\n * for (let edge of face) {\r\n *      console.log(edge.shape.length)     // do something\r\n * }\r\n *\r\n * // Instead, it is possible to iterate edges as linked list, starting from face.first:\r\n * let edge = face.first;\r\n * do {\r\n *   console.log(edge.shape.length);   // do something\r\n *   edge = edge.next;\r\n * } while (edge != face.first)\r\n */\r\nclass Face extends CircularLinkedList {\r\n    constructor(polygon, ...args) {\r\n        super();            // construct empty list of edges\r\n        /**\r\n         * Reference to the first edge in face\r\n         */\r\n        // this.first;\r\n        /**\r\n         * Reference to the last edge in face\r\n         */\r\n        // this.last;\r\n\r\n        this._box = undefined;  // new Box();\r\n        this._orientation = undefined;\r\n\r\n        if (args.length === 0) {\r\n            return;\r\n        }\r\n\r\n        /* If passed an array it supposed to be:\r\n         1) array of shapes that performs close loop or\r\n         2) array of points that performs set of vertices\r\n         */\r\n        if (args.length === 1) {\r\n            if (args[0] instanceof Array) {\r\n                // let argsArray = args[0];\r\n                let shapes = args[0];  // argsArray[0];\r\n                if (shapes.length === 0)\r\n                    return;\r\n\r\n                /* array of Flatten.Points */\r\n                if (shapes.every((shape) => {return shape instanceof Flatten.Point})) {\r\n                    let segments = Face.points2segments(shapes);\r\n                    this.shapes2face(polygon.edges, segments);\r\n                }\r\n                /* array of points as pairs of numbers */\r\n                else if (shapes.every((shape) => {return shape instanceof Array && shape.length === 2})) {\r\n                    let points = shapes.map((shape) => new Flatten.Point(shape[0],shape[1]));\r\n                    let segments = Face.points2segments(points);\r\n                    this.shapes2face(polygon.edges, segments);\r\n                }\r\n                /* array of segments ot arcs */\r\n                else if (shapes.every((shape) => {\r\n                    return (shape instanceof Flatten.Segment || shape instanceof Flatten.Arc)\r\n                })) {\r\n                    this.shapes2face(polygon.edges, shapes);\r\n                }\r\n                // this is from JSON.parse object\r\n                else if (shapes.every((shape) => {\r\n                    return (shape.name === \"segment\" || shape.name === \"arc\")\r\n                })) {\r\n                    let flattenShapes = [];\r\n                    for (let shape of shapes) {\r\n                        let flattenShape;\r\n                        if (shape.name === \"segment\") {\r\n                            flattenShape = new Flatten.Segment(shape);\r\n                        } else {\r\n                            flattenShape = new Flatten.Arc(shape);\r\n                        }\r\n                        flattenShapes.push(flattenShape);\r\n                    }\r\n                    this.shapes2face(polygon.edges, flattenShapes);\r\n                }\r\n            }\r\n            /* Create new face and copy edges into polygon.edges set */\r\n            else if (args[0] instanceof Face) {\r\n                let face = args[0];\r\n                this.first = face.first;\r\n                this.last = face.last;\r\n                for (let edge of face) {\r\n                    polygon.edges.add(edge);\r\n                }\r\n            }\r\n            /* Instantiate face from a circle in CCW orientation */\r\n            else if (args[0] instanceof Flatten.Circle) {\r\n                this.shapes2face(polygon.edges, [args[0].toArc(CCW)]);\r\n            }\r\n            /* Instantiate face from a box in CCW orientation */\r\n            else if (args[0] instanceof Flatten.Box) {\r\n                let box = args[0];\r\n                this.shapes2face(polygon.edges, [\r\n                    new Flatten.Segment(new Flatten.Point(box.xmin, box.ymin), new Flatten.Point(box.xmax, box.ymin)),\r\n                    new Flatten.Segment(new Flatten.Point(box.xmax, box.ymin), new Flatten.Point(box.xmax, box.ymax)),\r\n                    new Flatten.Segment(new Flatten.Point(box.xmax, box.ymax), new Flatten.Point(box.xmin, box.ymax)),\r\n                    new Flatten.Segment(new Flatten.Point(box.xmin, box.ymax), new Flatten.Point(box.xmin, box.ymin))\r\n                ]);\r\n            }\r\n        }\r\n        /* If passed two edges, consider them as start and end of the face loop */\r\n        /* THIS METHOD WILL BE USED BY BOOLEAN OPERATIONS */\r\n        /* Assume that edges already copied to polygon.edges set in the clip algorithm !!! */\r\n        if (args.length === 2 && args[0] instanceof Flatten.Edge && args[1] instanceof Flatten.Edge) {\r\n            this.first = args[0];                          // first edge in face or undefined\r\n            this.last = args[1];                           // last edge in face or undefined\r\n            this.last.next = this.first;\r\n            this.first.prev = this.last;\r\n\r\n            // set arc length\r\n            this.setArcLength();\r\n\r\n            // this.box = this.getBox();\r\n            // this.orientation = this.getOrientation();      // face direction cw or ccw\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return array of edges from first to last\r\n     * @returns {Array}\r\n     */\r\n    get edges() {\r\n        return this.toArray();\r\n    }\r\n\r\n    /**\r\n     * Return array of shapes which comprise face\r\n     * @returns {Array}\r\n     */\r\n    get shapes() {\r\n        return this.edges.map(edge => edge.shape.clone());\r\n    }\r\n\r\n    /**\r\n     * Return bounding box of the face\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        if (this._box === undefined) {\r\n            let box = new Flatten.Box();\r\n            for (let edge of this) {\r\n                box = box.merge(edge.box);\r\n            }\r\n            this._box = box;\r\n        }\r\n        return this._box;\r\n    }\r\n\r\n    /**\r\n     * Get all edges length\r\n     * @returns {number}\r\n     */\r\n    get perimeter() {\r\n        return this.last.arc_length + this.last.length\r\n    }\r\n\r\n    /**\r\n     * Get point on face boundary at given length\r\n     * @param {number} length - The length along the face boundary\r\n     * @returns {Point}\r\n     */\r\n    pointAtLength(length) {\r\n        if (length > this.perimeter || length < 0) return null;\r\n        let point = null;\r\n        for (let edge of this) {\r\n            if (length >= edge.arc_length &&\r\n                (edge === this.last || length < edge.next.arc_length)) {\r\n                point = edge.pointAtLength(length - edge.arc_length);\r\n                break;\r\n            }\r\n        }\r\n        return point;\r\n    }\r\n\r\n    static points2segments(points) {\r\n        let segments = [];\r\n        for (let i = 0; i < points.length; i++) {\r\n            // skip zero length segment\r\n            if (points[i].equalTo(points[(i + 1) % points.length]))\r\n                continue;\r\n            segments.push(new Flatten.Segment(points[i], points[(i + 1) % points.length]));\r\n        }\r\n        return segments;\r\n    }\r\n\r\n    shapes2face(edges, shapes) {\r\n        for (let shape of shapes) {\r\n            let edge = new Flatten.Edge(shape);\r\n            this.append(edge);\r\n            // this.box = this.box.merge(shape.box);\r\n            edges.add(edge);\r\n        }\r\n        // this.orientation = this.getOrientation();              // face direction cw or ccw\r\n    }\r\n\r\n    /**\r\n     * Append edge after the last edge of the face (and before the first edge). <br/>\r\n     * @param {Edge} edge - Edge to be appended to the linked list\r\n     * @returns {Face}\r\n     */\r\n    append(edge) {\r\n        super.append(edge);\r\n        // set arc length\r\n        this.setOneEdgeArcLength(edge);\r\n        edge.face = this;\r\n        // edges.add(edge);      // Add new edges into edges container\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert edge newEdge into the linked list after the edge edgeBefore <br/>\r\n     * @param {Edge} newEdge - Edge to be inserted into linked list\r\n     * @param {Edge} edgeBefore - Edge to insert newEdge after it\r\n     * @returns {Face}\r\n     */\r\n    insert(newEdge, edgeBefore) {\r\n        super.insert(newEdge, edgeBefore);\r\n        // set arc length\r\n        this.setOneEdgeArcLength(newEdge);\r\n        newEdge.face = this;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove the given edge from the linked list of the face <br/>\r\n     * @param {Edge} edge - Edge to be removed\r\n     * @returns {Face}\r\n     */\r\n    remove(edge) {\r\n        super.remove(edge);\r\n        // Recalculate arc length\r\n        this.setArcLength();\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Merge current edge with the next edge. Given edge will be extended,\r\n     * next edge after it will be removed. The distortion of the polygon\r\n     * is on the responsibility of the user of this method\r\n     * @param {Edge} edge - edge to be extended\r\n     * @returns {Face}\r\n     */\r\n    merge_with_next_edge(edge) {\r\n        edge.shape.end.x = edge.next.shape.end.x;\r\n        edge.shape.end.y = edge.next.shape.end.y;\r\n        this.remove(edge.next);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Reverse orientation of the face: first edge become last and vice a verse,\r\n     * all edges starts and ends swapped, direction of arcs inverted. If face was oriented\r\n     * clockwise, it becomes counterclockwise and vice versa\r\n     */\r\n    reverse() {\r\n        // collect edges in revert order with reverted shapes\r\n        let edges = [];\r\n        let edge_tmp = this.last;\r\n        do {\r\n            // reverse shape\r\n            edge_tmp.shape = edge_tmp.shape.reverse();\r\n            edges.push(edge_tmp);\r\n            edge_tmp = edge_tmp.prev;\r\n        } while (edge_tmp !== this.last);\r\n\r\n        // restore linked list\r\n        this.first = undefined;\r\n        this.last = undefined;\r\n        for (let edge of edges) {\r\n            if (this.first === undefined) {\r\n                edge.prev = edge;\r\n                edge.next = edge;\r\n                this.first = edge;\r\n                this.last = edge;\r\n            } else {\r\n                // append to end\r\n                edge.prev = this.last;\r\n                this.last.next = edge;\r\n\r\n                // update edge to be last\r\n                this.last = edge;\r\n\r\n                // restore circular links\r\n                this.last.next = this.first;\r\n                this.first.prev = this.last;\r\n\r\n            }\r\n            // set arc length\r\n            this.setOneEdgeArcLength(edge);\r\n        }\r\n\r\n        // Recalculate orientation, if set\r\n        if (this._orientation !== undefined) {\r\n            this._orientation = undefined;\r\n            this._orientation = this.orientation();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Set arc_length property for each of the edges in the face.\r\n     * Arc_length of the edge it the arc length from the first edge of the face\r\n     */\r\n    setArcLength() {\r\n        for (let edge of this) {\r\n            this.setOneEdgeArcLength(edge);\r\n            edge.face = this;\r\n        }\r\n    }\r\n\r\n    setOneEdgeArcLength(edge) {\r\n        if (edge === this.first) {\r\n            edge.arc_length = 0.0;\r\n        } else {\r\n            edge.arc_length = edge.prev.arc_length + edge.prev.length;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the absolute value of the area of the face\r\n     * @returns {number}\r\n     */\r\n    area() {\r\n        return Math.abs(this.signedArea());\r\n    }\r\n\r\n    /**\r\n     * Returns signed area of the simple face.\r\n     * Face is simple if it has no self intersections that change its orientation.\r\n     * Then the area will be positive if the orientation of the face is clockwise,\r\n     * and negative if orientation is counterclockwise.\r\n     * It may be zero if polygon is degenerated.\r\n     * @returns {number}\r\n     */\r\n    signedArea() {\r\n        let sArea = 0;\r\n        let ymin = this.box.ymin;\r\n        for (let edge of this) {\r\n            sArea += edge.shape.definiteIntegral(ymin);\r\n        }\r\n        return sArea;\r\n    }\r\n\r\n    /**\r\n     * Return face orientation: one of Flatten.ORIENTATION.CCW, Flatten.ORIENTATION.CW, Flatten.ORIENTATION.NOT_ORIENTABLE <br/>\r\n     * According to Green theorem the area of a closed curve may be calculated as double integral,\r\n     * and the sign of the integral will be defined by the direction of the curve.\r\n     * When the integral (\"signed area\") will be negative, direction is counterclockwise,\r\n     * when positive - clockwise and when it is zero, polygon is not orientable.\r\n     * See {@link https://mathinsight.org/greens_theorem_find_area}\r\n     * @returns {number}\r\n     */\r\n    orientation() {\r\n        if (this._orientation === undefined) {\r\n            let area = this.signedArea();\r\n            if (Flatten.Utils.EQ_0(area)) {\r\n                this._orientation = ORIENTATION.NOT_ORIENTABLE;\r\n            } else if (Flatten.Utils.LT(area, 0)) {\r\n                this._orientation = ORIENTATION.CCW;\r\n            } else {\r\n                this._orientation = ORIENTATION.CW;\r\n            }\r\n        }\r\n        return this._orientation;\r\n    }\r\n\r\n    /**\r\n     * Returns true if face of the polygon is simple (no self-intersection points found)\r\n     * NOTE: this method is incomplete because it does not exclude touching points.\r\n     * Self intersection test should check if polygon change orientation in the test point.\r\n     * @param {PlanarSet} edges - reference to polygon edges to provide search index\r\n     * @returns {boolean}\r\n     */\r\n    isSimple(edges) {\r\n        let ip = Face.getSelfIntersections(this, edges, true);\r\n        return ip.length === 0;\r\n    }\r\n\r\n    static getSelfIntersections(face, edges, exitOnFirst = false) {\r\n        let int_points = [];\r\n\r\n        // calculate intersections\r\n        for (let edge1 of face) {\r\n\r\n            // request edges of polygon in the box of edge1\r\n            let resp = edges.search(edge1.box);\r\n\r\n            // for each edge2 in response\r\n            for (let edge2 of resp) {\r\n\r\n                // Skip itself\r\n                if (edge1 === edge2)\r\n                    continue;\r\n\r\n                // Skip is edge2 belongs to another face\r\n                if (edge2.face !== face)\r\n                    continue;\r\n\r\n                // Skip next and previous edge if both are segment (if one of them arc - calc intersection)\r\n                if (edge1.shape instanceof Flatten.Segment && edge2.shape instanceof Flatten.Segment &&\r\n                    (edge1.next === edge2 || edge1.prev === edge2))\r\n                    continue;\r\n\r\n                // calculate intersections between edge1 and edge2\r\n                let ip = edge1.shape.intersect(edge2.shape);\r\n\r\n                // for each intersection point\r\n                for (let pt of ip) {\r\n\r\n                    // skip start-end connections\r\n                    if (pt.equalTo(edge1.start) && pt.equalTo(edge2.end) && edge2 === edge1.prev)\r\n                        continue;\r\n                    if (pt.equalTo(edge1.end) && pt.equalTo(edge2.start) && edge2 === edge1.next)\r\n                        continue;\r\n\r\n                    int_points.push(pt);\r\n\r\n                    if (exitOnFirst)\r\n                        break;\r\n                }\r\n\r\n                if (int_points.length > 0 && exitOnFirst)\r\n                    break;\r\n            }\r\n\r\n            if (int_points.length > 0 && exitOnFirst)\r\n                break;\r\n\r\n        }\r\n        return int_points;\r\n    }\r\n\r\n    /**\r\n     * Returns edge which contains given point\r\n     * @param {Point} pt - test point\r\n     * @returns {Edge}\r\n     */\r\n    findEdgeByPoint(pt) {\r\n        let edgeFound;\r\n        for (let edge of this) {\r\n            if (pt.equalTo(edge.shape.start)) continue\r\n            if (pt.equalTo(edge.shape.end) || edge.shape.contains(pt)) {\r\n                edgeFound = edge;\r\n                break;\r\n            }\r\n        }\r\n        return edgeFound;\r\n    }\r\n\r\n    /**\r\n     * Returns new polygon created from one face\r\n     * @returns {Polygon}\r\n     */\r\n    toPolygon() {\r\n        return new Flatten.Polygon(this.shapes);\r\n    }\r\n\r\n    toJSON() {\r\n        return this.edges.map(edge => edge.toJSON());\r\n    }\r\n\r\n    /**\r\n     * Returns string to be assigned to \"d\" attribute inside defined \"path\"\r\n     * @returns {string}\r\n     */\r\n    svg() {\r\n        let svgStr = `M${this.first.start.x},${this.first.start.y}`;\r\n        for (let edge of this) {\r\n            svgStr += edge.svg();\r\n        }\r\n        svgStr += ` z`;\r\n        return svgStr;\r\n    }\r\n\r\n}\r\n\r\nFlatten.Face = Face;\r\n\r\n/**\r\n * Class representing a ray (a half-infinite line).\r\n * @type {Ray}\r\n */\r\nclass Ray extends Shape {\r\n    /**\r\n     * Ray may be constructed by setting an <b>origin</b> point and a <b>normal</b> vector, so that any point <b>x</b>\r\n     * on a ray fit an equation: <br />\r\n     *  (<b>x</b> - <b>origin</b>) * <b>vector</b> = 0 <br />\r\n     * Ray defined by constructor is a right semi-infinite line with respect to the normal vector <br/>\r\n     * If normal vector is omitted ray is considered horizontal (normal vector is (0,1)). <br/>\r\n     * Don't be confused: direction of the normal vector is orthogonal to the ray <br/>\r\n     * @param {Point} pt - start point\r\n     * @param {Vector} norm - normal vector\r\n     */\r\n    constructor(...args) {\r\n        super();\r\n        this.pt = new Flatten.Point();\r\n        this.norm = new Flatten.Vector(0,1);\r\n\r\n        if (args.length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (args.length >= 1 && args[0] instanceof Flatten.Point) {\r\n            this.pt = args[0].clone();\r\n        }\r\n\r\n        if (args.length === 1) {\r\n            return;\r\n        }\r\n\r\n        if (args.length === 2 && args[1] instanceof Flatten.Vector) {\r\n            this.norm = args[1].clone();\r\n            return;\r\n        }\r\n\r\n        throw Errors.ILLEGAL_PARAMETERS;\r\n    }\r\n\r\n    /**\r\n     * Return new cloned instance of ray\r\n     * @returns {Ray}\r\n     */\r\n    clone() {\r\n        return new Ray(this.pt, this.norm);\r\n    }\r\n\r\n    /**\r\n     * Slope of the ray - angle in radians between ray and axe x from 0 to 2PI\r\n     * @returns {number} - slope of the line\r\n     */\r\n    get slope() {\r\n        let vec = new Flatten.Vector(this.norm.y, -this.norm.x);\r\n        return vec.slope;\r\n    }\r\n\r\n    /**\r\n     * Returns half-infinite bounding box of the ray\r\n     * @returns {Box} - bounding box\r\n     */\r\n    get box() {\r\n        let slope = this.slope;\r\n        return new Flatten.Box(\r\n            slope > Math.PI/2 && slope < 3*Math.PI/2 ? Number.NEGATIVE_INFINITY : this.pt.x,\r\n            slope >= 0 && slope <= Math.PI ? this.pt.y : Number.NEGATIVE_INFINITY,\r\n            slope >= Math.PI/2 && slope <= 3*Math.PI/2 ? this.pt.x : Number.POSITIVE_INFINITY,\r\n            slope >= Math.PI && slope <= 2*Math.PI || slope === 0 ? this.pt.y : Number.POSITIVE_INFINITY\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Return ray start point\r\n     * @returns {Point} - ray start point\r\n     */\r\n    get start() {\r\n        return this.pt;\r\n    }\r\n\r\n    /**\r\n     * Ray has no end point?\r\n     * @returns {undefined}\r\n     */\r\n    get end() {return undefined;}\r\n\r\n    /**\r\n     * Return positive infinity number as length\r\n     * @returns {number}\r\n     */\r\n    get length() {return Number.POSITIVE_INFINITY;}\r\n\r\n    /**\r\n     * Returns true if point belongs to ray\r\n     * @param {Point} pt Query point\r\n     * @returns {boolean}\r\n     */\r\n    contains(pt) {\r\n        if (this.pt.equalTo(pt)) {\r\n            return true;\r\n        }\r\n        /* Ray contains point if vector to point is orthogonal to the ray normal vector\r\n            and cross product from vector to point is positive */\r\n        let vec = new Flatten.Vector(this.pt, pt);\r\n        return Flatten.Utils.EQ_0(this.norm.dot(vec)) && Flatten.Utils.GE(vec.cross(this.norm),0);\r\n    }\r\n\r\n    /**\r\n     * Return coordinate of the point that lies on the ray in the transformed\r\n     * coordinate system where center is the projection of the point(0,0) to\r\n     * the line containing this ray and axe y is collinear to the normal vector. <br/>\r\n     * This method assumes that point lies on the ray\r\n     * @param {Point} pt - point on a ray\r\n     * @returns {number}\r\n     */\r\n    coord(pt) {\r\n        return vector$1(pt.x, pt.y).cross(this.norm);\r\n    }\r\n\r\n    /**\r\n     * Split ray with point and return array of segment and new ray\r\n     * @param {Point} pt\r\n     * @returns [Segment,Ray]\r\n     */\r\n    split(pt) {\r\n        if (!this.contains(pt))\r\n            return [];\r\n\r\n        if (this.pt.equalTo(pt)) {\r\n            return [this]\r\n        }\r\n\r\n        return [\r\n            new Flatten.Segment(this.pt, pt),\r\n            new Flatten.Ray(pt, this.norm)\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * Returns array of intersection points between ray and another shape\r\n     * @param {Shape} shape - Shape to intersect with ray\r\n     * @returns {Point[]} array of intersection points\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return intersectRay2Segment(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectRay2Arc(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectRay2Line(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Ray) {\r\n            return intersectRay2Ray(this, shape)\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectRay2Circle(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Box) {\r\n            return intersectRay2Box(this, shape);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return  intersectRay2Polygon(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return new line rotated by angle\r\n     * @param {number} angle - angle in radians\r\n     * @param {Point} center - center of rotation\r\n     */\r\n    rotate(angle, center = new Flatten.Point()) {\r\n        return new Flatten.Ray(\r\n            this.pt.rotate(angle, center),\r\n            this.norm.rotate(angle)\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Return new ray transformed by affine transformation matrix\r\n     * @param {Matrix} m - affine transformation matrix (a,b,c,d,tx,ty)\r\n     * @returns {Ray}\r\n     */\r\n    transform(m) {\r\n        return new Flatten.Ray(\r\n            this.pt.transform(m),\r\n            this.norm.clone()\r\n        )\r\n    }\r\n\r\n    get name() {\r\n        return \"ray\"\r\n    }\r\n\r\n    /**\r\n     * Return string to draw svg segment representing ray inside given box\r\n     * @param {Box} box Box representing drawing area\r\n     * @param {Object} attrs - an object with attributes of svg segment element\r\n     */\r\n    svg(box, attrs = {}) {\r\n        let line = new Flatten.Line(this.pt, this.norm);\r\n        let ip = intersectLine2Box(line, box);\r\n        ip = ip.filter( pt => this.contains(pt) );\r\n        if (ip.length === 0 || ip.length === 2)\r\n            return \"\";\r\n        let segment = new Flatten.Segment(this.pt, ip[0]);\r\n        return segment.svg(attrs);\r\n    }\r\n\r\n}\r\n\r\nFlatten.Ray = Ray;\r\n\r\nconst ray = (...args) => new Flatten.Ray(...args);\r\nFlatten.ray = ray;\r\n\r\n/**\r\n * Created by Alex Bol on 3/15/2017.\r\n */\r\n\r\n\r\n/**\r\n * Class representing a polygon.<br/>\r\n * Polygon in FlattenJS is a multipolygon comprised from a set of [faces]{@link Flatten.Face}. <br/>\r\n * Face, in turn, is a closed loop of [edges]{@link Flatten.Edge}, where edge may be segment or circular arc<br/>\r\n * @type {Polygon}\r\n */\r\nlet Polygon$1 = class Polygon {\r\n    /**\r\n     * Constructor creates new instance of polygon. With no arguments new polygon is empty.<br/>\r\n     * Constructor accepts as argument array that define loop of shapes\r\n     * or array of arrays in case of multi polygon <br/>\r\n     * Loop may be defined in different ways: <br/>\r\n     * - array of shapes of type Segment or Arc <br/>\r\n     * - array of points (Flatten.Point) <br/>\r\n     * - array of numeric pairs which represent points <br/>\r\n     * - box or circle object <br/>\r\n     * Alternatively, it is possible to use polygon.addFace method\r\n     * @param {args} - array of shapes or array of arrays\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Container of faces (closed loops), may be empty\r\n         * @type {PlanarSet}\r\n         */\r\n        this.faces = new Flatten.PlanarSet();\r\n        /**\r\n         * Container of edges\r\n         * @type {PlanarSet}\r\n         */\r\n        this.edges = new Flatten.PlanarSet();\r\n\r\n        /* It may be array of something that may represent one loop (face) or\r\n         array of arrays that represent multiple loops\r\n         */\r\n        let args = [...arguments];\r\n        if (args.length === 1 &&\r\n            ((args[0] instanceof Array && args[0].length > 0) ||\r\n                args[0] instanceof Flatten.Circle || args[0] instanceof Flatten.Box)) {\r\n            let argsArray = args[0];\r\n            if (args[0] instanceof Array && args[0].every((loop) => {\r\n                return loop instanceof Array\r\n            })) {\r\n                if (argsArray.every(el => {\r\n                    return el instanceof Array && el.length === 2 && typeof (el[0]) === \"number\" && typeof (el[1]) === \"number\"\r\n                })) {\r\n                    this.faces.add(new Flatten.Face(this, argsArray));    // one-loop polygon as array of pairs of numbers\r\n                } else {\r\n                    for (let loop of argsArray) {   // multi-loop polygon\r\n                        /* Check extra level of nesting for GeoJSON-style multi polygons */\r\n                        if (loop instanceof Array && loop[0] instanceof Array &&\r\n                            loop[0].every(el => {\r\n                                return el instanceof Array && el.length === 2 && typeof (el[0]) === \"number\" && typeof (el[1]) === \"number\"\r\n                            })) {\r\n                            for (let loop1 of loop) {\r\n                                this.faces.add(new Flatten.Face(this, loop1));\r\n                            }\r\n                        } else {\r\n                            this.faces.add(new Flatten.Face(this, loop));\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this.faces.add(new Flatten.Face(this, argsArray));    // one-loop polygon\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * (Getter) Returns bounding box of the polygon\r\n     * @returns {Box}\r\n     */\r\n    get box() {\r\n        return [...this.faces].reduce((acc, face) => acc.merge(face.box), new Flatten.Box());\r\n    }\r\n\r\n    /**\r\n     * (Getter) Returns array of vertices\r\n     * @returns {Array}\r\n     */\r\n    get vertices() {\r\n        return [...this.edges].map(edge => edge.start);\r\n    }\r\n\r\n    /**\r\n     * Create new cloned instance of the polygon\r\n     * @returns {Polygon}\r\n     */\r\n    clone() {\r\n        let polygon = new Polygon();\r\n        for (let face of this.faces) {\r\n            polygon.addFace(face.shapes);\r\n        }\r\n        return polygon;\r\n    }\r\n\r\n    /**\r\n     * Return true is polygon has no edges\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return this.edges.size === 0;\r\n    }\r\n\r\n    /**\r\n     * Return true if polygon is valid for boolean operations\r\n     * Polygon is valid if <br/>\r\n     * 1. All faces are simple polygons (there are no self-intersected polygons) <br/>\r\n     * 2. All faces are orientable and there is no island inside island or hole inside hole - TODO <br/>\r\n     * 3. There is no intersections between faces (excluding touching) - TODO <br/>\r\n     * @returns {boolean}\r\n     */\r\n    isValid() {\r\n        let valid = true;\r\n        // 1. Polygon is invalid if at least one face is not simple\r\n        for (let face of this.faces) {\r\n            if (!face.isSimple(this.edges)) {\r\n                valid = false;\r\n                break;\r\n            }\r\n        }\r\n        // 2. TODO: check if no island inside island and no hole inside hole\r\n        // 3. TODO: check the there is no intersection between faces\r\n        return valid;\r\n    }\r\n\r\n    /**\r\n     * Returns area of the polygon. Area of an island will be added, area of a hole will be subtracted\r\n     * @returns {number}\r\n     */\r\n    area() {\r\n        let signedArea = [...this.faces].reduce((acc, face) => acc + face.signedArea(), 0);\r\n        return Math.abs(signedArea);\r\n    }\r\n\r\n    /**\r\n     * Add new face to polygon. Returns added face\r\n     * @param {Point[]|Segment[]|Arc[]|Circle|Box} args -  new face may be create with one of the following ways: <br/>\r\n     * 1) array of points that describe closed path (edges are segments) <br/>\r\n     * 2) array of shapes (segments and arcs) which describe closed path <br/>\r\n     * 3) circle - will be added as counterclockwise arc <br/>\r\n     * 4) box - will be added as counterclockwise rectangle <br/>\r\n     * You can chain method face.reverse() is you need to change direction of the creates face\r\n     * @returns {Face}\r\n     */\r\n    addFace(...args) {\r\n        let face = new Flatten.Face(this, ...args);\r\n        this.faces.add(face);\r\n        return face;\r\n    }\r\n\r\n    /**\r\n     * Delete existing face from polygon\r\n     * @param {Face} face Face to be deleted\r\n     * @returns {boolean}\r\n     */\r\n    deleteFace(face) {\r\n        for (let edge of face) {\r\n            this.edges.delete(edge);\r\n        }\r\n        return this.faces.delete(face);\r\n    }\r\n\r\n    /**\r\n     * Clear all faces and create new faces from edges\r\n     */\r\n    recreateFaces() {\r\n        // Remove all faces\r\n        this.faces.clear();\r\n        for (let edge of this.edges) {\r\n            edge.face = null;\r\n        }\r\n\r\n        // Restore faces\r\n        let first;\r\n        let unassignedEdgeFound = true;\r\n        while (unassignedEdgeFound) {\r\n            unassignedEdgeFound = false;\r\n            for (let edge of this.edges) {\r\n                if (edge.face === null) {\r\n                    first = edge;\r\n                    unassignedEdgeFound = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (unassignedEdgeFound) {\r\n                let last = first;\r\n                do {\r\n                    last = last.next;\r\n                } while (last.next !== first)\r\n\r\n                this.addFace(first, last);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete chain of edges from the face.\r\n     * @param {Face} face Face to remove chain\r\n     * @param {Edge} edgeFrom Start of the chain of edges to be removed\r\n     * @param {Edge} edgeTo End of the chain of edges to be removed\r\n     */\r\n    removeChain(face, edgeFrom, edgeTo) {\r\n        // Special case: all edges removed\r\n        if (edgeTo.next === edgeFrom) {\r\n            this.deleteFace(face);\r\n            return;\r\n        }\r\n        for (let edge = edgeFrom; edge !== edgeTo.next; edge = edge.next) {\r\n            face.remove(edge);\r\n            this.edges.delete(edge);      // delete from PlanarSet of edges and update index\r\n            if (face.isEmpty()) {\r\n                this.deleteFace(face);    // delete from PlanarSet of faces and update index\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add point as a new vertex and split edge. Point supposed to belong to an edge.\r\n     * When edge is split, new edge created from the start of the edge to the new vertex\r\n     * and inserted before current edge.\r\n     * Current edge is trimmed and updated.\r\n     * Method returns new edge added. If no edge added, it returns edge before vertex\r\n     * @param {Point} pt Point to be added as a new vertex\r\n     * @param {Edge} edge Edge to be split with new vertex and then trimmed from start\r\n     * @returns {Edge}\r\n     */\r\n    addVertex(pt, edge) {\r\n        let shapes = edge.shape.split(pt);\r\n        // if (shapes.length < 2) return;\r\n\r\n        if (shapes[0] === null)   // point incident to edge start vertex, return previous edge\r\n            return edge.prev;\r\n\r\n        if (shapes[1] === null)   // point incident to edge end vertex, return edge itself\r\n            return edge;\r\n\r\n        let newEdge = new Flatten.Edge(shapes[0]);\r\n        let edgeBefore = edge.prev;\r\n\r\n        /* Insert first split edge into linked list after edgeBefore */\r\n        edge.face.insert(newEdge, edgeBefore);\r\n\r\n        // Remove old edge from edges container and 2d index\r\n        this.edges.delete(edge);\r\n\r\n        // Insert new edge to the edges container and 2d index\r\n        this.edges.add(newEdge);\r\n\r\n        // Update edge shape with second split edge keeping links\r\n        edge.shape = shapes[1];\r\n\r\n        // Add updated edge to the edges container and 2d index\r\n        this.edges.add(edge);\r\n\r\n        return newEdge;\r\n    }\r\n\r\n    /**\r\n     * Merge given edge with next edge and remove vertex between them\r\n     * @param {Edge} edge\r\n     */\r\n    removeEndVertex(edge) {\r\n        const edge_next = edge.next;\r\n        if (edge_next === edge) return\r\n        edge.face.merge_with_next_edge(edge);\r\n        this.edges.delete(edge_next);\r\n    }\r\n\r\n    /**\r\n     * Cut polygon with multiline and return a new polygon\r\n     * @param {Multiline} multiline\r\n     * @returns {Polygon}\r\n     */\r\n    cut(multiline) {\r\n        let newPoly = this.clone();\r\n\r\n        // smart intersections\r\n        let intersections = {\r\n            int_points1: [],\r\n            int_points2: [],\r\n            int_points1_sorted: [],\r\n            int_points2_sorted: []\r\n        };\r\n\r\n        // intersect each edge of multiline with each edge of the polygon\r\n        // and create smart intersections\r\n        for (let edge1 of multiline.edges) {\r\n            for (let edge2 of newPoly.edges) {\r\n                let ip = intersectEdge2Edge(edge1, edge2);\r\n                // for each intersection point\r\n                for (let pt of ip) {\r\n                    addToIntPoints(edge1, pt, intersections.int_points1);\r\n                    addToIntPoints(edge2, pt, intersections.int_points2);\r\n                }\r\n            }\r\n        }\r\n\r\n        // No intersections - return a copy of the original polygon\r\n        if (intersections.int_points1.length === 0)\r\n            return newPoly;\r\n\r\n        // sort smart intersections\r\n        intersections.int_points1_sorted = getSortedArray(intersections.int_points1);\r\n        intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\r\n\r\n        // split by intersection points\r\n        splitByIntersections(multiline, intersections.int_points1_sorted);\r\n        splitByIntersections(newPoly, intersections.int_points2_sorted);\r\n\r\n        // filter duplicated intersection points\r\n        filterDuplicatedIntersections(intersections);\r\n\r\n        // sort intersection points again after filtering\r\n        intersections.int_points1_sorted = getSortedArray(intersections.int_points1);\r\n        intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\r\n\r\n        // initialize inclusion flags for edges of multiline incident to intersections\r\n        initializeInclusionFlags(intersections.int_points1);\r\n\r\n        // calculate inclusion flag for edges of multiline incident to intersections\r\n        calculateInclusionFlags(intersections.int_points1, newPoly);\r\n\r\n        // filter intersections between two edges that got same inclusion flag\r\n        for (let int_point1 of intersections.int_points1_sorted) {\r\n            if (int_point1.edge_before && int_point1.edge_after &&\r\n                int_point1.edge_before.bv === int_point1.edge_after.bv) {\r\n                intersections.int_points2[int_point1.id] = -1;   // to be filtered out\r\n                int_point1.id = -1;                              // to be filtered out\r\n            }\r\n        }\r\n        intersections.int_points1 = intersections.int_points1.filter( int_point => int_point.id >= 0);\r\n        intersections.int_points2 = intersections.int_points2.filter( int_point => int_point.id >= 0);\r\n        intersections.int_points1.forEach((int_point, index) => { int_point.id = index; });\r\n        intersections.int_points2.forEach((int_point, index) => { int_point.id = index; });\r\n\r\n\r\n        // No intersections left after filtering - return a copy of the original polygon\r\n        if (intersections.int_points1.length === 0)\r\n            return newPoly;\r\n\r\n        // sort intersection points 3d time after filtering\r\n        intersections.int_points1_sorted = getSortedArray(intersections.int_points1);\r\n        intersections.int_points2_sorted = getSortedArray(intersections.int_points2);\r\n\r\n        // Add new inner edges between intersection points\r\n        let int_point1_prev;\r\n        let int_point1_curr;\r\n        for (let i = 1; i <  intersections.int_points1_sorted.length; i++) {\r\n            int_point1_curr = intersections.int_points1_sorted[i];\r\n            int_point1_prev = intersections.int_points1_sorted[i-1];\r\n            if (int_point1_curr.edge_before && int_point1_curr.edge_before.bv === INSIDE$2) {\r\n                let edgeFrom = int_point1_prev.edge_after;\r\n                let edgeTo = int_point1_curr.edge_before;\r\n                let newEdges = multiline.getChain(edgeFrom, edgeTo);\r\n                insertBetweenIntPoints(intersections.int_points2[int_point1_prev.id], intersections.int_points2[int_point1_curr.id], newEdges);\r\n                newEdges.forEach(edge => newPoly.edges.add(edge));\r\n\r\n                newEdges = newEdges.reverse().map(edge => new Flatten.Edge(edge.shape.reverse()));\r\n                for (let k=0; k < newEdges.length-1; k++) {\r\n                    newEdges[k].next = newEdges[k+1];\r\n                    newEdges[k+1].prev = newEdges[k];\r\n                }\r\n                insertBetweenIntPoints(intersections.int_points2[int_point1_curr.id], intersections.int_points2[int_point1_prev.id], newEdges);\r\n                newEdges.forEach(edge => newPoly.edges.add(edge));\r\n            }\r\n\r\n        }\r\n\r\n        // Recreate faces\r\n        newPoly.recreateFaces();\r\n\r\n        return newPoly\r\n    }\r\n\r\n    /**\r\n     * A special case of cut() function\r\n     * The return is a polygon cut with line\r\n     * @param {Line} line - cutting line\r\n     * @returns {Polygon} newPoly - resulted polygon\r\n     */\r\n    cutWithLine(line) {\r\n        let multiline = new Multiline$1([line]);\r\n        return this.cut(multiline);\r\n    }\r\n\r\n    /**\r\n     * Returns the first found edge of polygon that contains given point\r\n     * If point is a vertex, return the edge where the point is an end vertex, not a start one\r\n     * @param {Point} pt\r\n     * @returns {Edge}\r\n     */\r\n    findEdgeByPoint(pt) {\r\n        let edge;\r\n        for (let face of this.faces) {\r\n            edge = face.findEdgeByPoint(pt);\r\n            if (edge !== undefined)\r\n                break;\r\n        }\r\n        return edge;\r\n    }\r\n\r\n    /**\r\n     * Split polygon into array of polygons, where each polygon is an outer face with all\r\n     * containing inner faces\r\n     * @returns {Flatten.Polygon[]}\r\n     */\r\n    splitToIslands() {\r\n        if (this.isEmpty()) return [];      // return empty array if polygon is empty\r\n        let polygons = this.toArray();      // split into array of one-loop polygons\r\n        /* Sort polygons by area in descending order */\r\n        polygons.sort((polygon1, polygon2) => polygon2.area() - polygon1.area());\r\n        /* define orientation of the island by orientation of the first polygon in array */\r\n        let orientation = [...polygons[0].faces][0].orientation();\r\n        /* Create output array from polygons with same orientation as a first polygon (array of islands) */\r\n        let newPolygons = polygons.filter(polygon => [...polygon.faces][0].orientation() === orientation);\r\n        for (let polygon of polygons) {\r\n            let face = [...polygon.faces][0];\r\n            if (face.orientation() === orientation) continue;  // skip same orientation\r\n            /* Proceed with opposite orientation */\r\n            /* Look if any of island polygons contains tested polygon as a hole */\r\n            for (let islandPolygon of newPolygons) {\r\n                if (face.shapes.every(shape => islandPolygon.contains(shape))) {\r\n                    islandPolygon.addFace(face.shapes);      // add polygon as a hole in islandPolygon\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // TODO: assert if not all polygons added into output\r\n        return newPolygons;\r\n    }\r\n\r\n    /**\r\n     * Reverse orientation of all faces to opposite\r\n     * @returns {Polygon}\r\n     */\r\n    reverse() {\r\n        for (let face of this.faces) {\r\n            face.reverse();\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns true if polygon contains shape: no point of shape lay outside of the polygon,\r\n     * false otherwise\r\n     * @param {Shape} shape - test shape\r\n     * @returns {boolean}\r\n     */\r\n    contains(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            let rel = ray_shoot(this, shape);\r\n            return rel === INSIDE$2 || rel === BOUNDARY$1;\r\n        } else {\r\n            return cover(this, shape);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return distance and shortest segment between polygon and other shape as array [distance, shortest_segment]\r\n     * @param {Shape} shape Shape of one of the types Point, Circle, Line, Segment, Arc or Polygon\r\n     * @returns {Number | Segment}\r\n     */\r\n    distanceTo(shape) {\r\n        // let {Distance} = Flatten;\r\n\r\n        if (shape instanceof Flatten.Point) {\r\n            let [dist, shortest_segment] = Flatten.Distance.point2polygon(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle ||\r\n            shape instanceof Flatten.Line ||\r\n            shape instanceof Flatten.Segment ||\r\n            shape instanceof Flatten.Arc) {\r\n            let [dist, shortest_segment] = Flatten.Distance.shape2polygon(shape, this);\r\n            shortest_segment = shortest_segment.reverse();\r\n            return [dist, shortest_segment];\r\n        }\r\n\r\n        /* this method is bit faster */\r\n        if (shape instanceof Flatten.Polygon) {\r\n            let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n            let dist, shortest_segment;\r\n\r\n            for (let edge of this.edges) {\r\n                // let [dist, shortest_segment] = Distance.shape2polygon(edge.shape, shape);\r\n                let min_stop = min_dist_and_segment[0];\r\n                [dist, shortest_segment] = Flatten.Distance.shape2planarSet(edge.shape, shape.edges, min_stop);\r\n                if (Flatten.Utils.LT(dist, min_stop)) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n            return min_dist_and_segment;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return array of intersection points between polygon and other shape\r\n     * @param shape Shape of the one of supported types <br/>\r\n     * @returns {Point[]}\r\n     */\r\n    intersect(shape) {\r\n        if (shape instanceof Flatten.Point) {\r\n            return this.contains(shape) ? [shape] : [];\r\n        }\r\n\r\n        if (shape instanceof Flatten.Line) {\r\n            return intersectLine2Polygon(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Ray) {\r\n            return intersectRay2Polygon(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Circle) {\r\n            return intersectCircle2Polygon(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Segment) {\r\n            return intersectSegment2Polygon(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Arc) {\r\n            return intersectArc2Polygon(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Polygon) {\r\n            return intersectPolygon2Polygon(shape, this);\r\n        }\r\n\r\n        if (shape instanceof Flatten.Multiline) {\r\n            return intersectMultiline2Polygon(shape, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns new polygon translated by vector vec\r\n     * @param {Vector} vec\r\n     * @returns {Polygon}\r\n     */\r\n    translate(vec) {\r\n        let newPolygon = new Polygon();\r\n        for (let face of this.faces) {\r\n            newPolygon.addFace(face.shapes.map(shape => shape.translate(vec)));\r\n        }\r\n        return newPolygon;\r\n    }\r\n\r\n    /**\r\n     * Return new polygon rotated by given angle around given point\r\n     * If point omitted, rotate around origin (0,0)\r\n     * Positive value of angle defines rotation counterclockwise, negative - clockwise\r\n     * @param {number} angle - rotation angle in radians\r\n     * @param {Point} center - rotation center, default is (0,0)\r\n     * @returns {Polygon} - new rotated polygon\r\n     */\r\n    rotate(angle = 0, center = new Flatten.Point()) {\r\n        let newPolygon = new Polygon();\r\n        for (let face of this.faces) {\r\n            newPolygon.addFace(face.shapes.map(shape => shape.rotate(angle, center)));\r\n        }\r\n        return newPolygon;\r\n    }\r\n\r\n    /**\r\n     * Return new polygon with coordinates multiplied by scaling factor\r\n     * @param {number} sx - x-axis scaling factor\r\n     * @param {number} sy - y-axis scaling factor\r\n     * @returns {Polygon}\r\n     */\r\n    scale(sx, sy) {\r\n        let newPolygon = new Polygon();\r\n        for (let face of this.faces) {\r\n            newPolygon.addFace(face.shapes.map(shape => shape.scale(sx, sy)));\r\n        }\r\n        return newPolygon;\r\n    }\r\n\r\n    /**\r\n     * Return new polygon transformed using affine transformation matrix\r\n     * @param {Matrix} matrix - affine transformation matrix\r\n     * @returns {Polygon} - new polygon\r\n     */\r\n    transform(matrix = new Flatten.Matrix()) {\r\n        let newPolygon = new Polygon();\r\n        for (let face of this.faces) {\r\n            newPolygon.addFace(face.shapes.map(shape => shape.transform(matrix)));\r\n        }\r\n        return newPolygon;\r\n    }\r\n\r\n    /**\r\n     * This method returns an object that defines how data will be\r\n     * serialized when called JSON.stringify() method\r\n     * @returns {Object}\r\n     */\r\n    toJSON() {\r\n        return [...this.faces].map(face => face.toJSON());\r\n    }\r\n\r\n    /**\r\n     * Transform all faces into array of polygons\r\n     * @returns {Flatten.Polygon[]}\r\n     */\r\n    toArray() {\r\n        return [...this.faces].map(face => face.toPolygon());\r\n    }\r\n\r\n    /**\r\n     * Return string to be assigned to 'd' attribute of <path> element\r\n     * @returns {*}\r\n     */\r\n    dpath() {\r\n        return [...this.faces].reduce((acc, face) => acc + face.svg(), \"\")\r\n    }\r\n\r\n    /**\r\n     * Return string to draw polygon in svg\r\n     * @param attrs  - an object with attributes for svg path element\r\n     * @returns {string}\r\n     */\r\n    svg(attrs = {}) {\r\n        let svgStr = `\\n<path ${convertToString({fillRule: \"evenodd\", fill: \"lightcyan\", ...attrs})} d=\"`;\r\n        for (let face of this.faces) {\r\n            svgStr += `\\n${face.svg()}` ;\r\n        }\r\n        svgStr += `\" >\\n</path>`;\r\n        return svgStr;\r\n    }\r\n};\r\n\r\nFlatten.Polygon = Polygon$1;\r\n\r\n/**\r\n * Shortcut method to create new polygon\r\n */\r\nconst polygon = (...args) => new Flatten.Polygon(...args);\r\nFlatten.polygon = polygon;\r\n\r\nconst {Circle, Line, Point: Point$2, Vector, Utils} = Flatten;\r\n/**\r\n * Class Inversion represent operator of inversion in circle\r\n * Inversion is a transformation of the Euclidean plane that maps generalized circles\r\n * (where line is considered as a circle with infinite radius) into generalized circles\r\n * See also https://en.wikipedia.org/wiki/Inversive_geometry and\r\n * http://mathworld.wolfram.com/Inversion.html <br/>\r\n * @type {Inversion}\r\n */\r\nclass Inversion {\r\n    /**\r\n     * Inversion constructor\r\n     * @param {Circle} inversion_circle inversion circle\r\n     */\r\n    constructor(inversion_circle) {\r\n        this.circle = inversion_circle;\r\n    }\r\n\r\n\r\n    get inversion_circle() {\r\n        return this.circle;\r\n    }\r\n\r\n    static inversePoint(inversion_circle, point) {\r\n        const v = new Vector(inversion_circle.pc, point);\r\n        const k2 = inversion_circle.r * inversion_circle.r;\r\n        const len2 = v.dot(v);\r\n        const reflected_point = Utils.EQ_0(len2) ?\r\n            new Point$2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY) :\r\n            inversion_circle.pc.translate(v.multiply(k2 / len2));\r\n        return reflected_point;\r\n    }\r\n\r\n    static inverseCircle(inversion_circle, circle) {\r\n        const dist = inversion_circle.pc.distanceTo(circle.pc)[0];\r\n        if (Utils.EQ(dist, circle.r)) {     // Circle passing through inversion center mapped into line\r\n            let d = (inversion_circle.r * inversion_circle.r) / (2 * circle.r);\r\n            let v = new Vector(inversion_circle.pc, circle.pc);\r\n            v = v.normalize();\r\n            let pt = inversion_circle.pc.translate(v.multiply(d));\r\n\r\n            return new Line(pt, v);\r\n        } else {                           // Circle not passing through inversion center - map into another circle */\r\n            /* Taken from http://mathworld.wolfram.com */\r\n            let v = new Vector(inversion_circle.pc, circle.pc);\r\n            let s = inversion_circle.r * inversion_circle.r / (v.dot(v) - circle.r * circle.r);\r\n            let pc = inversion_circle.pc.translate(v.multiply(s));\r\n            let r = Math.abs(s) * circle.r;\r\n\r\n            return new Circle(pc, r);\r\n        }\r\n    }\r\n\r\n    static inverseLine(inversion_circle, line) {\r\n        const [dist, shortest_segment] = inversion_circle.pc.distanceTo(line);\r\n        if (Utils.EQ_0(dist)) {            // Line passing through inversion center, is mapping to itself\r\n            return line.clone();\r\n        } else {                           // Line not passing through inversion center is mapping into circle\r\n            let r = inversion_circle.r * inversion_circle.r / (2 * dist);\r\n            let v = new Vector(inversion_circle.pc, shortest_segment.end);\r\n            v = v.multiply(r / dist);\r\n            return new Circle(inversion_circle.pc.translate(v), r);\r\n        }\r\n    }\r\n\r\n    inverse(shape) {\r\n        if (shape instanceof Point$2) {\r\n            return Inversion.inversePoint(this.circle, shape);\r\n        }\r\n        else if (shape instanceof Circle) {\r\n            return Inversion.inverseCircle(this.circle, shape);\r\n        }\r\n        else if (shape instanceof Line) {\r\n            return Inversion.inverseLine(this.circle, shape);\r\n        }\r\n    }\r\n}\r\nFlatten.Inversion = Inversion;\r\n\r\n/**\r\n * Shortcut to create inversion operator\r\n * @param circle\r\n * @returns {Inversion}\r\n */\r\nconst inversion = (circle) => new Flatten.Inversion(circle);\r\nFlatten.inversion = inversion;\r\n\r\nclass Distance {\r\n    /**\r\n     * Calculate distance and shortest segment between points\r\n     * @param pt1\r\n     * @param pt2\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static point2point(pt1, pt2) {\r\n        return pt1.distanceTo(pt2);\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and line\r\n     * @param pt\r\n     * @param line\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static point2line(pt, line) {\r\n        let closest_point = pt.projectionOn(line);\r\n        let vec = new Flatten.Vector(pt, closest_point);\r\n        return [vec.length, new Flatten.Segment(pt, closest_point)];\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and circle\r\n     * @param pt\r\n     * @param circle\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static point2circle(pt, circle) {\r\n        let [dist2center, shortest_dist] = pt.distanceTo(circle.center);\r\n        if (Flatten.Utils.EQ_0(dist2center)) {\r\n            return [circle.r, new Flatten.Segment(pt, circle.toArc().start)];\r\n        } else {\r\n            let dist = Math.abs(dist2center - circle.r);\r\n            let v = new Flatten.Vector(circle.pc, pt).normalize().multiply(circle.r);\r\n            let closest_point = circle.pc.translate(v);\r\n            return [dist, new Flatten.Segment(pt, closest_point)];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and segment\r\n     * @param pt\r\n     * @param segment\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static point2segment(pt, segment) {\r\n        /* Degenerated case of zero-length segment */\r\n        if (segment.start.equalTo(segment.end)) {\r\n            return Distance.point2point(pt, segment.start);\r\n        }\r\n\r\n        let v_seg = new Flatten.Vector(segment.start, segment.end);\r\n        let v_ps2pt = new Flatten.Vector(segment.start, pt);\r\n        let v_pe2pt = new Flatten.Vector(segment.end, pt);\r\n        let start_sp = v_seg.dot(v_ps2pt);\r\n        /* dot product v_seg * v_ps2pt */\r\n        let end_sp = -v_seg.dot(v_pe2pt);\r\n        /* minus dot product v_seg * v_pe2pt */\r\n\r\n        let dist;\r\n        let closest_point;\r\n        if (Flatten.Utils.GE(start_sp, 0) && Flatten.Utils.GE(end_sp, 0)) {    /* point inside segment scope */\r\n            let v_unit = segment.tangentInStart(); // new Flatten.Vector(v_seg.x / this.length, v_seg.y / this.length);\r\n            /* unit vector ||v_unit|| = 1 */\r\n            dist = Math.abs(v_unit.cross(v_ps2pt));\r\n            /* dist = abs(v_unit x v_ps2pt) */\r\n            closest_point = segment.start.translate(v_unit.multiply(v_unit.dot(v_ps2pt)));\r\n            return [dist, new Flatten.Segment(pt, closest_point)];\r\n        } else if (start_sp < 0) {                             /* point is out of scope closer to ps */\r\n            return pt.distanceTo(segment.start);\r\n        } else {                                               /* point is out of scope closer to pe */\r\n            return pt.distanceTo(segment.end);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and arc\r\n     * @param pt\r\n     * @param arc\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static point2arc(pt, arc) {\r\n        let circle = new Flatten.Circle(arc.pc, arc.r);\r\n        let dist_and_segment = [];\r\n        let dist, shortest_segment;\r\n        [dist, shortest_segment] = Distance.point2circle(pt, circle);\r\n        if (shortest_segment.end.on(arc)) {\r\n            dist_and_segment.push(Distance.point2circle(pt, circle));\r\n        }\r\n        dist_and_segment.push(Distance.point2point(pt, arc.start));\r\n        dist_and_segment.push(Distance.point2point(pt, arc.end));\r\n\r\n        Distance.sort(dist_and_segment);\r\n\r\n        return dist_and_segment[0];\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and edge\r\n     * @param pt\r\n     * @param edge\r\n     * @returns {[number, Flatten.Segment]}\r\n     */\r\n    static point2edge(pt, edge) {\r\n        return edge.shape instanceof Flatten.Segment ?\r\n            Distance.point2segment(pt, edge.shape) :\r\n            Distance.point2arc(pt, edge.shape);\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between segment and line\r\n     * @param seg\r\n     * @param line\r\n     * @returns {[number, Flatten.Segment]}\r\n     */\r\n    static segment2line(seg, line) {\r\n        let ip = seg.intersect(line);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];   // distance = 0, closest point is the first point\r\n        }\r\n        let dist_and_segment = [];\r\n        dist_and_segment.push(Distance.point2line(seg.start, line));\r\n        dist_and_segment.push(Distance.point2line(seg.end, line));\r\n\r\n        Distance.sort(dist_and_segment);\r\n        return dist_and_segment[0];\r\n\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two segments\r\n     * @param seg1\r\n     * @param seg2\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static segment2segment(seg1, seg2) {\r\n        let ip = intersectSegment2Segment(seg1, seg2);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];   // distance = 0, closest point is the first point\r\n        }\r\n\r\n        // Seg1 and seg2 not intersected\r\n        let dist_and_segment = [];\r\n        let dist_tmp, shortest_segment_tmp;\r\n        [dist_tmp, shortest_segment_tmp] = Distance.point2segment(seg2.start, seg1);\r\n        dist_and_segment.push([dist_tmp, shortest_segment_tmp.reverse()]);\r\n        [dist_tmp, shortest_segment_tmp] = Distance.point2segment(seg2.end, seg1);\r\n        dist_and_segment.push([dist_tmp, shortest_segment_tmp.reverse()]);\r\n        dist_and_segment.push(Distance.point2segment(seg1.start, seg2));\r\n        dist_and_segment.push(Distance.point2segment(seg1.end, seg2));\r\n\r\n        Distance.sort(dist_and_segment);\r\n        return dist_and_segment[0];\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between segment and circle\r\n     * @param seg\r\n     * @param circle\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static segment2circle(seg, circle) {\r\n        /* Case 1 Segment and circle intersected. Return the first point and zero distance */\r\n        let ip = seg.intersect(circle);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        // No intersection between segment and circle\r\n\r\n        /* Case 2. Distance to projection of center point to line bigger than radius\r\n         * And projection point belong to segment\r\n          * Then measure again distance from projection to circle and return it */\r\n        let line = new Flatten.Line(seg.ps, seg.pe);\r\n        let [dist, shortest_segment] = Distance.point2line(circle.center, line);\r\n        if (Flatten.Utils.GE(dist, circle.r) && shortest_segment.end.on(seg)) {\r\n            return Distance.point2circle(shortest_segment.end, circle);\r\n        }\r\n        /* Case 3. Otherwise closest point is one of the end points of the segment */\r\n        else {\r\n            let [dist_from_start, shortest_segment_from_start] = Distance.point2circle(seg.start, circle);\r\n            let [dist_from_end, shortest_segment_from_end] = Distance.point2circle(seg.end, circle);\r\n            return Flatten.Utils.LT(dist_from_start, dist_from_end) ?\r\n                [dist_from_start, shortest_segment_from_start] :\r\n                [dist_from_end, shortest_segment_from_end];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between segment and arc\r\n     * @param seg\r\n     * @param arc\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static segment2arc(seg, arc) {\r\n        /* Case 1 Segment and arc intersected. Return the first point and zero distance */\r\n        let ip = seg.intersect(arc);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        // No intersection between segment and arc\r\n        let line = new Flatten.Line(seg.ps, seg.pe);\r\n        let circle = new Flatten.Circle(arc.pc, arc.r);\r\n\r\n        /* Case 2. Distance to projection of center point to line bigger than radius AND\r\n         * projection point belongs to segment AND\r\n           * distance from projection point to circle belongs to arc  =>\r\n           * return this distance from projection to circle */\r\n        let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n        if (Flatten.Utils.GE(dist_from_center, circle.r) && shortest_segment_from_center.end.on(seg)) {\r\n            let [dist_from_projection, shortest_segment_from_projection] =\r\n                Distance.point2circle(shortest_segment_from_center.end, circle);\r\n            if (shortest_segment_from_projection.end.on(arc)) {\r\n                return [dist_from_projection, shortest_segment_from_projection];\r\n            }\r\n        }\r\n        /* Case 3. Otherwise closest point is one of the end points of the segment */\r\n        let dist_and_segment = [];\r\n        dist_and_segment.push(Distance.point2arc(seg.start, arc));\r\n        dist_and_segment.push(Distance.point2arc(seg.end, arc));\r\n\r\n        let dist_tmp, segment_tmp;\r\n        [dist_tmp, segment_tmp] = Distance.point2segment(arc.start, seg);\r\n        dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n\r\n        [dist_tmp, segment_tmp] = Distance.point2segment(arc.end, seg);\r\n        dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n\r\n        Distance.sort(dist_and_segment);\r\n        return dist_and_segment[0];\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two circles\r\n     * @param circle1\r\n     * @param circle2\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static circle2circle(circle1, circle2) {\r\n        let ip = circle1.intersect(circle2);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        // Case 1. Concentric circles. Convert to arcs and take distance between two arc starts\r\n        if (circle1.center.equalTo(circle2.center)) {\r\n            let arc1 = circle1.toArc();\r\n            let arc2 = circle2.toArc();\r\n            return Distance.point2point(arc1.start, arc2.start);\r\n        } else {\r\n            // Case 2. Not concentric circles\r\n            let line = new Flatten.Line(circle1.center, circle2.center);\r\n            let ip1 = line.intersect(circle1);\r\n            let ip2 = line.intersect(circle2);\r\n\r\n            let dist_and_segment = [];\r\n\r\n            dist_and_segment.push(Distance.point2point(ip1[0], ip2[0]));\r\n            dist_and_segment.push(Distance.point2point(ip1[0], ip2[1]));\r\n            dist_and_segment.push(Distance.point2point(ip1[1], ip2[0]));\r\n            dist_and_segment.push(Distance.point2point(ip1[1], ip2[1]));\r\n\r\n            Distance.sort(dist_and_segment);\r\n            return dist_and_segment[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two circles\r\n     * @param circle\r\n     * @param line\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static circle2line(circle, line) {\r\n        let ip = circle.intersect(line);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n        let [dist, shortest_segment] = Distance.point2circle(shortest_segment_from_center.end, circle);\r\n        shortest_segment = shortest_segment.reverse();\r\n        return [dist, shortest_segment];\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between arc and line\r\n     * @param arc\r\n     * @param line\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static arc2line(arc, line) {\r\n        /* Case 1 Line and arc intersected. Return the first point and zero distance */\r\n        let ip = line.intersect(arc);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        let circle = new Flatten.Circle(arc.center, arc.r);\r\n\r\n        /* Case 2. Distance to projection of center point to line bigger than radius AND\r\n         * projection point belongs to segment AND\r\n           * distance from projection point to circle belongs to arc  =>\r\n           * return this distance from projection to circle */\r\n        let [dist_from_center, shortest_segment_from_center] = Distance.point2line(circle.center, line);\r\n        if (Flatten.Utils.GE(dist_from_center, circle.r)) {\r\n            let [dist_from_projection, shortest_segment_from_projection] =\r\n                Distance.point2circle(shortest_segment_from_center.end, circle);\r\n            if (shortest_segment_from_projection.end.on(arc)) {\r\n                return [dist_from_projection, shortest_segment_from_projection];\r\n            }\r\n        } else {\r\n            let dist_and_segment = [];\r\n            dist_and_segment.push(Distance.point2line(arc.start, line));\r\n            dist_and_segment.push(Distance.point2line(arc.end, line));\r\n\r\n            Distance.sort(dist_and_segment);\r\n            return dist_and_segment[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between arc and circle\r\n     * @param arc\r\n     * @param circle2\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static arc2circle(arc, circle2) {\r\n        let ip = arc.intersect(circle2);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        let circle1 = new Flatten.Circle(arc.center, arc.r);\r\n\r\n        let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\r\n        if (shortest_segment.start.on(arc)) {\r\n            return [dist, shortest_segment];\r\n        } else {\r\n            let dist_and_segment = [];\r\n\r\n            dist_and_segment.push(Distance.point2circle(arc.start, circle2));\r\n            dist_and_segment.push(Distance.point2circle(arc.end, circle2));\r\n\r\n            Distance.sort(dist_and_segment);\r\n\r\n            return dist_and_segment[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two arcs\r\n     * @param arc1\r\n     * @param arc2\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static arc2arc(arc1, arc2) {\r\n        let ip = arc1.intersect(arc2);\r\n        if (ip.length > 0) {\r\n            return [0, new Flatten.Segment(ip[0], ip[0])];\r\n        }\r\n\r\n        let circle1 = new Flatten.Circle(arc1.center, arc1.r);\r\n        let circle2 = new Flatten.Circle(arc2.center, arc2.r);\r\n\r\n        let [dist, shortest_segment] = Distance.circle2circle(circle1, circle2);\r\n        if (shortest_segment.start.on(arc1) && shortest_segment.end.on(arc2)) {\r\n            return [dist, shortest_segment];\r\n        } else {\r\n            let dist_and_segment = [];\r\n\r\n            let dist_tmp, segment_tmp;\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc1.start, arc2);\r\n            if (segment_tmp.end.on(arc2)) {\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n            }\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc1.end, arc2);\r\n            if (segment_tmp.end.on(arc2)) {\r\n                dist_and_segment.push([dist_tmp, segment_tmp]);\r\n            }\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc2.start, arc1);\r\n            if (segment_tmp.end.on(arc1)) {\r\n                dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n            }\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2arc(arc2.end, arc1);\r\n            if (segment_tmp.end.on(arc1)) {\r\n                dist_and_segment.push([dist_tmp, segment_tmp.reverse()]);\r\n            }\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.start);\r\n            dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.start, arc2.end);\r\n            dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.start);\r\n            dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n            [dist_tmp, segment_tmp] = Distance.point2point(arc1.end, arc2.end);\r\n            dist_and_segment.push([dist_tmp, segment_tmp]);\r\n\r\n            Distance.sort(dist_and_segment);\r\n\r\n            return dist_and_segment[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between point and polygon\r\n     * @param point\r\n     * @param polygon\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static point2polygon(point, polygon) {\r\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n        for (let edge of polygon.edges) {\r\n            let [dist, shortest_segment] = Distance.point2edge(point, edge);\r\n            if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                min_dist_and_segment = [dist, shortest_segment];\r\n            }\r\n        }\r\n        return min_dist_and_segment;\r\n    }\r\n\r\n    static shape2polygon(shape, polygon) {\r\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n        for (let edge of polygon.edges) {\r\n            let [dist, shortest_segment] = shape.distanceTo(edge.shape);\r\n            if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                min_dist_and_segment = [dist, shortest_segment];\r\n            }\r\n        }\r\n        return min_dist_and_segment;\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two polygons\r\n     * @param polygon1\r\n     * @param polygon2\r\n     * @returns {[number, Flatten.Segment]} - distance and shortest segment\r\n     */\r\n    static polygon2polygon(polygon1, polygon2) {\r\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n        for (let edge1 of polygon1.edges) {\r\n            for (let edge2 of polygon2.edges) {\r\n                let [dist, shortest_segment] = edge1.shape.distanceTo(edge2.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n        }\r\n        return min_dist_and_segment;\r\n    }\r\n\r\n    /**\r\n     * Returns [mindist, maxdist] array of squared minimal and maximal distance between boxes\r\n     * Minimal distance by x is\r\n     *    (box2.xmin - box1.xmax), if box1 is left to box2\r\n     *    (box1.xmin - box2.xmax), if box2 is left to box1\r\n     *    0,                       if box1 and box2 are intersected by x\r\n     * Minimal distance by y is defined in the same way\r\n     *\r\n     * Maximal distance is estimated as a sum of squared dimensions of the merged box\r\n     *\r\n     * @param box1\r\n     * @param box2\r\n     * @returns {Number | Number} - minimal and maximal distance\r\n     */\r\n    static box2box_minmax(box1, box2) {\r\n        let mindist_x = Math.max(Math.max(box1.xmin - box2.xmax, 0), Math.max(box2.xmin - box1.xmax, 0));\r\n        let mindist_y = Math.max(Math.max(box1.ymin - box2.ymax, 0), Math.max(box2.ymin - box1.ymax, 0));\r\n        let mindist = mindist_x * mindist_x + mindist_y * mindist_y;\r\n\r\n        let box = box1.merge(box2);\r\n        let dx = box.xmax - box.xmin;\r\n        let dy = box.ymax - box.ymin;\r\n        let maxdist = dx * dx + dy * dy;\r\n\r\n        return [mindist, maxdist];\r\n    }\r\n\r\n    static minmax_tree_process_level(shape, level, min_stop, tree) {\r\n        // Calculate minmax distance to each shape in current level\r\n        // Insert result into the interval tree for further processing\r\n        // update min_stop with maxdist, it will be the new stop distance\r\n        let mindist, maxdist;\r\n        for (let node of level) {\r\n\r\n            // [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\r\n            // if (Flatten.Utils.GT(mindist, min_stop))\r\n            //     continue;\r\n\r\n            // Estimate min-max dist to the shape stored in the node.item, using node.item.key which is shape's box\r\n            [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.item.key);\r\n            if (node.item.value instanceof Flatten.Edge) {\r\n                tree.insert([mindist, maxdist], node.item.value.shape);\r\n            } else {\r\n                tree.insert([mindist, maxdist], node.item.value);\r\n            }\r\n            if (Flatten.Utils.LT(maxdist, min_stop)) {\r\n                min_stop = maxdist;                       // this will be the new distance estimation\r\n            }\r\n        }\r\n\r\n        if (level.length === 0)\r\n            return min_stop;\r\n\r\n        // Calculate new level from left and right children of the current\r\n        let new_level_left = level.map(node => node.left.isNil() ? undefined : node.left).filter(node => node !== undefined);\r\n        let new_level_right = level.map(node => node.right.isNil() ? undefined : node.right).filter(node => node !== undefined);\r\n        // Merge left and right subtrees and leave only relevant subtrees\r\n        let new_level = [...new_level_left, ...new_level_right].filter(node => {\r\n            // Node subtree quick reject, node.max is a subtree box\r\n            let [mindist, maxdist] = Distance.box2box_minmax(shape.box, node.max);\r\n            return (Flatten.Utils.LE(mindist, min_stop));\r\n        });\r\n\r\n        min_stop = Distance.minmax_tree_process_level(shape, new_level, min_stop, tree);\r\n        return min_stop;\r\n    }\r\n\r\n    /**\r\n     * Calculates sorted tree of [mindist, maxdist] intervals between query shape\r\n     * and shapes of the planar set.\r\n     * @param shape\r\n     * @param set\r\n     */\r\n    static minmax_tree(shape, set, min_stop) {\r\n        let tree = new IntervalTree();\r\n        let level = [set.index.root];\r\n        let squared_min_stop = min_stop < Number.POSITIVE_INFINITY ? min_stop * min_stop : Number.POSITIVE_INFINITY;\r\n        squared_min_stop = Distance.minmax_tree_process_level(shape, level, squared_min_stop, tree);\r\n        return tree;\r\n    }\r\n\r\n    static minmax_tree_calc_distance(shape, node, min_dist_and_segment) {\r\n        let min_dist_and_segment_new, stop;\r\n        if (node != null && !node.isNil()) {\r\n            [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.left, min_dist_and_segment);\r\n\r\n            if (stop) {\r\n                return [min_dist_and_segment_new, stop];\r\n            }\r\n\r\n            if (Flatten.Utils.LT(min_dist_and_segment_new[0], Math.sqrt(node.item.key.low))) {\r\n                return [min_dist_and_segment_new, true];   // stop condition\r\n            }\r\n\r\n            let [dist, shortest_segment] = Distance.distance(shape, node.item.value);\r\n            // console.log(dist)\r\n            if (Flatten.Utils.LT(dist, min_dist_and_segment_new[0])) {\r\n                min_dist_and_segment_new = [dist, shortest_segment];\r\n            }\r\n\r\n            [min_dist_and_segment_new, stop] = Distance.minmax_tree_calc_distance(shape, node.right, min_dist_and_segment_new);\r\n\r\n            return [min_dist_and_segment_new, stop];\r\n        }\r\n\r\n        return [min_dist_and_segment, false];\r\n    }\r\n\r\n    /**\r\n     * Calculates distance between shape and Planar Set of shapes\r\n     * @param shape\r\n     * @param {PlanarSet} set\r\n     * @param {Number} min_stop\r\n     * @returns {*}\r\n     */\r\n    static shape2planarSet(shape, set, min_stop = Number.POSITIVE_INFINITY) {\r\n        let min_dist_and_segment = [min_stop, new Flatten.Segment()];\r\n        let stop = false;\r\n        if (set instanceof Flatten.PlanarSet) {\r\n            let tree = Distance.minmax_tree(shape, set, min_stop);\r\n            [min_dist_and_segment, stop] = Distance.minmax_tree_calc_distance(shape, tree.root, min_dist_and_segment);\r\n        }\r\n        return min_dist_and_segment;\r\n    }\r\n\r\n    static sort(dist_and_segment) {\r\n        dist_and_segment.sort((d1, d2) => {\r\n            if (Flatten.Utils.LT(d1[0], d2[0])) {\r\n                return -1;\r\n            }\r\n            if (Flatten.Utils.GT(d1[0], d2[0])) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        });\r\n    }\r\n\r\n    static distance(shape1, shape2) {\r\n        return shape1.distanceTo(shape2);\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment any shape and multiline\r\n     * @param shape\r\n     * @param multiline\r\n     * @returns {[number, Flatten.Segment]}\r\n     */\r\n    static shape2multiline(shape, multiline) {\r\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n        for (let edge of multiline) {\r\n            let [dist, shortest_segment] = Distance.distance(shape, edge.shape);\r\n            if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                min_dist_and_segment = [dist, shortest_segment];\r\n            }\r\n        }\r\n        return min_dist_and_segment;\r\n    }\r\n\r\n    /**\r\n     * Calculate distance and shortest segment between two multilines\r\n     * @param multiline1\r\n     * @param multiline2\r\n     * @returns {[number, Flatten.Segment]}\r\n     */\r\n    static multiline2multiline(multiline1, multiline2) {\r\n        let min_dist_and_segment = [Number.POSITIVE_INFINITY, new Flatten.Segment()];\r\n        for (let edge1 of multiline1) {\r\n            for (let edge2 of multiline2) {\r\n                let [dist, shortest_segment] = Distance.distance(edge1.shape, edge2.shape);\r\n                if (Flatten.Utils.LT(dist, min_dist_and_segment[0])) {\r\n                    min_dist_and_segment = [dist, shortest_segment];\r\n                }\r\n            }\r\n        }\r\n        return min_dist_and_segment;\r\n    }\r\n}\r\n\r\nFlatten.Distance = Distance;\r\n\r\nconst {Multiline, Point: Point$1, Segment, Polygon} = Flatten;\r\n\r\n// POINT (30 10)\r\n// MULTIPOINT (10 40, 40 30, 20 20, 30 10)\r\n// LINESTRING (30 10, 10 30, 40 40)\r\n// MULTILINESTRING ((10 10, 20 20, 10 40), (40 40, 30 30, 40 20, 30 10))\r\n// MULTILINESTRING ((8503.732 4424.547, 8963.747 3964.532), (8963.747 3964.532, 8707.468 3708.253), (8707.468 3708.253, 8247.454 4168.268), (8247.454 4168.268, 8503.732 4424.547))\r\n// POLYGON ((35 10, 45 45, 15 40, 10 20, 35 10), (20 30, 35 35, 30 20, 20 30))\r\n// MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)), ((20 35, 10 30, 10 10, 30 5, 45 20, 20 35), (30 20, 20 15, 20 25, 30 20)))\r\n// GEOMETRYCOLLECTION (POINT (0 0), LINESTRING (0 0, 1440 900), POLYGON ((0 0, 0 1024, 1024 1024, 1024 0, 0 0)))\r\n// GEOMETRYCOLLECTION (POINT (40 10), LINESTRING (10 10, 20 20, 10 40), POLYGON ((40 40, 20 45, 45 30, 40 40)))\r\n\r\nfunction parseSinglePoint(pointStr) {\r\n    return new Point$1(pointStr.split(' ').map(Number))\r\n}\r\n\r\nfunction parseMultiPoint(multipointStr) {\r\n    return multipointStr.split(', ').map(parseSinglePoint)\r\n}\r\n\r\nfunction parseLineString(lineStr) {\r\n    const points = parseMultiPoint(lineStr);\r\n    let segments = [];\r\n    for (let i = 0; i < points.length-1;  i++) {\r\n        segments.push(new Segment(points[i], points[i+1]));\r\n    }\r\n    return new Multiline(segments)\r\n}\r\n\r\nfunction parseMultiLineString(multilineStr) {\r\n    const lineStrings = multilineStr.replace(/\\(\\(/, '').replace(/\\)\\)$/, '').split('), (');\r\n    return lineStrings.map(parseLineString)\r\n}\r\n\r\nfunction parseSinglePolygon(polygonStr) {\r\n    const facesStr = polygonStr.replace(/\\(\\(/, '').replace(/\\)\\)$/, '').split('), (');\r\n    const polygon = new Polygon();\r\n    let orientation;\r\n    facesStr.forEach((facesStr, idx) => {\r\n        let points = facesStr.split(', ').map(coordStr => {\r\n            return new Point$1(coordStr.split(' ').map(Number))\r\n        });\r\n        const face = polygon.addFace(points);\r\n        if (idx === 0) {\r\n            orientation = face.orientation();\r\n        }\r\n        else {\r\n            if (face.orientation() === orientation) {\r\n                face.reverse();\r\n            }\r\n        }\r\n    });\r\n    return polygon\r\n}\r\n\r\nfunction parseMutliPolygon(multiPolygonString) {\r\n    // const polygonStrings = multiPolygonString.split('?')\r\n    // Split the string by the delimiter \")), ((\" which separates the polygons\r\n    const polygonStrings = multiPolygonString.split(/\\)\\), \\(\\(/).map(polygon => '((' + polygon + '))');\r\n\r\n    const polygons = polygonStrings.map(parseSinglePolygon);\r\n    const polygon = new Polygon();\r\n    const faces = polygons.reduce((acc, polygon) => [...acc, ...polygon?.faces], []);\r\n    faces.forEach(face => polygon.addFace([...face?.shapes]));\r\n    return polygon;\r\n}\r\n\r\nfunction parsePolygon(wkt) {\r\n    if (wkt.startsWith(\"POLYGON\")) {\r\n        const polygonStr = wkt.replace(/^POLYGON /, '');\r\n        return parseSinglePolygon(polygonStr)\r\n    }\r\n    else {\r\n        // const multiPolygonString = wkt.replace(/^MULTIPOLYGON \\(/, '').replace(/\\)$/, '').replace(/\\)\\), \\(\\(/,'))?((')\r\n        const multiPolygonString = wkt.replace(/^MULTIPOLYGON \\(\\(\\((.*)\\)\\)\\)$/, '$1');\r\n        return parseMutliPolygon(multiPolygonString)\r\n    }\r\n}\r\n\r\nfunction parseArrayOfPoints(str) {\r\n    const arr = str.split('\\n').map(x => x.match(/\\(([^)]+)\\)/)[1]);\r\n    return arr.map(parseSinglePoint)\r\n}\r\n\r\nfunction parseArrayOfLineStrings(str) {\r\n    const arr = str.split('\\n').map(x => x.match(/\\(([^)]+)\\)/)[1]);\r\n    return arr.map(parseLineString).reduce((acc, x) => [...acc, ...x], [])\r\n}\r\n\r\n/**\r\n * Convert WKT string to array of Flatten shapes.\r\n * @param str\r\n * @returns {Point | Point[] | Multiline | Multiline[] | Polygon | Shape[] | null}\r\n */\r\nfunction parseWKT(str) {\r\n    if (str.startsWith(\"POINT\")) {\r\n        const pointStr = str.replace(/^POINT \\(/, '').replace(/\\)$/, '');\r\n        return parseSinglePoint(pointStr)\r\n    }\r\n    else if (str.startsWith(\"MULTIPOINT\")) {\r\n        const multiPointStr = str.replace(/^MULTIPOINT \\(/, '').replace(/\\)$/, '');\r\n        return parseMultiPoint(multiPointStr)\r\n    }\r\n    else if (str.startsWith(\"LINESTRING\")) {\r\n        const lineStr = str.replace(/^LINESTRING \\(/, '').replace(/\\)$/, '');\r\n        return parseLineString(lineStr)\r\n    }\r\n    else if (str.startsWith(\"MULTILINESTRING\")) {\r\n        const multilineStr = str.replace(/^MULTILINESTRING /, '');\r\n        return parseMultiLineString(multilineStr)\r\n    }\r\n    else if (str.startsWith(\"POLYGON\") || str.startsWith(\"MULTIPOLYGON\")) {\r\n        return parsePolygon(str)\r\n    }\r\n    else if (str.startsWith(\"GEOMETRYCOLLECTION\")) {\r\n        // const regex = /(POINT|LINESTRING|POLYGON|MULTIPOINT|MULTILINESTRING|MULTIPOLYGON|GEOMETRYCOLLECTION) \\([^\\)]+\\)/g\r\n        /* Explanation:\r\n(?<type>POINT|LINESTRING|POLYGON|MULTIPOINT|MULTILINESTRING|MULTIPOLYGON):\r\nThis named group will capture the geometry type. The type label helps with understanding the structure but\r\n is not necessary unless you process the matches programmatically and want easy access to the geometry type.\r\n\\( and \\): Match the opening and closing parentheses.\r\n(?:[^\\(\\)]|\\([^\\)]*\\))*: A non-capturing group that allows for:\r\n[^\\(\\)]: Matching any character except parentheses, handling simple geometries.\r\n|\\([^\\)]*\\): Handling nested parentheses for geometries like POLYGON and MULTILINESTRING.\r\n* after the non-capturing group: Allows for repeating the pattern zero or more times to match all contents between the outermost parentheses. */\r\n        const regex = /(?<type>POINT|LINESTRING|POLYGON|MULTIPOINT|MULTILINESTRING|MULTIPOLYGON) \\((?:[^\\(\\)]|\\([^\\)]*\\))*\\)/g;\r\n        const wktArray = str.match(regex);\r\n        if (wktArray[0].startsWith('GEOMETRYCOLLECTION')) {\r\n            wktArray[0] = wktArray[0].replace('GEOMETRYCOLLECTION (','');\r\n        }\r\n        const flArray = wktArray.map(parseWKT).map(x => x instanceof Array ? x : [x]);\r\n        return flArray.reduce((acc, x) => [...acc, ...x], [])\r\n    }\r\n    else if (isArrayOfPoints(str)) {\r\n        return parseArrayOfPoints(str)\r\n    }\r\n    else if (isArrayOfLines(str)) {\r\n        return parseArrayOfLineStrings(str)\r\n    }\r\n    return []\r\n}\r\n\r\nfunction isArrayOfPoints(str) {\r\n    return str.split('\\n')?.every(str => str.includes('POINT'))\r\n}\r\n\r\nfunction isArrayOfLines(str) {\r\n    return str.split('\\n')?.every(str => str.includes('LINESTRING'))\r\n}\r\n\r\n/**\r\n * Return true if given string starts with one of WKT tags and possibly contains WKT string,\r\n * @param str\r\n * @returns {boolean}\r\n */\r\nfunction isWktString(str) {\r\n    return (\r\n        str.startsWith(\"POINT\") || isArrayOfPoints(str) ||\r\n        str.startsWith(\"LINESTRING\") || isArrayOfLines(str) ||\r\n        str.startsWith(\"MULTILINESTRING\") ||\r\n        str.startsWith(\"POLYGON\") ||\r\n        str.startsWith(\"MULTIPOINT\") ||\r\n        str.startsWith(\"MULTIPOLYGON\") ||\r\n        str.startsWith(\"GEOMETRYCOLLECTION\")\r\n    )\r\n}\r\n\r\nFlatten.isWktString = isWktString;\r\nFlatten.parseWKT = parseWKT;\r\n\r\n/**\r\n * Created by Alex Bol on 2/18/2017.\r\n */\r\n\r\n\r\nFlatten.BooleanOperations = BooleanOperations;\r\nFlatten.Relations = Relations;\r\n\r\nexport { Arc, BOUNDARY$1 as BOUNDARY, BooleanOperations, Box, CCW, CW, Circle$1 as Circle, Distance, Edge, Errors, Face, INSIDE$2 as INSIDE, Inversion, Line$1 as Line, Matrix, Multiline$1 as Multiline, ORIENTATION, OUTSIDE$1 as OUTSIDE, OVERLAP_OPPOSITE$1 as OVERLAP_OPPOSITE, OVERLAP_SAME$1 as OVERLAP_SAME, PlanarSet, Point$3 as Point, Polygon$1 as Polygon, Ray, Relations, Segment$1 as Segment, smart_intersections as SmartIntersections, Utils$1 as Utils, Vector$1 as Vector, arc, box, circle, Flatten as default, inversion, isWktString, line, matrix, multiline, parseWKT, point, polygon, ray, ray_shoot, segment, vector$1 as vector };\r\n"],
  "mappings": "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",
  "names": ["line", "circle", "box", "arc", "point", "segment", "circle2", "ray", "polygon", "multiline", "matrix", "int_point_cur2", "int_point_cur1", "vector", "Interval", "Point", "prev_arc", "new_arc", "shape", "Circle", "Line", "Vector", "mindist", "maxdist", "Multiline", "Segment", "Polygon", "facesStr", "str"]
}
